syntax = "proto3";

package smartcore.traits;

option csharp_namespace = "Smartcore.Traits";
option go_package = "github.com/smart-core-os/sc-api/go/traits";
option java_multiple_files = true;
option java_outer_classname = "MetadataProto";
option java_package = "dev.smartcore.traits";
option php_namespace = "Smartcore\\Traits";

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

// MetadataApi describes information about a named device.
service MetadataApi {
  // GetMetadata returns information associated with the given name.
  rpc GetMetadata(GetMetadataRequest) returns (Metadata);
  // PullMetadata subscribes to changes in the information associated with the named device.
  rpc PullMetadata(PullMetadataRequest) returns (stream PullMetadataResponse);
}

service MetadataInfo {
  // todo: define MetadataInfo
}

// Metadata holds information about a device.
// The information properties are grouped based on the aspect of the device they relate to.
// The metadata object and each group may hold arbitrary data via the more property.
message Metadata {
  // The canonical name for this device.
  string name = 1;
  repeated TraitMetadata traits = 2;

  message Appearance {
    // Title holds the official name for the device.
    // For example "Reception Printer" or "MR1 AC Unit"
    string title = 1;
    // Description holds additional detail about this device.
    // For example "The printer for floor 3".
    string description = 2;
    // other options; add when requested/needed
    // string color; // a representative color
    // string icon;
    // string image; // in different resolutions?

    map<string, string> more = 100;
  }
  // Appearance describes properties of the device related to how it should be displayed on a user interface.
  Appearance appearance = 3;

  message Location {
    // Title holds the official name for the location.
    // For example "Meeting Room 1"
    string title = 1;
    // Description holds additional detail about the location.
    // For example "North-east project room".
    string description = 2;
    // Architectural reference holds the reference for the location in architectural drawings.
    string architecture_reference = 3;
    // other options, add when requested/needed
    // string floor;
    // string site;
    // string country; // country name/code?
    // string alignment; // left, centre, right, top, bottom-left, etc

    map<string, string> more = 100;
  }
  // Location describes where the device is physically located.
  Location location = 4;

  message ID {
    string serial_number = 1;
    string bim = 2;
    string bacnet = 3;

    map<string, string> more = 100;
  }
  // ID records different IDs for the device across different systems.
  ID id = 5;

  message Product {
    string title = 1;
    string manufacturer = 2;
    string model = 3;
    string hardware_version = 4;
    string firmware_version = 5;
    string software_version = 6;

    message Kind {
      string title = 1;
      string code = 2;
    }
    Kind kind = 7;

    map<string, string> more = 100;
  }
  // Product describes the make and model of the device and who made it.
  Product product = 6;

  message Revision {
    string title = 1;
    google.protobuf.Timestamp manufacture_date = 2;
    string model = 3;
    string hardware_version = 4;
    string firmware_version = 5;
    string software_version = 6;
    string batch = 7;

    map<string, string> more = 100;
  }
  // Revision describes this exact version of the device.
  // Properties in Revision take president over fields in product.
  Revision revision = 7;

  message Installation {
    google.protobuf.Timestamp install_time = 1;
    google.protobuf.Timestamp replace_time = 2;
    string installer = 3;
    bool labelled = 4;
    google.protobuf.Timestamp label_time = 5;

    map<string, string> more = 100;
  }
  // Installation records information about the devices installation.
  Installation installation = 8;

  message NIC {
    // The name of this NIC, if there is one.
    string display_name = 1;
    // The MAC address of this NIC.
    // May take any of the common MAC formatting options, case insensitive 001B638445E6, 00:1b:63:84:45:e6, or
    // 00-1B-63-84-45-E6.
    // Non-hexadecimal digits should be ignored, and it should not be longer than 17 characters long -
    // 12 digits in pairs + 5 separator chars.
    string mac_address = 2;
    // The V4 or V6 IP address of the NIC.
    string ip = 3;
    // The network (subnet) the NIC is on.
    // In the form `<ip>/<bits>`, the CIDR notation defined in RFC 4632 and RFC 4291.
    // Masked bits may be masked but are not required to be.
    string network = 4;
    // The IP of the gateway.
    string gateway = 5;
    // The IP of DNS servers, in priority order.
    repeated string dns = 6;

    enum Assignment {
      ASSIGNMENT_UNSPECIFIED = 0;
      DHCP = 1;
      STATIC = 2;
    }
    Assignment assignment = 10;

    map<string, string> more = 100;
  }
  // Nics describes the devices network interfaces.
  repeated NIC nics = 9;

  message Membership {
    // Group holds a group name shared between this device and others.
    // This can be useful for displaying this device on interfaces.
    string group = 1;
    // Subsystem records which larger system this device is part of.
    // For example "BMS" or "Lighting"
    string subsystem = 2;

    map<string, string> more = 100;
  }
  // Membership describes how this device is related to other devices.
  Membership membership = 10;

  // More contains any non-specified additional metadata that wouldn't fit into the other categories.
  map<string, string> more = 100;
}

message TraitMetadata {
  // The fully qualified name of the trait.
  string name = 1;

  map<string, string> more = 100;
}


message GetMetadataRequest {
  // Name of the device to fetch the state for
  string name = 1;
  // Fields to fetch relative to the Metadata type
  google.protobuf.FieldMask read_mask = 2;
}

message PullMetadataRequest {
  // Name of the device to fetch the state for
  string name = 1;
  // Fields to fetch relative to the Metadata type
  google.protobuf.FieldMask read_mask = 2;
  // When true the device will only send changes to the resource value.
  // The default behaviour is to send the current value immediately followed by any updates as they happen.
  bool updates_only = 3;
}

message PullMetadataResponse {
  // The list of changes which have occurred
  repeated Change changes = 1;

  message Change {
    // The name of the device that emitted this change
    string name = 1;
    // The new updated value.
    Metadata metadata = 2;
    // When the change occurred
    google.protobuf.Timestamp change_time = 3;
  }
}
