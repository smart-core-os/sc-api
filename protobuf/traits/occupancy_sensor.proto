syntax = "proto3";

package smartcore.traits;

option csharp_namespace = "Smartcore.Traits";
option go_package = "github.com/smart-core-os/sc-api/go/traits";
option java_multiple_files = true;
option java_outer_classname = "OccupancySensorProto";
option java_package = "dev.smartcore.traits";
option php_namespace = "Smartcore\\Traits";

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "types/info.proto";

// The reporting of occupancy in a space. Similar to a MotionSensor, this reports whether a space is occupied or
// unoccupied with additional optional information relating to _how_ occupied the space is (i.e. how many people are
// present)
service OccupancySensorApi {
  // Get the current motion state for the device.
  rpc GetOccupancy (GetOccupancyRequest) returns (Occupancy);

  // subscribe to changes in the motion state for the device.
  rpc PullOccupancy (PullOccupancyRequest) returns (stream PullOccupancyResponse);
}

// Describes the capabilities of a specific named device with respect to this trait.
service OccupancySensorInfo {
  // Get information about how a named device implements Occupancy measurements
  rpc DescribeOccupancy (DescribeOccupancyRequest) returns (OccupancySupport);
}

// The occupancy state the device is reporting and updating
message Occupancy {
  // The current occupancy state
  State state = 1;
  // The total number of people the occupancy sensor has detected. Do NOT use this value as an indication of occupancy
  // state, a value of 0 could be reported for a space that is occupied if the device either doesn't support people
  // counts or there is some other undefined issue with the counting part of the sensor suite.
  int32 people_count = 2;
  // When the occupancy state last changed. Does not update when people_count changes unlike the timestamp in
  // OccupancyChange events
  google.protobuf.Timestamp state_change_time = 3;

  // Optional. List of human readable strings explaining why the device thinks the space is in the current state. For
  // example could say OCCUPIED:["Detected people in space"] or IDLE:["No motion detected for 10 minutes"]. Typically
  // used for debugging or troubleshooting purposes.
  repeated string reasons = 4;
  // Optional. How confident is the sensor that the current occupancy state is accurate. A value of 0 means that the
  // confidence is unknown
  double confidence = 5;

  // Possible states for occupancy
  enum State {
    // There are no signals to suggest either an occupied or unoccupied space
    STATE_UNSPECIFIED = 0;
    // The space is occupied
    OCCUPIED = 1;
    // The space is unoccupied
    UNOCCUPIED = 2;
    // The space is likely occupied but some signals suggest that no activity is occurring (i.e. people are asleep or not
    // moving for other reasons)
    IDLE = 3;
  }
}

// OccupancySupport describes the capabilities of devices implementing this trait
message OccupancySupport {
  // How a named device supports read/pull apis
  smartcore.types.ResourceSupport resource_support = 1;
  // how many people can the occupancy service report. 0 means it won't report people counts. Note: this is _not_ the
  // total capacity for the space, it's the capacity of the sensor
  int32 max_people = 2;
}

// request to fetch the current state of the device
message GetOccupancyRequest {
  // the name for the device to get the occupancy state for
  string name = 1;
  // The state fields to fetch
  google.protobuf.FieldMask read_mask = 2;
}

// request to be notified of changes to the state of the device
message PullOccupancyRequest {
  // the name for the device to subscribe to
  string name = 1;
  // The state fields to fetch
  google.protobuf.FieldMask read_mask = 2;
  // When true the device will only send changes to the resource value.
  // The default behaviour is to send the current value immediately followed by any updates as they happen.
  bool updates_only = 3;
}

// response containing occupancy state changes
message PullOccupancyResponse {
  // the list of changes that have occurred since the last event
  repeated Change changes = 1;

  // A change to the occupancy state of the device, including people count
  message Change {
    // name for the device that issued the change
    string name = 1;
    // when the change occurred
    google.protobuf.Timestamp change_time = 2;
    // the new state for the device
    Occupancy occupancy = 3;
  }
}

message DescribeOccupancyRequest {
  // The name of the device
  string name = 1;
}
