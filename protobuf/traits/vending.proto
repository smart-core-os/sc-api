syntax = "proto3";

package smartcore.traits;

option csharp_namespace = "Smartcore.Traits";
option go_package = "github.com/smart-core-os/sc-api/go/traits";
option java_multiple_files = true;
option java_outer_classname = "VendingProto";
option java_package = "dev.smartcore.traits";
option php_namespace = "Smartcore\\Traits";

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "types/change.proto";
import "types/image.proto";
import "types/number.proto";

// VendingApi describes devices that hold a stock and can dispense their consumables on command.
// Applies to devices like vending machines, water taps, coffee machines, and pet food dispensers.
//
// The VendingApi encodes two different resources, the consumables and the stock.
// Consumables represent information about the products that are available from this device.
// Stock is a measure of how many/much of a consumables is currently available.
// When referring to the stock of all consumables, this trait uses the term inventory.
//
// Quantities, both available and dispensed, can be either discrete items like apples, or continuous like water.
// Some consumables are both discrete and continuous, you can have 0.3L or 1 cup of water.
service VendingApi {
  // fixme: Need to make a decision on whether Consumables belongs as a resource here or in VendingInfo

  // List the consumables available from this device.
  // This has no information on stock, only descriptive information about the physical item.
  rpc ListConsumables(ListConsumablesRequest) returns (ListConsumablesResponse);
  // Subscribe to change in consumables available from this device.
  rpc PullConsumables(PullConsumablesRequest) returns (stream PullConsumablesResponse);

  // Get the current stock levels for a consumable.
  // If the consumable is unknown will return NotFound.
  // If the consumable is out of stock, returns a Stock with a zero remaining quantity.
  rpc GetStock(GetStockRequest) returns (Consumable.Stock);
  // Update the quantity of a consumable in the device.
  //
  // This is unlikely to actually create physical consumables out of thin air, but is useful if the device doesn't have
  // internal sensors monitoring the physical quantity of its consumables. For example to let a cookie dispenser know
  // that it was refilled with 100 new tasty cookies.
  rpc UpdateStock(UpdateStockRequest) returns (Consumable.Stock);
  // Subscribe to changes in the stock levels for a consumable.
  rpc PullStock(PullStockRequest) returns (stream PullStockResponse);

  // List the stock for each consumable in the device.
  // The device should return zero-quantity stock for consumables that are out-of-stock.
  rpc ListInventory(ListInventoryRequest) returns (ListInventoryResponse);
  // Subscribe to changes in consumable stock.
  rpc PullInventory(PullInventoryRequest) returns (stream PullInventoryResponse);

  // Trigger the dispensing of some quantity of consumables.
  // Devices should return only stock items that are mentioned in the request.
  rpc Dispense(DispenseRequest) returns (Consumable.Stock);
  // Stop the dispensing of the mentioned consumables.
  // Devices should return only stock items that are mentioned in the request.
  rpc StopDispense(StopDispenseRequest) returns (Consumable.Stock);
}

service VendingInfo {
  // todo: implement VendingInfo
}

// Consumable describes some item that can be dispensed from a vending device.
// Noticeable variations, so far as someone might want to choose between two consumables, should be modelled as
// separate consumable instances. For example red or green apples, large or regular drinks.
message Consumable {
  // A name that can be used to uniquely refer to this consumable in the device.
  string name = 1;

  // Unit defines different consumable units.
  enum Unit {
    UNIT_UNSPECIFIED = 0;
    // There is no unit for this quantity, typically a count.
    NO_UNIT = 1;
    // The quantity is a length, in meters.
    METER = 2;
    // The quantity is a volume, in liters
    LITER = 3;
    // The quantity is a volume, in cubic meters.
    CUBIC_METER = 4;
    // The quantity is a portion, sized to fill a cup.
    CUP = 5;
    // The quantity is a mass, in kilograms.
    KILOGRAM = 6;

    // Additional units may be added over time. We should avoid adding units that are simple conversions of existing
    // units (i.e. meter + centimeter) unless they are typically used in distinct domains.
  }

  // Portion describes a possible consumption for this consumable.
  // Portions are potential units to be dispensed, a device might support dispensing individual cups of water, in which
  // case it would use `{unit:CUP, bounds:[1,1]}`. Alternatively a device might dispense sweets in chunks of 50g, and
  // would describe this using `{unit:KILOGRAM, step:0.05}`. If the device had a safety feature to limit the sweets dispensed
  // at one time it might also specify `bounds:[0.05, 5]`.
  message Portion {
    // The unit the portion is measured in.
    Unit unit = 1;
    // Upper and lower bounds for the portion quantity.
    smartcore.types.FloatBounds bounds = 2;
    // The minimal increment for the portion quantity.
    float step = 3;
  }
  // The available portions that this consumable can be dispensed in.
  repeated Portion available_portions = 2;

  // Quantity combines an amount and a unit.
  message Quantity {
    float amount = 2;
    Unit unit = 3;
  }
  // The portion that will be dispensed if not specified as part of the request.
  Quantity default_portion = 3;

  // An official title for this item.
  string title = 10;
  // A recognisable display name for this item.
  string display_name = 11;
  // A picture of the item.
  smartcore.types.Image picture = 12;
  // A url that resolves to more information on this item.
  string url = 13;

  // IDs holds external consumable ids.
  // For example this might hold an id representing an Amazon Dash button product code.
  // The map key should uniquely represent the domain for the id, for example "amazon.com/dash", the use of uris is not
  // required, values should be the id of this consumable in that domain, for example "sma81r6t1c5o3r58e1-3r8u16l1es".
  map<string, string> ids = 100;
  // Additional properties associated with the consumable.
  // Typically displayed to a user to help them to distinguish between similar consumables.
  map<string, string> more = 101;

  // Stock describes how much of a consumable is available.
  message Stock {
    // The name of a consumable supported by this device.
    string consumable = 1;
    // How many/much of the consumable is remaining.
    // Optional.
    // If the consumable is currently dispensing, this should report how much is remaining after dispensing finishes.
    Quantity remaining = 2;
    // How many/much of the consumable has been used since the counter was last reset.
    // Optional.
    // Devices may reset the counter when the stock is filled, or may count for longer.
    // If the consumable is currently dispensing, this should report how much will be used after dispensing finishes.
    Quantity used = 3;
    // How many/much of the consumable was most recently dispensed.
    // If the consumable is currently dispensing, this should report the quantity it dispensed prior to the current
    // session.
    // Optional.
    Quantity last_dispensed = 4;
    // True if the consumable is currently being dispensed.
    bool dispensing = 5;
  }
}

message ListConsumablesRequest {
  // Name of the device to fetch the state for
  string name = 1;
  // Fields to fetch relative to the Consumable type
  google.protobuf.FieldMask read_mask = 2;

  // The maximum number of items to return.
  // The service may return fewer than this value.
  // If unspecified, at most 50 items will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 3;
  // A page token, received from a previous `ListConsumablesRequest` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 4;
  // todo: enable filtering
  // Filter allows for customisation of the items returned by this request.
  // See https://google.aip.dev/160 for details.
  // Individual devices should document if and how filter is supported by that device.
  // string filter = 5;
}
message ListConsumablesResponse {
  repeated Consumable consumables = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
  // If non-zero this is the total number of consumables.
  // This may be an estimate.
  int32 total_size = 3;
}
message PullConsumablesRequest {
  // Name of the device to fetch the state for
  string name = 1;
  // Fields to fetch relative to the Consumable type
  google.protobuf.FieldMask read_mask = 2;
  // When true the device will only send changes to the resource value.
  // The default behaviour is to send the current value immediately followed by any updates as they happen.
  bool updates_only = 3;
  // todo: enable filtering
  // Filter allows for customisation of the items returned by this request.
  // See https://google.aip.dev/160 for details.
  // Individual devices should document if and how filter is supported by that device.
  // string filter = 4;
}
message PullConsumablesResponse {
  // The list of changes which have occurred
  repeated Change changes = 1;

  message Change {
    // The name of the device that emitted this change
    string name = 1;
    // The type of change (e.g. ADD, UPDATE, etc...)
    smartcore.types.ChangeType type = 2;
    // The new value to use for ADD|UPDATE changes
    Consumable new_value = 3;
    // The old value to use for UPDATE|REMOVE changes
    Consumable old_value = 4;
    // When the change occurred
    google.protobuf.Timestamp change_time = 5;
  }
}

message GetStockRequest {
  // Name of the device to update the state for
  string name = 1;
  // Fields to read relative to the Consumable.Stock type.
  google.protobuf.FieldMask read_mask = 2;
}
message UpdateStockRequest {
  // Name of the device to update the state for
  string name = 1;
  // New quantities for the consumable stock.
  Consumable.Stock stock = 2;
  // Fields to update relative to the Consumable.Stock type.
  google.protobuf.FieldMask update_mask = 3;
  // If true, stock adjustments are relative to their current values.
  bool relative = 4;
}
message PullStockRequest {
  // Name of the device to fetch the state for
  string name = 1;
  // Fields to fetch relative to the Consumable.Stock type
  google.protobuf.FieldMask read_mask = 2;
  // When true the device will only send changes to the resource value.
  // The default behaviour is to send the current value immediately followed by any updates as they happen.
  bool updates_only = 3;
}
message PullStockResponse {
  // Changes that have occurred since the last event
  repeated Change changes = 1;

  // A change to the state
  message Change {
    // name for the device that issued the change
    string name = 1;
    // when the change occurred
    google.protobuf.Timestamp change_time = 2;
    // the new state for the device
    Consumable.Stock stock = 3;
  }
}


message ListInventoryRequest {
  // Name of the device to fetch the state for
  string name = 1;
  // Fields to fetch relative to the Consumable.Stock type
  google.protobuf.FieldMask read_mask = 2;

  // The maximum number of items to return.
  // The service may return fewer than this value.
  // If unspecified, at most 50 items will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 3;
  // A page token, received from a previous `ListInventoryRequest` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 4;

  // todo: enable filtering
  // Filter allows for customisation of the items returned by this request.
  // See https://google.aip.dev/160 for details.
  // Individual devices should document if and how filter is supported by that device.
  // string filter = 5;
}
message ListInventoryResponse {
  // The stock requested.
  repeated Consumable.Stock inventory = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
  // If non-zero this is the total number of stocked consumables.
  // This may be an estimate.
  int32 total_size = 3;
}

message PullInventoryRequest {
  // Name of the device to fetch the state for
  string name = 1;
  // Fields to fetch relative to the Consumable.Stock type
  google.protobuf.FieldMask read_mask = 2;
  // When true the device will only send changes to the resource value.
  // The default behaviour is to send the current value immediately followed by any updates as they happen.
  bool updates_only = 3;
  // todo: enable filtering
  // Filter allows for customisation of the items returned by this request.
  // See https://google.aip.dev/160 for details.
  // Individual devices should document if and how filter is supported by that device.
  // string filter = 4;
}
message PullInventoryResponse {
  // The list of changes which have occurred
  repeated Change changes = 1;

  message Change {
    // The name of the device that emitted this change
    string name = 1;
    // The type of change (e.g. ADD, UPDATE, etc...)
    smartcore.types.ChangeType type = 2;
    // The new value to use for ADD|UPDATE changes
    Consumable.Stock new_value = 3;
    // The old value to use for UPDATE|REMOVE changes
    Consumable.Stock old_value = 4;
    // When the change occurred
    google.protobuf.Timestamp change_time = 5;
  }
}

message DispenseRequest {
  // Name of the device to invoke the action on
  string name = 1;
  // The quantity of each consumable to dispense.
  // The map is keyed by the consumable name, the quantity should be in a unit supported by that consumable.
  map<string, Consumable.Quantity> quantity = 2;
  // Fields to update relative to the quantity property.
  google.protobuf.FieldMask update_mask = 3;
}
message StopDispenseRequest {
  // Name of the device to invoke the action on
  string name = 1;
  // The list of consumables that should stop dispensing.
  repeated string consumables = 2;

  // todo: do we need something like: bool ignore_stopped // don't error if the consumable is already stopped
}
