syntax = "proto3";

package smartcore.traits;

option csharp_namespace = "Smartcore.Traits";
option go_package = "github.com/smart-core-os/sc-api/go/traits";
option java_multiple_files = true;
option java_outer_classname = "OpenCloseProto";
option java_package = "dev.smartcore.traits";
option php_namespace = "Smartcore\\Traits";

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "types/info.proto";
import "types/number.proto";
import "types/tween.proto";

// Applicable to devices that can open or close. Think window contact closure, window blind, or garage door.
service OpenCloseApi {
  rpc GetPositions (GetOpenClosePositionsRequest) returns (OpenClosePositions);

  rpc UpdatePositions (UpdateOpenClosePositionsRequest) returns (OpenClosePositions);

  // Stop causes any changes being performed by the underlying device to stop. Will return the current state.
  rpc Stop (StopOpenCloseRequest) returns (OpenClosePositions);

  // Get notified of changes to the OpenCloseState of a device
  rpc PullPositions (PullOpenClosePositionsRequest) returns (stream PullOpenClosePositionsResponse);
}

// Describes the capabilities of a specific named device with respect to this trait.
service OpenCloseInfo {
  // Get information about how a named device implements Positions features
  rpc DescribePositions (DescribePositionsRequest) returns (PositionsSupport);
}

// All open/closable elements for the device
message OpenClosePositions {
  // The state of each of the devices open-able elements. Most devices will only have a single value here as they can
  // only be opened from a single direction.
  repeated OpenClosePosition states = 1;
  // A preset set of positions (or mode) for the device.
  // For example 'auto' or 'night mode'.
  // During writes the preset takes precedence over the positions in states.
  // During read the device may report either or both the preset and states values.
  Preset preset = 2;

  // A preset position for the device.
  message Preset {
    // The identifying name of the preset.
    // Required.
    string name = 1;
    // A human readable title for the preset
    string title = 2;
  }
}

// Defines the position of one open close element for the device
message OpenClosePosition {
  // Open percent describes how open the device is in the specified direction.
  // [0-100] where 0 is fully closed and 100 is fully open.
  float open_percent = 1;
  // How the open percent changes or should change over time. On write, only duration should be set.
  smartcore.types.Tween open_percent_tween = 2;
  // Read-only, the target open_percent after a transition
  float target_open_percent = 3;
  // Optional direction for devices that support multiple open/close directions
  Direction direction = 4;

  // Possible directions the device can open/close
  enum Direction {
    DIRECTION_UNSPECIFIED = 0;
    UP = 1;
    DOWN = 2;
    LEFT = 3;
    RIGHT = 4;
    IN = 5;
    OUT = 6;
  }

  // Resistance reports if there is any resistance preventing the position from being fully achieved.
  // For example if a door is being held open, or a window is jammed closed.
  //
  // If more than one resistance applies choose the resistance value with the smaller ordinal, for example choose
  // REDUCED_MOTION over SLOW if both apply.
  Resistance resistance = 5;

  // Resistance defines types of resistance an OpenClose device may encounter.
  enum Resistance {
    // Resistance is unspecified.
    RESISTANCE_UNSPECIFIED = 0;
    // The device is being held in position.
    // For example if someone is holding open a door, or a window is jammed shut.
    HELD = 1;
    // The devices motion is reduced. For example if a garage door can't open fully due to a blockage.
    REDUCED_MOTION = 2;
    // The device is being slow to respond to changes in opening. For example if a window has a rusty hinge.
    SLOW = 3;
  }
}

// PositionsSupport describes the capabilities of devices implementing this trait
message PositionsSupport {
  // How a named device supports read/write/pull apis
  smartcore.types.ResourceSupport resource_support = 1;
  // Define how the value for open percent behave. The bounds for these attributes will be absent and always in the range
  // [0-100] to represent a percentage.
  // Discreet devices, those that only support fully closed or fully open (i.e. a contact closure) should report a step of 100.
  smartcore.types.FloatAttributes open_percent_attributes = 2;
  // The supported directions for the device. If none then assume only a single direction is supported
  repeated OpenClosePosition.Direction directions = 3;
  // Does the device support the Stop method
  bool supports_stop = 4;
  // A description of the supported presets, none means no presets
  repeated OpenClosePositions.Preset presets = 5;
}

message GetOpenClosePositionsRequest {
  // Name of the device to get the state for
  string name = 1;
  // The state fields to fetch
  google.protobuf.FieldMask read_mask = 2;
}

message UpdateOpenClosePositionsRequest {
  // the name of the device to update the states for
  string name = 1;
  // target states for each directional element of the device. If you don't want to change an open direction don't
  // include it in the states list.
  OpenClosePositions states = 2;
  // indicate whether the state change is a delta or absolute value
  bool delta = 3;
  // The state fields to update
  google.protobuf.FieldMask update_mask = 4;
}

message StopOpenCloseRequest {
  // the name of the device to stop
  string name = 1;
}

// Request to begin a subscription for open close state changes
message PullOpenClosePositionsRequest {
  // The name of the device we want events from
  string name = 1;
  // Indicate whether we want to be notified of values while tweening or not. The device may ignore this depending on
  // capabilities
  bool exclude_tweening = 2;
  // The state fields to fetch
  google.protobuf.FieldMask read_mask = 3;
  // When true the device will only send changes to the resource value.
  // The default behaviour is to send the current value immediately followed by any updates as they happen.
  bool updates_only = 4;
}

// A response as part of the stream of changes to the range value
message PullOpenClosePositionsResponse {
  // The list of changes
  repeated Change changes = 1;

  // A change to a single devices open close state value
  message Change {
    // name for the device that issued the change
    string name = 1;
    // when the change occurred
    google.protobuf.Timestamp change_time = 2;
    // The new value for the state
    OpenClosePositions open_close_position = 3;
  }
}

message DescribePositionsRequest {
  // The name of the device
  string name = 1;
}
