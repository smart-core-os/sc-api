syntax = "proto3";

package smartcore.traits;

option csharp_namespace = "Smartcore.Traits";
option go_package = "github.com/smart-core-os/sc-api/go/traits";
option java_multiple_files = true;
option java_outer_classname = "MicrophoneProto";
option java_package = "dev.smartcore.traits";
option php_namespace = "Smartcore\\Traits";

import "google/protobuf/field_mask.proto";
import "types/info.proto";
import "types/number.proto";
import "types/unit.proto";

// Trait for devices that support some kind of audio input. The most basic is a simple muting microphone, it's optional
// to support gain adjustment on a scale.
//
// For the sakes of this trait "gain" means the combination of a gain and a mute state.
service MicrophoneApi {
  // Gets the audio information for the device
  rpc GetAudioLevel (GetAudioLevelRequest) returns (smartcore.types.AudioLevel);

  // update the audio level state for the device
  rpc UpdateAudioLevel (UpdateAudioLevelRequest) returns (smartcore.types.AudioLevel);

  rpc PullAudioLevel (PullAudioLevelRequest) returns (stream PullAudioLevelResponse);
}

// Describes the capabilities of a specific named device with respect to this trait.
service MicrophoneInfo {
  // Get information about how a named device implements Gain features
  rpc DescribeAudioLevel (DescribeAudioLevelRequest) returns (AudioLevelSupport);
}

// GainSupport describes the capabilities of devices implementing this trait.
message AudioLevelSupport {
  // How a named device supports read/write/pull apis
  smartcore.types.ResourceSupport resource_support = 1;
  // Attributes associated with the gain property of the microphone. Note that a step value that is the same as the bounds
  // implies that the microphone only supports mute
  smartcore.types.FloatAttributes gain_attributes = 2;
  // How is mute implemented by the device. Can help to customise behaviour of interfaces to the device, e.g. by
  // disallowing gain change when muted
  smartcore.types.MuteSupport mute_support = 3;
  // The unit associated with the sound_level value
  string sound_level_unit = 4;
}

message GetAudioLevelRequest {
  // Name of the device to fetch the state for
  string name = 1;
  // fields to fetch relative the the AudioLevel type
  google.protobuf.FieldMask read_mask = 2;
}

message UpdateAudioLevelRequest {
  // Name of the device to update the state for
  string name = 1;
  // The updated gain value
  smartcore.types.AudioLevel gain = 2;
  // Only supported for AudioLevel.gain. Update the value relative to the current value.
  bool delta = 3;
  // The fields we intend to update relative to the AudioLevel type
  google.protobuf.FieldMask update_mask = 4;
}

message PullAudioLevelRequest {
  // Name of the device to fetch the state for
  string name = 1;
  // fields to fetch relative the the AudioLevel type
  google.protobuf.FieldMask read_mask = 2;
  // When true the device will only send changes to the resource value.
  // The default behaviour is to send the current value immediately followed by any updates as they happen.
  bool updates_only = 3;
}

message PullAudioLevelResponse {
  // Changes since the last message
  repeated smartcore.types.AudioLevelChange changes = 1;
}

message DescribeAudioLevelRequest {
  // The name of the device
  string name = 1;
}
