syntax = "proto3";

package smartcore.traits;

option csharp_namespace = "Smartcore.Traits";
option go_package = "github.com/smart-core-os/sc-api/go/traits";
option java_multiple_files = true;
option java_outer_classname = "EmergencyProto";
option java_package = "dev.smartcore.traits";
option php_namespace = "Smartcore\\Traits";

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "types/info.proto";

// Report and manages emergencies. Typically not associated with a single device, more suited to buildings or spaces.
// It's likely that some implementation will not allow write of emergency state.
service EmergencyApi {
  // Get the current emergency state
  rpc GetEmergency (GetEmergencyRequest) returns (Emergency);
  // Update the current emergency state
  rpc UpdateEmergency (UpdateEmergencyRequest) returns (Emergency);
  // Be notified of changes to the emergency state
  rpc PullEmergency (PullEmergencyRequest) returns (stream PullEmergencyResponse);
}

// Describes the capabilities of a specific named device with respect to this trait.
service EmergencyInfo {
  // Get information about how a named device implements Emergency features
  rpc DescribeEmergency (DescribeEmergencyRequest) returns (EmergencySupport);
}

// An emergency is a life threatening event.
message Emergency {
  // The level of emergency that is active.
  Level level = 1;
  // A textual description of the reason for the emergency. For example "Fire alarm triggered", "Excessive pressure"
  string reason = 2;
  // The time the emergency level was changed. When writing and absent, and the level has changed, then server time will be used.
  google.protobuf.Timestamp level_change_time = 3;
  // Silent emergencies are ongoing but don't require continued or excessive user feedback.
  bool silent = 4;
  // The emergency being fabricated, typically for testing.
  bool drill = 5;

  // Levels of emergency
  enum Level {
    // The level is unknown, applications may choose to be cautious or care-free with this lack of information.
    LEVEL_UNSPECIFIED = 0;
    // There is no emergency.
    OK = 1;
    // There is a chance of an emergency soon. This might be reported by a smoke detector that has detected some particles
    // but not enough to trigger the alarm yet.
    WARNING = 2;
    // There is an emergency. Please protect yourself and follow emergency procedures.
    EMERGENCY = 3;
  }
}

// EmergencySupport describes the capabilities of devices implementing this trait
message EmergencySupport {
  // How a named device supports read/write/pull apis
  smartcore.types.ResourceSupport resource_support = 1;
}

message GetEmergencyRequest {
  string name = 1;
  // The state fields to fetch
  google.protobuf.FieldMask read_mask = 2;
}

message UpdateEmergencyRequest {
  string name = 1;
  Emergency emergency = 2;
  // The fields relative to state we intend to update
  google.protobuf.FieldMask update_mask = 3;
}

message PullEmergencyRequest {
  string name = 1;
  // The state fields to fetch
  google.protobuf.FieldMask read_mask = 2;
  // When true the device will only send changes to the resource value.
  // The default behaviour is to send the current value immediately followed by any updates as they happen.
  bool updates_only = 3;
}

message PullEmergencyResponse {
  repeated Change changes = 1;

  message Change {
    // name for the device that issued the change
    string name = 1;
    // when the change occurred
    google.protobuf.Timestamp change_time = 2;
    // The new value for the emergency.
    Emergency emergency = 3;
  }
}

message DescribeEmergencyRequest {
  // The name of the device
  string name = 1;
}

