syntax = "proto3";

package smartcore.traits;

option csharp_namespace = "Smartcore.Traits";
option go_package = "github.com/smart-core-os/sc-api/go/traits";
option java_multiple_files = true;
option java_outer_classname = "SecurityEventProto";
option java_package = "dev.smartcore.traits";
option php_namespace = "Smartcore\\Traits";

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "types/change.proto";

// SecurityEventApi describes the capability to view and manage security events.
// These are typically events from an access control system's API, but could be from any security system.
service SecurityEventApi {
  rpc ListSecurityEvents(ListSecurityEventsRequest) returns (ListSecurityEventsResponse) {}
  rpc PullSecurityEvents(PullSecurityEventsRequest) returns (stream PullSecurityEventsResponse) {}
  // todo expand these rpcs to enable acknowledging and processing security events with an external system
}

// SecurityEvent describes a security event that has occurred.
// At a minimum this should define the time the event occurred, a description of the event
// and a unique ID for the event, typically derived from the originating system.
// Ideally, this will contain all the relevant information we know about the event.
message SecurityEvent {
  enum State {
    // The state of the security event is unknown.
    STATE_UNKNOWN = 0;
    // The security event has not been acknowledged.
    UNACKNOWLEDGED = 1;
    // The security event has been acknowledged.
    ACKNOWLEDGED = 2;
    // The security event has been resolved.
    RESOLVED = 3;
  }

  // The time the security event occurred.
  google.protobuf.Timestamp security_event_time = 1;

  // A description of the security event.
  string description = 2;

  // The ID of the event in the source system.
  string id = 3;

  // Optional. The source the security event originated from, typically a door or other access point.
  string source = 4;

  // Optional. The state of the security event, unacknowledged, acknowledged etc.
  State state = 5;

  // Optional. The priority of the security event
  int32 priority = 6;
}

message ListSecurityEventsRequest {
  // The name of the device to get security events for.
  string name = 1;
  google.protobuf.FieldMask read_mask = 2;
  // The maximum number of SecurityEvents to return.
  // The service may return fewer than this value.
  // If unspecified, at most 50 items will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 3;
  // A page token, received from a previous `ListSecurityEventsResponse` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 4;
}

message ListSecurityEventsResponse {
  repeated SecurityEvent security_events = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
  // If non-zero this is the total number of alerts after filtering is applied.
  // This may be an estimate.
  int32 total_size = 3;
}

message PullSecurityEventsRequest {
  string name = 1;
  google.protobuf.FieldMask read_mask = 2;
  bool updates_only = 3;
}

message PullSecurityEventsResponse {
  repeated Change changes = 1;

  message Change {
    string name = 1;
    google.protobuf.Timestamp change_time = 2;
    SecurityEvent new_value = 3;
    SecurityEvent old_value = 4;
    smartcore.types.ChangeType type = 5;
  }
}