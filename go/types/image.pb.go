// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.3
// source: types/image.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Purpose defines the possible intended context for an image.
type Image_Source_Purpose int32

const (
	// The purpose is unspecified.
	// Renderers may treat this as ANY.
	Image_Source_PURPOSE_UNSPECIFIED Image_Source_Purpose = 0
	// The renderer is free to use the image in any context.
	Image_Source_ANY Image_Source_Purpose = 1
	// The image has been designed with masks and safe zones in mind.
	// As such any part of the image outside the safe zone may be ignored/hidden/masked by the renderer.
	//
	// See https://w3c.github.io/manifest/#dfn-safe-zone
	Image_Source_MASKABLE Image_Source_Purpose = 2
)

// Enum value maps for Image_Source_Purpose.
var (
	Image_Source_Purpose_name = map[int32]string{
		0: "PURPOSE_UNSPECIFIED",
		1: "ANY",
		2: "MASKABLE",
	}
	Image_Source_Purpose_value = map[string]int32{
		"PURPOSE_UNSPECIFIED": 0,
		"ANY":                 1,
		"MASKABLE":            2,
	}
)

func (x Image_Source_Purpose) Enum() *Image_Source_Purpose {
	p := new(Image_Source_Purpose)
	*p = x
	return p
}

func (x Image_Source_Purpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Image_Source_Purpose) Descriptor() protoreflect.EnumDescriptor {
	return file_types_image_proto_enumTypes[0].Descriptor()
}

func (Image_Source_Purpose) Type() protoreflect.EnumType {
	return &file_types_image_proto_enumTypes[0]
}

func (x Image_Source_Purpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Image_Source_Purpose.Descriptor instead.
func (Image_Source_Purpose) EnumDescriptor() ([]byte, []int) {
	return file_types_image_proto_rawDescGZIP(), []int{0, 1, 0}
}

// Image describes a resolution, context, aspect ratio, and source independent image.
// When selecting an image to display the renderer inspects the properties of each image source to find the
// combination that best matches the intended output destination.
//
// An image is a visual representation of some subject, for example "A dog chasing it's tail, on grass".
// The subject does not change when you double the resolution, crop in landscape or square, encode using jpeg or webp,
// or serve via a url or filesystem path.
// The choice for each of these properties can only be determined at image display time, i.e. the renderer knows that
// it doesn't support webp, and the destination area is 480px wide at 1.5x pixel density.
type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Possible sources of image data.
	// Each source encodes a possible representation of the image, typically to solve art direction or resolution
	// variation. For example there might be a square source and a portrait source, there might be a source sized 128x128
	// and one sized 32x32.
	// All sources should represent the same subject.
	//
	// The renderer should choose the source that best destination criteria, preferring to select a larger image if no
	// exact match is found, selecting lower indexes to break ties.
	Sources []*Image_Source `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	// A description of the image, typically used when the image cannot be displayed or consumed by the observer, i.e. when using a screen reader.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_image_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_types_image_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_types_image_proto_rawDescGZIP(), []int{0}
}

func (x *Image) GetSources() []*Image_Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *Image) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Content describes the location of the image data.
type Image_Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A media type for the image, e.g. "image/jpeg".
	// See https://www.iana.org/assignments/media-types/media-types.xhtml#image
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Content describes the possible choices for where the image bytes come from.
	//
	// Types that are assignable to Content:
	//
	//	*Image_Content_Body
	//	*Image_Content_Url
	//	*Image_Content_Ref
	//	*Image_Content_Path
	Content isImage_Content_Content `protobuf_oneof:"content"`
}

func (x *Image_Content) Reset() {
	*x = Image_Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_image_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image_Content) ProtoMessage() {}

func (x *Image_Content) ProtoReflect() protoreflect.Message {
	mi := &file_types_image_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image_Content.ProtoReflect.Descriptor instead.
func (*Image_Content) Descriptor() ([]byte, []int) {
	return file_types_image_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Image_Content) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (m *Image_Content) GetContent() isImage_Content_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Image_Content) GetBody() []byte {
	if x, ok := x.GetContent().(*Image_Content_Body); ok {
		return x.Body
	}
	return nil
}

func (x *Image_Content) GetUrl() string {
	if x, ok := x.GetContent().(*Image_Content_Url); ok {
		return x.Url
	}
	return ""
}

func (x *Image_Content) GetRef() string {
	if x, ok := x.GetContent().(*Image_Content_Ref); ok {
		return x.Ref
	}
	return ""
}

func (x *Image_Content) GetPath() string {
	if x, ok := x.GetContent().(*Image_Content_Path); ok {
		return x.Path
	}
	return ""
}

type isImage_Content_Content interface {
	isImage_Content_Content()
}

type Image_Content_Body struct {
	// The binary content of the image.
	//
	// Prefer other content options instead of embedding the body, especially if the image has multiple sources and/or
	// content types, providing the byte content for each variation can get large and cause performance issues.
	Body []byte `protobuf:"bytes,2,opt,name=body,proto3,oneof"`
}

type Image_Content_Url struct {
	// A url that resolves to the image content.
	Url string `protobuf:"bytes,3,opt,name=url,proto3,oneof"`
}

type Image_Content_Ref struct {
	// The image is resolved in a catalog of known images using this identifier.
	// For example in an icon set.
	Ref string `protobuf:"bytes,4,opt,name=ref,proto3,oneof"`
}

type Image_Content_Path struct {
	// A path on the local file system where the image content is located.
	Path string `protobuf:"bytes,5,opt,name=path,proto3,oneof"`
}

func (*Image_Content_Body) isImage_Content_Content() {}

func (*Image_Content_Url) isImage_Content_Content() {}

func (*Image_Content_Ref) isImage_Content_Content() {}

func (*Image_Content_Path) isImage_Content_Content() {}

// Source represents a variation on the display of an image.
// Sources may exist for shape variations, or resolution variations.
// Sources should not change the core subject of an image.
type Image_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Where to get the image bytes from in preference order.
	// When displaying the image the renderer will go through each src until it finds one of a type it supports.
	Src []*Image_Content `protobuf:"bytes,1,rep,name=src,proto3" json:"src,omitempty"`
	// The intrinsic width of the image.
	Width int32 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	// The intrinsic height of the image.
	Height int32 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	// The intended purpose for the image.
	// The purpose informs the user of the image which intended contexts the image has been designed for.
	//
	// Purpose is inspired by https://w3c.github.io/manifest/#purpose-member
	Purpose Image_Source_Purpose `protobuf:"varint,4,opt,name=purpose,proto3,enum=smartcore.types.Image_Source_Purpose" json:"purpose,omitempty"`
}

func (x *Image_Source) Reset() {
	*x = Image_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_image_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image_Source) ProtoMessage() {}

func (x *Image_Source) ProtoReflect() protoreflect.Message {
	mi := &file_types_image_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image_Source.ProtoReflect.Descriptor instead.
func (*Image_Source) Descriptor() ([]byte, []int) {
	return file_types_image_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Image_Source) GetSrc() []*Image_Content {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *Image_Source) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Image_Source) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Image_Source) GetPurpose() Image_Source_Purpose {
	if x != nil {
		return x.Purpose
	}
	return Image_Source_PURPOSE_UNSPECIFIED
}

var File_types_image_proto protoreflect.FileDescriptor

var file_types_image_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x22, 0xc7, 0x03, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x37,
	0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x7c, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x12,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x12, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x42, 0x09, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0xe4, 0x01, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x03, 0x73, 0x72, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x22, 0x39, 0x0a, 0x07, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x50, 0x55, 0x52, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x53, 0x4b, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x42, 0x5f,
	0x0a, 0x13, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x42, 0x0a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6f, 0x73, 0x2f, 0x73, 0x63,
	0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0xaa, 0x02, 0x0f,
	0x53, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_image_proto_rawDescOnce sync.Once
	file_types_image_proto_rawDescData = file_types_image_proto_rawDesc
)

func file_types_image_proto_rawDescGZIP() []byte {
	file_types_image_proto_rawDescOnce.Do(func() {
		file_types_image_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_image_proto_rawDescData)
	})
	return file_types_image_proto_rawDescData
}

var file_types_image_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_types_image_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_types_image_proto_goTypes = []any{
	(Image_Source_Purpose)(0), // 0: smartcore.types.Image.Source.Purpose
	(*Image)(nil),             // 1: smartcore.types.Image
	(*Image_Content)(nil),     // 2: smartcore.types.Image.Content
	(*Image_Source)(nil),      // 3: smartcore.types.Image.Source
}
var file_types_image_proto_depIdxs = []int32{
	3, // 0: smartcore.types.Image.sources:type_name -> smartcore.types.Image.Source
	2, // 1: smartcore.types.Image.Source.src:type_name -> smartcore.types.Image.Content
	0, // 2: smartcore.types.Image.Source.purpose:type_name -> smartcore.types.Image.Source.Purpose
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_types_image_proto_init() }
func file_types_image_proto_init() {
	if File_types_image_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_image_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_image_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Image_Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_image_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Image_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_types_image_proto_msgTypes[1].OneofWrappers = []any{
		(*Image_Content_Body)(nil),
		(*Image_Content_Url)(nil),
		(*Image_Content_Ref)(nil),
		(*Image_Content_Path)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_image_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_image_proto_goTypes,
		DependencyIndexes: file_types_image_proto_depIdxs,
		EnumInfos:         file_types_image_proto_enumTypes,
		MessageInfos:      file_types_image_proto_msgTypes,
	}.Build()
	File_types_image_proto = out.File
	file_types_image_proto_rawDesc = nil
	file_types_image_proto_goTypes = nil
	file_types_image_proto_depIdxs = nil
}
