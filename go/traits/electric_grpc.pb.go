// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: traits/electric.proto

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ElectricApi_GetDemand_FullMethodName        = "/smartcore.traits.ElectricApi/GetDemand"
	ElectricApi_PullDemand_FullMethodName       = "/smartcore.traits.ElectricApi/PullDemand"
	ElectricApi_GetActiveMode_FullMethodName    = "/smartcore.traits.ElectricApi/GetActiveMode"
	ElectricApi_UpdateActiveMode_FullMethodName = "/smartcore.traits.ElectricApi/UpdateActiveMode"
	ElectricApi_ClearActiveMode_FullMethodName  = "/smartcore.traits.ElectricApi/ClearActiveMode"
	ElectricApi_PullActiveMode_FullMethodName   = "/smartcore.traits.ElectricApi/PullActiveMode"
	ElectricApi_ListModes_FullMethodName        = "/smartcore.traits.ElectricApi/ListModes"
	ElectricApi_PullModes_FullMethodName        = "/smartcore.traits.ElectricApi/PullModes"
)

// ElectricApiClient is the client API for ElectricApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Trait for devices that are electrically powered.
// Can apply to both the end device or an intermediary, for example a TV or an extension cord.
type ElectricApiClient interface {
	// GetDemand returns the current electricity demand for the device.
	GetDemand(ctx context.Context, in *GetDemandRequest, opts ...grpc.CallOption) (*ElectricDemand, error)
	// PullDemand returns a stream of changes to the current electricity demand for the device.
	PullDemand(ctx context.Context, in *PullDemandRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullDemandResponse], error)
	GetActiveMode(ctx context.Context, in *GetActiveModeRequest, opts ...grpc.CallOption) (*ElectricMode, error)
	// Configure the device to use the given mode.
	// The id of the given mode should match a known mode for the device.
	UpdateActiveMode(ctx context.Context, in *UpdateActiveModeRequest, opts ...grpc.CallOption) (*ElectricMode, error)
	// ClearActiveMode instructs the device to discard any external mode selection, typically by applying the normal
	// operation mode for the device.
	ClearActiveMode(ctx context.Context, in *ClearActiveModeRequest, opts ...grpc.CallOption) (*ElectricMode, error)
	PullActiveMode(ctx context.Context, in *PullActiveModeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullActiveModeResponse], error)
	// ListModes lists all electric modes for a device
	ListModes(ctx context.Context, in *ListModesRequest, opts ...grpc.CallOption) (*ListModesResponse, error)
	// PullModes returns a stream of changes to the list of supported modes for the device.
	PullModes(ctx context.Context, in *PullModesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullModesResponse], error)
}

type electricApiClient struct {
	cc grpc.ClientConnInterface
}

func NewElectricApiClient(cc grpc.ClientConnInterface) ElectricApiClient {
	return &electricApiClient{cc}
}

func (c *electricApiClient) GetDemand(ctx context.Context, in *GetDemandRequest, opts ...grpc.CallOption) (*ElectricDemand, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ElectricDemand)
	err := c.cc.Invoke(ctx, ElectricApi_GetDemand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electricApiClient) PullDemand(ctx context.Context, in *PullDemandRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullDemandResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ElectricApi_ServiceDesc.Streams[0], ElectricApi_PullDemand_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullDemandRequest, PullDemandResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ElectricApi_PullDemandClient = grpc.ServerStreamingClient[PullDemandResponse]

func (c *electricApiClient) GetActiveMode(ctx context.Context, in *GetActiveModeRequest, opts ...grpc.CallOption) (*ElectricMode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ElectricMode)
	err := c.cc.Invoke(ctx, ElectricApi_GetActiveMode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electricApiClient) UpdateActiveMode(ctx context.Context, in *UpdateActiveModeRequest, opts ...grpc.CallOption) (*ElectricMode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ElectricMode)
	err := c.cc.Invoke(ctx, ElectricApi_UpdateActiveMode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electricApiClient) ClearActiveMode(ctx context.Context, in *ClearActiveModeRequest, opts ...grpc.CallOption) (*ElectricMode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ElectricMode)
	err := c.cc.Invoke(ctx, ElectricApi_ClearActiveMode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electricApiClient) PullActiveMode(ctx context.Context, in *PullActiveModeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullActiveModeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ElectricApi_ServiceDesc.Streams[1], ElectricApi_PullActiveMode_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullActiveModeRequest, PullActiveModeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ElectricApi_PullActiveModeClient = grpc.ServerStreamingClient[PullActiveModeResponse]

func (c *electricApiClient) ListModes(ctx context.Context, in *ListModesRequest, opts ...grpc.CallOption) (*ListModesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModesResponse)
	err := c.cc.Invoke(ctx, ElectricApi_ListModes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electricApiClient) PullModes(ctx context.Context, in *PullModesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullModesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ElectricApi_ServiceDesc.Streams[2], ElectricApi_PullModes_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullModesRequest, PullModesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ElectricApi_PullModesClient = grpc.ServerStreamingClient[PullModesResponse]

// ElectricApiServer is the server API for ElectricApi service.
// All implementations must embed UnimplementedElectricApiServer
// for forward compatibility.
//
// Trait for devices that are electrically powered.
// Can apply to both the end device or an intermediary, for example a TV or an extension cord.
type ElectricApiServer interface {
	// GetDemand returns the current electricity demand for the device.
	GetDemand(context.Context, *GetDemandRequest) (*ElectricDemand, error)
	// PullDemand returns a stream of changes to the current electricity demand for the device.
	PullDemand(*PullDemandRequest, grpc.ServerStreamingServer[PullDemandResponse]) error
	GetActiveMode(context.Context, *GetActiveModeRequest) (*ElectricMode, error)
	// Configure the device to use the given mode.
	// The id of the given mode should match a known mode for the device.
	UpdateActiveMode(context.Context, *UpdateActiveModeRequest) (*ElectricMode, error)
	// ClearActiveMode instructs the device to discard any external mode selection, typically by applying the normal
	// operation mode for the device.
	ClearActiveMode(context.Context, *ClearActiveModeRequest) (*ElectricMode, error)
	PullActiveMode(*PullActiveModeRequest, grpc.ServerStreamingServer[PullActiveModeResponse]) error
	// ListModes lists all electric modes for a device
	ListModes(context.Context, *ListModesRequest) (*ListModesResponse, error)
	// PullModes returns a stream of changes to the list of supported modes for the device.
	PullModes(*PullModesRequest, grpc.ServerStreamingServer[PullModesResponse]) error
	mustEmbedUnimplementedElectricApiServer()
}

// UnimplementedElectricApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedElectricApiServer struct{}

func (UnimplementedElectricApiServer) GetDemand(context.Context, *GetDemandRequest) (*ElectricDemand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDemand not implemented")
}
func (UnimplementedElectricApiServer) PullDemand(*PullDemandRequest, grpc.ServerStreamingServer[PullDemandResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullDemand not implemented")
}
func (UnimplementedElectricApiServer) GetActiveMode(context.Context, *GetActiveModeRequest) (*ElectricMode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveMode not implemented")
}
func (UnimplementedElectricApiServer) UpdateActiveMode(context.Context, *UpdateActiveModeRequest) (*ElectricMode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActiveMode not implemented")
}
func (UnimplementedElectricApiServer) ClearActiveMode(context.Context, *ClearActiveModeRequest) (*ElectricMode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearActiveMode not implemented")
}
func (UnimplementedElectricApiServer) PullActiveMode(*PullActiveModeRequest, grpc.ServerStreamingServer[PullActiveModeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullActiveMode not implemented")
}
func (UnimplementedElectricApiServer) ListModes(context.Context, *ListModesRequest) (*ListModesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModes not implemented")
}
func (UnimplementedElectricApiServer) PullModes(*PullModesRequest, grpc.ServerStreamingServer[PullModesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullModes not implemented")
}
func (UnimplementedElectricApiServer) mustEmbedUnimplementedElectricApiServer() {}
func (UnimplementedElectricApiServer) testEmbeddedByValue()                     {}

// UnsafeElectricApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ElectricApiServer will
// result in compilation errors.
type UnsafeElectricApiServer interface {
	mustEmbedUnimplementedElectricApiServer()
}

func RegisterElectricApiServer(s grpc.ServiceRegistrar, srv ElectricApiServer) {
	// If the following call pancis, it indicates UnimplementedElectricApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ElectricApi_ServiceDesc, srv)
}

func _ElectricApi_GetDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDemandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectricApiServer).GetDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElectricApi_GetDemand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectricApiServer).GetDemand(ctx, req.(*GetDemandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElectricApi_PullDemand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullDemandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ElectricApiServer).PullDemand(m, &grpc.GenericServerStream[PullDemandRequest, PullDemandResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ElectricApi_PullDemandServer = grpc.ServerStreamingServer[PullDemandResponse]

func _ElectricApi_GetActiveMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectricApiServer).GetActiveMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElectricApi_GetActiveMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectricApiServer).GetActiveMode(ctx, req.(*GetActiveModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElectricApi_UpdateActiveMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActiveModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectricApiServer).UpdateActiveMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElectricApi_UpdateActiveMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectricApiServer).UpdateActiveMode(ctx, req.(*UpdateActiveModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElectricApi_ClearActiveMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearActiveModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectricApiServer).ClearActiveMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElectricApi_ClearActiveMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectricApiServer).ClearActiveMode(ctx, req.(*ClearActiveModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElectricApi_PullActiveMode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullActiveModeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ElectricApiServer).PullActiveMode(m, &grpc.GenericServerStream[PullActiveModeRequest, PullActiveModeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ElectricApi_PullActiveModeServer = grpc.ServerStreamingServer[PullActiveModeResponse]

func _ElectricApi_ListModes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectricApiServer).ListModes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElectricApi_ListModes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectricApiServer).ListModes(ctx, req.(*ListModesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElectricApi_PullModes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullModesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ElectricApiServer).PullModes(m, &grpc.GenericServerStream[PullModesRequest, PullModesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ElectricApi_PullModesServer = grpc.ServerStreamingServer[PullModesResponse]

// ElectricApi_ServiceDesc is the grpc.ServiceDesc for ElectricApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ElectricApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.ElectricApi",
	HandlerType: (*ElectricApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDemand",
			Handler:    _ElectricApi_GetDemand_Handler,
		},
		{
			MethodName: "GetActiveMode",
			Handler:    _ElectricApi_GetActiveMode_Handler,
		},
		{
			MethodName: "UpdateActiveMode",
			Handler:    _ElectricApi_UpdateActiveMode_Handler,
		},
		{
			MethodName: "ClearActiveMode",
			Handler:    _ElectricApi_ClearActiveMode_Handler,
		},
		{
			MethodName: "ListModes",
			Handler:    _ElectricApi_ListModes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullDemand",
			Handler:       _ElectricApi_PullDemand_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PullActiveMode",
			Handler:       _ElectricApi_PullActiveMode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PullModes",
			Handler:       _ElectricApi_PullModes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/electric.proto",
}

// ElectricInfoClient is the client API for ElectricInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the capabilities of a specific named device with respect to this trait.
type ElectricInfoClient interface {
}

type electricInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewElectricInfoClient(cc grpc.ClientConnInterface) ElectricInfoClient {
	return &electricInfoClient{cc}
}

// ElectricInfoServer is the server API for ElectricInfo service.
// All implementations must embed UnimplementedElectricInfoServer
// for forward compatibility.
//
// Describes the capabilities of a specific named device with respect to this trait.
type ElectricInfoServer interface {
	mustEmbedUnimplementedElectricInfoServer()
}

// UnimplementedElectricInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedElectricInfoServer struct{}

func (UnimplementedElectricInfoServer) mustEmbedUnimplementedElectricInfoServer() {}
func (UnimplementedElectricInfoServer) testEmbeddedByValue()                      {}

// UnsafeElectricInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ElectricInfoServer will
// result in compilation errors.
type UnsafeElectricInfoServer interface {
	mustEmbedUnimplementedElectricInfoServer()
}

func RegisterElectricInfoServer(s grpc.ServiceRegistrar, srv ElectricInfoServer) {
	// If the following call pancis, it indicates UnimplementedElectricInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ElectricInfo_ServiceDesc, srv)
}

// ElectricInfo_ServiceDesc is the grpc.ServiceDesc for ElectricInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ElectricInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.ElectricInfo",
	HandlerType: (*ElectricInfoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "traits/electric.proto",
}
