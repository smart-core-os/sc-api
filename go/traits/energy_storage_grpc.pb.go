// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: traits/energy_storage.proto

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EnergyStorageApi_GetEnergyLevel_FullMethodName  = "/smartcore.traits.EnergyStorageApi/GetEnergyLevel"
	EnergyStorageApi_PullEnergyLevel_FullMethodName = "/smartcore.traits.EnergyStorageApi/PullEnergyLevel"
	EnergyStorageApi_Charge_FullMethodName          = "/smartcore.traits.EnergyStorageApi/Charge"
)

// EnergyStorageApiClient is the client API for EnergyStorageApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Trait for devices that can store energy or charge another device.
// Typically applied devices with batteries or chargers of those devices.
type EnergyStorageApiClient interface {
	// GetEnergyLevel retrieves the current charge level and potential charge level for the device.
	GetEnergyLevel(ctx context.Context, in *GetEnergyLevelRequest, opts ...grpc.CallOption) (*EnergyLevel, error)
	// PullEnergyLevel subscribes to changes in energy level.
	PullEnergyLevel(ctx context.Context, in *PullEnergyLevelRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullEnergyLevelResponse], error)
	// Charge starts or stops the device charging.
	// If the device is not plugged in then this will return a FAILED_PRECONDITION error.
	// Devices may start or stop charging on their own.
	Charge(ctx context.Context, in *ChargeRequest, opts ...grpc.CallOption) (*ChargeResponse, error)
}

type energyStorageApiClient struct {
	cc grpc.ClientConnInterface
}

func NewEnergyStorageApiClient(cc grpc.ClientConnInterface) EnergyStorageApiClient {
	return &energyStorageApiClient{cc}
}

func (c *energyStorageApiClient) GetEnergyLevel(ctx context.Context, in *GetEnergyLevelRequest, opts ...grpc.CallOption) (*EnergyLevel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnergyLevel)
	err := c.cc.Invoke(ctx, EnergyStorageApi_GetEnergyLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *energyStorageApiClient) PullEnergyLevel(ctx context.Context, in *PullEnergyLevelRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullEnergyLevelResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EnergyStorageApi_ServiceDesc.Streams[0], EnergyStorageApi_PullEnergyLevel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullEnergyLevelRequest, PullEnergyLevelResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EnergyStorageApi_PullEnergyLevelClient = grpc.ServerStreamingClient[PullEnergyLevelResponse]

func (c *energyStorageApiClient) Charge(ctx context.Context, in *ChargeRequest, opts ...grpc.CallOption) (*ChargeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChargeResponse)
	err := c.cc.Invoke(ctx, EnergyStorageApi_Charge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnergyStorageApiServer is the server API for EnergyStorageApi service.
// All implementations must embed UnimplementedEnergyStorageApiServer
// for forward compatibility.
//
// Trait for devices that can store energy or charge another device.
// Typically applied devices with batteries or chargers of those devices.
type EnergyStorageApiServer interface {
	// GetEnergyLevel retrieves the current charge level and potential charge level for the device.
	GetEnergyLevel(context.Context, *GetEnergyLevelRequest) (*EnergyLevel, error)
	// PullEnergyLevel subscribes to changes in energy level.
	PullEnergyLevel(*PullEnergyLevelRequest, grpc.ServerStreamingServer[PullEnergyLevelResponse]) error
	// Charge starts or stops the device charging.
	// If the device is not plugged in then this will return a FAILED_PRECONDITION error.
	// Devices may start or stop charging on their own.
	Charge(context.Context, *ChargeRequest) (*ChargeResponse, error)
	mustEmbedUnimplementedEnergyStorageApiServer()
}

// UnimplementedEnergyStorageApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEnergyStorageApiServer struct{}

func (UnimplementedEnergyStorageApiServer) GetEnergyLevel(context.Context, *GetEnergyLevelRequest) (*EnergyLevel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnergyLevel not implemented")
}
func (UnimplementedEnergyStorageApiServer) PullEnergyLevel(*PullEnergyLevelRequest, grpc.ServerStreamingServer[PullEnergyLevelResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullEnergyLevel not implemented")
}
func (UnimplementedEnergyStorageApiServer) Charge(context.Context, *ChargeRequest) (*ChargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Charge not implemented")
}
func (UnimplementedEnergyStorageApiServer) mustEmbedUnimplementedEnergyStorageApiServer() {}
func (UnimplementedEnergyStorageApiServer) testEmbeddedByValue()                          {}

// UnsafeEnergyStorageApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnergyStorageApiServer will
// result in compilation errors.
type UnsafeEnergyStorageApiServer interface {
	mustEmbedUnimplementedEnergyStorageApiServer()
}

func RegisterEnergyStorageApiServer(s grpc.ServiceRegistrar, srv EnergyStorageApiServer) {
	// If the following call pancis, it indicates UnimplementedEnergyStorageApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EnergyStorageApi_ServiceDesc, srv)
}

func _EnergyStorageApi_GetEnergyLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnergyLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyStorageApiServer).GetEnergyLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnergyStorageApi_GetEnergyLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyStorageApiServer).GetEnergyLevel(ctx, req.(*GetEnergyLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnergyStorageApi_PullEnergyLevel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullEnergyLevelRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnergyStorageApiServer).PullEnergyLevel(m, &grpc.GenericServerStream[PullEnergyLevelRequest, PullEnergyLevelResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EnergyStorageApi_PullEnergyLevelServer = grpc.ServerStreamingServer[PullEnergyLevelResponse]

func _EnergyStorageApi_Charge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyStorageApiServer).Charge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnergyStorageApi_Charge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyStorageApiServer).Charge(ctx, req.(*ChargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnergyStorageApi_ServiceDesc is the grpc.ServiceDesc for EnergyStorageApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnergyStorageApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.EnergyStorageApi",
	HandlerType: (*EnergyStorageApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEnergyLevel",
			Handler:    _EnergyStorageApi_GetEnergyLevel_Handler,
		},
		{
			MethodName: "Charge",
			Handler:    _EnergyStorageApi_Charge_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullEnergyLevel",
			Handler:       _EnergyStorageApi_PullEnergyLevel_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/energy_storage.proto",
}

const (
	EnergyStorageInfo_DescribeEnergyLevel_FullMethodName = "/smartcore.traits.EnergyStorageInfo/DescribeEnergyLevel"
)

// EnergyStorageInfoClient is the client API for EnergyStorageInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the capabilities of a specific named device with respect to this trait.
type EnergyStorageInfoClient interface {
	// Get information about how a named device implements EnergyLevel features
	DescribeEnergyLevel(ctx context.Context, in *DescribeEnergyLevelRequest, opts ...grpc.CallOption) (*EnergyLevelSupport, error)
}

type energyStorageInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewEnergyStorageInfoClient(cc grpc.ClientConnInterface) EnergyStorageInfoClient {
	return &energyStorageInfoClient{cc}
}

func (c *energyStorageInfoClient) DescribeEnergyLevel(ctx context.Context, in *DescribeEnergyLevelRequest, opts ...grpc.CallOption) (*EnergyLevelSupport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnergyLevelSupport)
	err := c.cc.Invoke(ctx, EnergyStorageInfo_DescribeEnergyLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnergyStorageInfoServer is the server API for EnergyStorageInfo service.
// All implementations must embed UnimplementedEnergyStorageInfoServer
// for forward compatibility.
//
// Describes the capabilities of a specific named device with respect to this trait.
type EnergyStorageInfoServer interface {
	// Get information about how a named device implements EnergyLevel features
	DescribeEnergyLevel(context.Context, *DescribeEnergyLevelRequest) (*EnergyLevelSupport, error)
	mustEmbedUnimplementedEnergyStorageInfoServer()
}

// UnimplementedEnergyStorageInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEnergyStorageInfoServer struct{}

func (UnimplementedEnergyStorageInfoServer) DescribeEnergyLevel(context.Context, *DescribeEnergyLevelRequest) (*EnergyLevelSupport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeEnergyLevel not implemented")
}
func (UnimplementedEnergyStorageInfoServer) mustEmbedUnimplementedEnergyStorageInfoServer() {}
func (UnimplementedEnergyStorageInfoServer) testEmbeddedByValue()                           {}

// UnsafeEnergyStorageInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnergyStorageInfoServer will
// result in compilation errors.
type UnsafeEnergyStorageInfoServer interface {
	mustEmbedUnimplementedEnergyStorageInfoServer()
}

func RegisterEnergyStorageInfoServer(s grpc.ServiceRegistrar, srv EnergyStorageInfoServer) {
	// If the following call pancis, it indicates UnimplementedEnergyStorageInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EnergyStorageInfo_ServiceDesc, srv)
}

func _EnergyStorageInfo_DescribeEnergyLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeEnergyLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnergyStorageInfoServer).DescribeEnergyLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnergyStorageInfo_DescribeEnergyLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnergyStorageInfoServer).DescribeEnergyLevel(ctx, req.(*DescribeEnergyLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnergyStorageInfo_ServiceDesc is the grpc.ServiceDesc for EnergyStorageInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnergyStorageInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.EnergyStorageInfo",
	HandlerType: (*EnergyStorageInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeEnergyLevel",
			Handler:    _EnergyStorageInfo_DescribeEnergyLevel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "traits/energy_storage.proto",
}
