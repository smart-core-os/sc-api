// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.1
// source: traits/mode.proto

package traits

import (
	types "github.com/smart-core-os/sc-api/go/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ModeValues describes the current value for each available mode on a device.
type ModeValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Values, keyed by the mode name, reports the current mode value name active on the device.
	// For example {"temperature": "cool"}
	Values map[string]string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModeValues) Reset() {
	*x = ModeValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_mode_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModeValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModeValues) ProtoMessage() {}

func (x *ModeValues) ProtoReflect() protoreflect.Message {
	mi := &file_traits_mode_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModeValues.ProtoReflect.Descriptor instead.
func (*ModeValues) Descriptor() ([]byte, []int) {
	return file_traits_mode_proto_rawDescGZIP(), []int{0}
}

func (x *ModeValues) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

// ModeValuesRelative describes how a mode should change relative to its current value.
// For example {"temperature": -1} might adjust the "temperature" mode from "warm" to "cool".
type ModeValuesRelative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values map[string]int32 `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ModeValuesRelative) Reset() {
	*x = ModeValuesRelative{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_mode_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModeValuesRelative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModeValuesRelative) ProtoMessage() {}

func (x *ModeValuesRelative) ProtoReflect() protoreflect.Message {
	mi := &file_traits_mode_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModeValuesRelative.ProtoReflect.Descriptor instead.
func (*ModeValuesRelative) Descriptor() ([]byte, []int) {
	return file_traits_mode_proto_rawDescGZIP(), []int{1}
}

func (x *ModeValuesRelative) GetValues() map[string]int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// Modes describes the modes available on a device.
type Modes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Modes holds the list of supported modes for a device.
	Modes []*Modes_Mode `protobuf:"bytes,1,rep,name=modes,proto3" json:"modes,omitempty"`
}

func (x *Modes) Reset() {
	*x = Modes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_mode_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Modes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Modes) ProtoMessage() {}

func (x *Modes) ProtoReflect() protoreflect.Message {
	mi := &file_traits_mode_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Modes.ProtoReflect.Descriptor instead.
func (*Modes) Descriptor() ([]byte, []int) {
	return file_traits_mode_proto_rawDescGZIP(), []int{2}
}

func (x *Modes) GetModes() []*Modes_Mode {
	if x != nil {
		return x.Modes
	}
	return nil
}

type ModesSupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How a named device supports read/write/pull apis for mode values
	ModeValuesSupport *types.ResourceSupport `protobuf:"bytes,1,opt,name=mode_values_support,json=modeValuesSupport,proto3" json:"mode_values_support,omitempty"`
	// AvailableModes holds the list of modes the device supports.
	AvailableModes *Modes `protobuf:"bytes,2,opt,name=available_modes,json=availableModes,proto3" json:"available_modes,omitempty"`
}

func (x *ModesSupport) Reset() {
	*x = ModesSupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_mode_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModesSupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModesSupport) ProtoMessage() {}

func (x *ModesSupport) ProtoReflect() protoreflect.Message {
	mi := &file_traits_mode_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModesSupport.ProtoReflect.Descriptor instead.
func (*ModesSupport) Descriptor() ([]byte, []int) {
	return file_traits_mode_proto_rawDescGZIP(), []int{3}
}

func (x *ModesSupport) GetModeValuesSupport() *types.ResourceSupport {
	if x != nil {
		return x.ModeValuesSupport
	}
	return nil
}

func (x *ModesSupport) GetAvailableModes() *Modes {
	if x != nil {
		return x.AvailableModes
	}
	return nil
}

type GetModeValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device to fetch the state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Fields to fetch relative to the ModeValues type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
}

func (x *GetModeValuesRequest) Reset() {
	*x = GetModeValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_mode_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModeValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModeValuesRequest) ProtoMessage() {}

func (x *GetModeValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_mode_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModeValuesRequest.ProtoReflect.Descriptor instead.
func (*GetModeValuesRequest) Descriptor() ([]byte, []int) {
	return file_traits_mode_proto_rawDescGZIP(), []int{4}
}

func (x *GetModeValuesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetModeValuesRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

type UpdateModeValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device to fetch the state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The new mode values.
	ModeValues *ModeValues `protobuf:"bytes,2,opt,name=mode_values,json=modeValues,proto3" json:"mode_values,omitempty"`
	// Relative changes to the current mode values.
	// If a mode name is specified in both mode_values and relative, and the adjustment in relative is non-zero, relative adjustments win.
	Relative *ModeValuesRelative `protobuf:"bytes,3,opt,name=relative,proto3" json:"relative,omitempty"`
	// Fields to update relative to the ModeValues and ModeAdjustments type.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateModeValuesRequest) Reset() {
	*x = UpdateModeValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_mode_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateModeValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateModeValuesRequest) ProtoMessage() {}

func (x *UpdateModeValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_mode_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateModeValuesRequest.ProtoReflect.Descriptor instead.
func (*UpdateModeValuesRequest) Descriptor() ([]byte, []int) {
	return file_traits_mode_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateModeValuesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateModeValuesRequest) GetModeValues() *ModeValues {
	if x != nil {
		return x.ModeValues
	}
	return nil
}

func (x *UpdateModeValuesRequest) GetRelative() *ModeValuesRelative {
	if x != nil {
		return x.Relative
	}
	return nil
}

func (x *UpdateModeValuesRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type PullModeValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device to fetch the state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Fields to fetch relative to the ModeValues type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// When true the device will only send changes to the resource value.
	// The default behaviour is to send the current value immediately followed by any updates as they happen.
	UpdatesOnly bool `protobuf:"varint,3,opt,name=updates_only,json=updatesOnly,proto3" json:"updates_only,omitempty"`
}

func (x *PullModeValuesRequest) Reset() {
	*x = PullModeValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_mode_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullModeValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullModeValuesRequest) ProtoMessage() {}

func (x *PullModeValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_mode_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullModeValuesRequest.ProtoReflect.Descriptor instead.
func (*PullModeValuesRequest) Descriptor() ([]byte, []int) {
	return file_traits_mode_proto_rawDescGZIP(), []int{6}
}

func (x *PullModeValuesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullModeValuesRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *PullModeValuesRequest) GetUpdatesOnly() bool {
	if x != nil {
		return x.UpdatesOnly
	}
	return false
}

type PullModeValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Changes since the last message.
	Changes []*PullModeValuesResponse_Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *PullModeValuesResponse) Reset() {
	*x = PullModeValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_mode_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullModeValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullModeValuesResponse) ProtoMessage() {}

func (x *PullModeValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traits_mode_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullModeValuesResponse.ProtoReflect.Descriptor instead.
func (*PullModeValuesResponse) Descriptor() ([]byte, []int) {
	return file_traits_mode_proto_rawDescGZIP(), []int{7}
}

func (x *PullModeValuesResponse) GetChanges() []*PullModeValuesResponse_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

type DescribeModesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DescribeModesRequest) Reset() {
	*x = DescribeModesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_mode_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeModesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeModesRequest) ProtoMessage() {}

func (x *DescribeModesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_mode_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeModesRequest.ProtoReflect.Descriptor instead.
func (*DescribeModesRequest) Descriptor() ([]byte, []int) {
	return file_traits_mode_proto_rawDescGZIP(), []int{8}
}

func (x *DescribeModesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Value describes a specific setting for a mode.
type Modes_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is used to refer to this value in ModeValues.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Modes_Value) Reset() {
	*x = Modes_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_mode_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Modes_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Modes_Value) ProtoMessage() {}

func (x *Modes_Value) ProtoReflect() protoreflect.Message {
	mi := &file_traits_mode_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Modes_Value.ProtoReflect.Descriptor instead.
func (*Modes_Value) Descriptor() ([]byte, []int) {
	return file_traits_mode_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Modes_Value) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Mode describes a controllable aspect of the device.
// For example "spin_speed" or "divisible_state".
type Modes_Mode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is use to refer to this mode in ModeValues or ModeAdjustments.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Values is the list of available values this mode supports.
	Values []*Modes_Value `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	// If true, the values this mode support can be considered ordered.
	// For example ["fast", "normal", "slow"] are ordered, ["joined", "split"] are not.
	Ordered bool `protobuf:"varint,3,opt,name=ordered,proto3" json:"ordered,omitempty"`
}

func (x *Modes_Mode) Reset() {
	*x = Modes_Mode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_mode_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Modes_Mode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Modes_Mode) ProtoMessage() {}

func (x *Modes_Mode) ProtoReflect() protoreflect.Message {
	mi := &file_traits_mode_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Modes_Mode.ProtoReflect.Descriptor instead.
func (*Modes_Mode) Descriptor() ([]byte, []int) {
	return file_traits_mode_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Modes_Mode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Modes_Mode) GetValues() []*Modes_Value {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Modes_Mode) GetOrdered() bool {
	if x != nil {
		return x.Ordered
	}
	return false
}

type PullModeValuesResponse_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device that issued the change.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// When the change occurred
	ChangeTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
	// The new value for each mode.
	ModeValues *ModeValues `protobuf:"bytes,3,opt,name=mode_values,json=modeValues,proto3" json:"mode_values,omitempty"`
}

func (x *PullModeValuesResponse_Change) Reset() {
	*x = PullModeValuesResponse_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_mode_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullModeValuesResponse_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullModeValuesResponse_Change) ProtoMessage() {}

func (x *PullModeValuesResponse_Change) ProtoReflect() protoreflect.Message {
	mi := &file_traits_mode_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullModeValuesResponse_Change.ProtoReflect.Descriptor instead.
func (*PullModeValuesResponse_Change) Descriptor() ([]byte, []int) {
	return file_traits_mode_proto_rawDescGZIP(), []int{7, 0}
}

func (x *PullModeValuesResponse_Change) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullModeValuesResponse_Change) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

func (x *PullModeValuesResponse_Change) GetModeValues() *ModeValues {
	if x != nil {
		return x.ModeValues
	}
	return nil
}

var File_traits_mode_proto protoreflect.FileDescriptor

var file_traits_mode_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x10, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x73, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x0a, 0x4d,
	0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x01, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x48, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xc5, 0x01, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73,
	0x1a, 0x1b, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x6b, 0x0a,
	0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x0c, 0x4d,
	0x6f, 0x64, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x50, 0x0a, 0x13, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x40, 0x0a,
	0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0x63, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x22, 0xeb, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x22, 0x87, 0x01, 0x0a, 0x15, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xfe, 0x01, 0x0a,
	0x16, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x1a, 0x98, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x2a, 0x0a,
	0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0xa4, 0x02, 0x0a, 0x07, 0x4d, 0x6f,
	0x64, 0x65, 0x41, 0x70, 0x69, 0x12, 0x55, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x29, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x0e, 0x50, 0x75, 0x6c,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50,
	0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x32, 0x63, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x0d,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x26, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x74, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x42, 0x09, 0x4d,
	0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x2d, 0x63, 0x6f, 0x72,
	0x65, 0x2d, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x73, 0xaa, 0x02, 0x10, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0xca, 0x02, 0x10, 0x53, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x5c, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_traits_mode_proto_rawDescOnce sync.Once
	file_traits_mode_proto_rawDescData = file_traits_mode_proto_rawDesc
)

func file_traits_mode_proto_rawDescGZIP() []byte {
	file_traits_mode_proto_rawDescOnce.Do(func() {
		file_traits_mode_proto_rawDescData = protoimpl.X.CompressGZIP(file_traits_mode_proto_rawDescData)
	})
	return file_traits_mode_proto_rawDescData
}

var file_traits_mode_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_traits_mode_proto_goTypes = []any{
	(*ModeValues)(nil),                    // 0: smartcore.traits.ModeValues
	(*ModeValuesRelative)(nil),            // 1: smartcore.traits.ModeValuesRelative
	(*Modes)(nil),                         // 2: smartcore.traits.Modes
	(*ModesSupport)(nil),                  // 3: smartcore.traits.ModesSupport
	(*GetModeValuesRequest)(nil),          // 4: smartcore.traits.GetModeValuesRequest
	(*UpdateModeValuesRequest)(nil),       // 5: smartcore.traits.UpdateModeValuesRequest
	(*PullModeValuesRequest)(nil),         // 6: smartcore.traits.PullModeValuesRequest
	(*PullModeValuesResponse)(nil),        // 7: smartcore.traits.PullModeValuesResponse
	(*DescribeModesRequest)(nil),          // 8: smartcore.traits.DescribeModesRequest
	nil,                                   // 9: smartcore.traits.ModeValues.ValuesEntry
	nil,                                   // 10: smartcore.traits.ModeValuesRelative.ValuesEntry
	(*Modes_Value)(nil),                   // 11: smartcore.traits.Modes.Value
	(*Modes_Mode)(nil),                    // 12: smartcore.traits.Modes.Mode
	(*PullModeValuesResponse_Change)(nil), // 13: smartcore.traits.PullModeValuesResponse.Change
	(*types.ResourceSupport)(nil),         // 14: smartcore.types.ResourceSupport
	(*fieldmaskpb.FieldMask)(nil),         // 15: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),         // 16: google.protobuf.Timestamp
}
var file_traits_mode_proto_depIdxs = []int32{
	9,  // 0: smartcore.traits.ModeValues.values:type_name -> smartcore.traits.ModeValues.ValuesEntry
	10, // 1: smartcore.traits.ModeValuesRelative.values:type_name -> smartcore.traits.ModeValuesRelative.ValuesEntry
	12, // 2: smartcore.traits.Modes.modes:type_name -> smartcore.traits.Modes.Mode
	14, // 3: smartcore.traits.ModesSupport.mode_values_support:type_name -> smartcore.types.ResourceSupport
	2,  // 4: smartcore.traits.ModesSupport.available_modes:type_name -> smartcore.traits.Modes
	15, // 5: smartcore.traits.GetModeValuesRequest.read_mask:type_name -> google.protobuf.FieldMask
	0,  // 6: smartcore.traits.UpdateModeValuesRequest.mode_values:type_name -> smartcore.traits.ModeValues
	1,  // 7: smartcore.traits.UpdateModeValuesRequest.relative:type_name -> smartcore.traits.ModeValuesRelative
	15, // 8: smartcore.traits.UpdateModeValuesRequest.update_mask:type_name -> google.protobuf.FieldMask
	15, // 9: smartcore.traits.PullModeValuesRequest.read_mask:type_name -> google.protobuf.FieldMask
	13, // 10: smartcore.traits.PullModeValuesResponse.changes:type_name -> smartcore.traits.PullModeValuesResponse.Change
	11, // 11: smartcore.traits.Modes.Mode.values:type_name -> smartcore.traits.Modes.Value
	16, // 12: smartcore.traits.PullModeValuesResponse.Change.change_time:type_name -> google.protobuf.Timestamp
	0,  // 13: smartcore.traits.PullModeValuesResponse.Change.mode_values:type_name -> smartcore.traits.ModeValues
	4,  // 14: smartcore.traits.ModeApi.GetModeValues:input_type -> smartcore.traits.GetModeValuesRequest
	5,  // 15: smartcore.traits.ModeApi.UpdateModeValues:input_type -> smartcore.traits.UpdateModeValuesRequest
	6,  // 16: smartcore.traits.ModeApi.PullModeValues:input_type -> smartcore.traits.PullModeValuesRequest
	8,  // 17: smartcore.traits.ModeInfo.DescribeModes:input_type -> smartcore.traits.DescribeModesRequest
	0,  // 18: smartcore.traits.ModeApi.GetModeValues:output_type -> smartcore.traits.ModeValues
	0,  // 19: smartcore.traits.ModeApi.UpdateModeValues:output_type -> smartcore.traits.ModeValues
	7,  // 20: smartcore.traits.ModeApi.PullModeValues:output_type -> smartcore.traits.PullModeValuesResponse
	3,  // 21: smartcore.traits.ModeInfo.DescribeModes:output_type -> smartcore.traits.ModesSupport
	18, // [18:22] is the sub-list for method output_type
	14, // [14:18] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_traits_mode_proto_init() }
func file_traits_mode_proto_init() {
	if File_traits_mode_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_traits_mode_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ModeValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_mode_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ModeValuesRelative); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_mode_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Modes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_mode_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ModesSupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_mode_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetModeValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_mode_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateModeValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_mode_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*PullModeValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_mode_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PullModeValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_mode_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*DescribeModesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_mode_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Modes_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_mode_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Modes_Mode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_mode_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*PullModeValuesResponse_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_traits_mode_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_traits_mode_proto_goTypes,
		DependencyIndexes: file_traits_mode_proto_depIdxs,
		MessageInfos:      file_traits_mode_proto_msgTypes,
	}.Build()
	File_traits_mode_proto = out.File
	file_traits_mode_proto_rawDesc = nil
	file_traits_mode_proto_goTypes = nil
	file_traits_mode_proto_depIdxs = nil
}
