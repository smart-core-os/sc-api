// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: traits/count.proto

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CountApi_GetCount_FullMethodName    = "/smartcore.traits.CountApi/GetCount"
	CountApi_ResetCount_FullMethodName  = "/smartcore.traits.CountApi/ResetCount"
	CountApi_UpdateCount_FullMethodName = "/smartcore.traits.CountApi/UpdateCount"
	CountApi_PullCounts_FullMethodName  = "/smartcore.traits.CountApi/PullCounts"
)

// CountApiClient is the client API for CountApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CountApi tracks both a positive and negative count of some quantity. Can be used for tickers, footfall sensors, and
// devices like that.
type CountApiClient interface {
	// Get the current count state
	GetCount(ctx context.Context, in *GetCountRequest, opts ...grpc.CallOption) (*Count, error)
	// Reset the counts to 0 and update the reset time.
	ResetCount(ctx context.Context, in *ResetCountRequest, opts ...grpc.CallOption) (*Count, error)
	// Update one or more properties of the count.
	UpdateCount(ctx context.Context, in *UpdateCountRequest, opts ...grpc.CallOption) (*Count, error)
	// Subscribe to changes to the count.
	PullCounts(ctx context.Context, in *PullCountsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullCountsResponse], error)
}

type countApiClient struct {
	cc grpc.ClientConnInterface
}

func NewCountApiClient(cc grpc.ClientConnInterface) CountApiClient {
	return &countApiClient{cc}
}

func (c *countApiClient) GetCount(ctx context.Context, in *GetCountRequest, opts ...grpc.CallOption) (*Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Count)
	err := c.cc.Invoke(ctx, CountApi_GetCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countApiClient) ResetCount(ctx context.Context, in *ResetCountRequest, opts ...grpc.CallOption) (*Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Count)
	err := c.cc.Invoke(ctx, CountApi_ResetCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countApiClient) UpdateCount(ctx context.Context, in *UpdateCountRequest, opts ...grpc.CallOption) (*Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Count)
	err := c.cc.Invoke(ctx, CountApi_UpdateCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countApiClient) PullCounts(ctx context.Context, in *PullCountsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullCountsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CountApi_ServiceDesc.Streams[0], CountApi_PullCounts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullCountsRequest, PullCountsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CountApi_PullCountsClient = grpc.ServerStreamingClient[PullCountsResponse]

// CountApiServer is the server API for CountApi service.
// All implementations must embed UnimplementedCountApiServer
// for forward compatibility.
//
// CountApi tracks both a positive and negative count of some quantity. Can be used for tickers, footfall sensors, and
// devices like that.
type CountApiServer interface {
	// Get the current count state
	GetCount(context.Context, *GetCountRequest) (*Count, error)
	// Reset the counts to 0 and update the reset time.
	ResetCount(context.Context, *ResetCountRequest) (*Count, error)
	// Update one or more properties of the count.
	UpdateCount(context.Context, *UpdateCountRequest) (*Count, error)
	// Subscribe to changes to the count.
	PullCounts(*PullCountsRequest, grpc.ServerStreamingServer[PullCountsResponse]) error
	mustEmbedUnimplementedCountApiServer()
}

// UnimplementedCountApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCountApiServer struct{}

func (UnimplementedCountApiServer) GetCount(context.Context, *GetCountRequest) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCount not implemented")
}
func (UnimplementedCountApiServer) ResetCount(context.Context, *ResetCountRequest) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCount not implemented")
}
func (UnimplementedCountApiServer) UpdateCount(context.Context, *UpdateCountRequest) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCount not implemented")
}
func (UnimplementedCountApiServer) PullCounts(*PullCountsRequest, grpc.ServerStreamingServer[PullCountsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullCounts not implemented")
}
func (UnimplementedCountApiServer) mustEmbedUnimplementedCountApiServer() {}
func (UnimplementedCountApiServer) testEmbeddedByValue()                  {}

// UnsafeCountApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CountApiServer will
// result in compilation errors.
type UnsafeCountApiServer interface {
	mustEmbedUnimplementedCountApiServer()
}

func RegisterCountApiServer(s grpc.ServiceRegistrar, srv CountApiServer) {
	// If the following call pancis, it indicates UnimplementedCountApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CountApi_ServiceDesc, srv)
}

func _CountApi_GetCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountApiServer).GetCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CountApi_GetCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountApiServer).GetCount(ctx, req.(*GetCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CountApi_ResetCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountApiServer).ResetCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CountApi_ResetCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountApiServer).ResetCount(ctx, req.(*ResetCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CountApi_UpdateCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountApiServer).UpdateCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CountApi_UpdateCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountApiServer).UpdateCount(ctx, req.(*UpdateCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CountApi_PullCounts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullCountsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CountApiServer).PullCounts(m, &grpc.GenericServerStream[PullCountsRequest, PullCountsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CountApi_PullCountsServer = grpc.ServerStreamingServer[PullCountsResponse]

// CountApi_ServiceDesc is the grpc.ServiceDesc for CountApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CountApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.CountApi",
	HandlerType: (*CountApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCount",
			Handler:    _CountApi_GetCount_Handler,
		},
		{
			MethodName: "ResetCount",
			Handler:    _CountApi_ResetCount_Handler,
		},
		{
			MethodName: "UpdateCount",
			Handler:    _CountApi_UpdateCount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullCounts",
			Handler:       _CountApi_PullCounts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/count.proto",
}

const (
	CountInfo_DescribeCount_FullMethodName = "/smartcore.traits.CountInfo/DescribeCount"
)

// CountInfoClient is the client API for CountInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the capabilities of a specific named device with respect to this trait.
type CountInfoClient interface {
	// Get information about how a named device implements Count features
	DescribeCount(ctx context.Context, in *DescribeCountRequest, opts ...grpc.CallOption) (*CountSupport, error)
}

type countInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewCountInfoClient(cc grpc.ClientConnInterface) CountInfoClient {
	return &countInfoClient{cc}
}

func (c *countInfoClient) DescribeCount(ctx context.Context, in *DescribeCountRequest, opts ...grpc.CallOption) (*CountSupport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountSupport)
	err := c.cc.Invoke(ctx, CountInfo_DescribeCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CountInfoServer is the server API for CountInfo service.
// All implementations must embed UnimplementedCountInfoServer
// for forward compatibility.
//
// Describes the capabilities of a specific named device with respect to this trait.
type CountInfoServer interface {
	// Get information about how a named device implements Count features
	DescribeCount(context.Context, *DescribeCountRequest) (*CountSupport, error)
	mustEmbedUnimplementedCountInfoServer()
}

// UnimplementedCountInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCountInfoServer struct{}

func (UnimplementedCountInfoServer) DescribeCount(context.Context, *DescribeCountRequest) (*CountSupport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCount not implemented")
}
func (UnimplementedCountInfoServer) mustEmbedUnimplementedCountInfoServer() {}
func (UnimplementedCountInfoServer) testEmbeddedByValue()                   {}

// UnsafeCountInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CountInfoServer will
// result in compilation errors.
type UnsafeCountInfoServer interface {
	mustEmbedUnimplementedCountInfoServer()
}

func RegisterCountInfoServer(s grpc.ServiceRegistrar, srv CountInfoServer) {
	// If the following call pancis, it indicates UnimplementedCountInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CountInfo_ServiceDesc, srv)
}

func _CountInfo_DescribeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountInfoServer).DescribeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CountInfo_DescribeCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountInfoServer).DescribeCount(ctx, req.(*DescribeCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CountInfo_ServiceDesc is the grpc.ServiceDesc for CountInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CountInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.CountInfo",
	HandlerType: (*CountInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeCount",
			Handler:    _CountInfo_DescribeCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "traits/count.proto",
}
