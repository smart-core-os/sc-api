// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.3
// source: traits/metadata.proto

package traits

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Metadata_NIC_Assignment int32

const (
	Metadata_NIC_ASSIGNMENT_UNSPECIFIED Metadata_NIC_Assignment = 0
	Metadata_NIC_DHCP                   Metadata_NIC_Assignment = 1
	Metadata_NIC_STATIC                 Metadata_NIC_Assignment = 2
)

// Enum value maps for Metadata_NIC_Assignment.
var (
	Metadata_NIC_Assignment_name = map[int32]string{
		0: "ASSIGNMENT_UNSPECIFIED",
		1: "DHCP",
		2: "STATIC",
	}
	Metadata_NIC_Assignment_value = map[string]int32{
		"ASSIGNMENT_UNSPECIFIED": 0,
		"DHCP":                   1,
		"STATIC":                 2,
	}
)

func (x Metadata_NIC_Assignment) Enum() *Metadata_NIC_Assignment {
	p := new(Metadata_NIC_Assignment)
	*p = x
	return p
}

func (x Metadata_NIC_Assignment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metadata_NIC_Assignment) Descriptor() protoreflect.EnumDescriptor {
	return file_traits_metadata_proto_enumTypes[0].Descriptor()
}

func (Metadata_NIC_Assignment) Type() protoreflect.EnumType {
	return &file_traits_metadata_proto_enumTypes[0]
}

func (x Metadata_NIC_Assignment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metadata_NIC_Assignment.Descriptor instead.
func (Metadata_NIC_Assignment) EnumDescriptor() ([]byte, []int) {
	return file_traits_metadata_proto_rawDescGZIP(), []int{0, 6, 0}
}

// Metadata holds information about a device.
// The information properties are grouped based on the aspect of the device they relate to.
// The metadata object and each group may hold arbitrary data via the more property.
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The canonical name for this device.
	Name   string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Traits []*TraitMetadata `protobuf:"bytes,2,rep,name=traits,proto3" json:"traits,omitempty"`
	// Appearance describes properties of the device related to how it should be displayed on a user interface.
	Appearance *Metadata_Appearance `protobuf:"bytes,3,opt,name=appearance,proto3" json:"appearance,omitempty"`
	// Location describes where the device is physically located.
	Location *Metadata_Location `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	// ID records different IDs for the device across different systems.
	Id *Metadata_ID `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	// Product describes the make and model of the device and who made it.
	Product *Metadata_Product `protobuf:"bytes,6,opt,name=product,proto3" json:"product,omitempty"`
	// Revision describes this exact version of the device.
	// Properties in Revision take president over fields in product.
	Revision *Metadata_Revision `protobuf:"bytes,7,opt,name=revision,proto3" json:"revision,omitempty"`
	// Installation records information about the devices installation.
	Installation *Metadata_Installation `protobuf:"bytes,8,opt,name=installation,proto3" json:"installation,omitempty"`
	// Nics describes the devices network interfaces.
	Nics []*Metadata_NIC `protobuf:"bytes,9,rep,name=nics,proto3" json:"nics,omitempty"`
	// Membership describes how this device is related to other devices.
	Membership *Metadata_Membership `protobuf:"bytes,10,opt,name=membership,proto3" json:"membership,omitempty"`
	// More contains any non-specified additional metadata that wouldn't fit into the other categories.
	More map[string]string `protobuf:"bytes,100,rep,name=more,proto3" json:"more,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_metadata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_traits_metadata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_traits_metadata_proto_rawDescGZIP(), []int{0}
}

func (x *Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metadata) GetTraits() []*TraitMetadata {
	if x != nil {
		return x.Traits
	}
	return nil
}

func (x *Metadata) GetAppearance() *Metadata_Appearance {
	if x != nil {
		return x.Appearance
	}
	return nil
}

func (x *Metadata) GetLocation() *Metadata_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Metadata) GetId() *Metadata_ID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Metadata) GetProduct() *Metadata_Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *Metadata) GetRevision() *Metadata_Revision {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *Metadata) GetInstallation() *Metadata_Installation {
	if x != nil {
		return x.Installation
	}
	return nil
}

func (x *Metadata) GetNics() []*Metadata_NIC {
	if x != nil {
		return x.Nics
	}
	return nil
}

func (x *Metadata) GetMembership() *Metadata_Membership {
	if x != nil {
		return x.Membership
	}
	return nil
}

func (x *Metadata) GetMore() map[string]string {
	if x != nil {
		return x.More
	}
	return nil
}

type TraitMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The fully qualified name of the trait.
	Name string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	More map[string]string `protobuf:"bytes,100,rep,name=more,proto3" json:"more,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TraitMetadata) Reset() {
	*x = TraitMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_metadata_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraitMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraitMetadata) ProtoMessage() {}

func (x *TraitMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_traits_metadata_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraitMetadata.ProtoReflect.Descriptor instead.
func (*TraitMetadata) Descriptor() ([]byte, []int) {
	return file_traits_metadata_proto_rawDescGZIP(), []int{1}
}

func (x *TraitMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TraitMetadata) GetMore() map[string]string {
	if x != nil {
		return x.More
	}
	return nil
}

type GetMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device to fetch the state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Fields to fetch relative to the Metadata type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
}

func (x *GetMetadataRequest) Reset() {
	*x = GetMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_metadata_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetadataRequest) ProtoMessage() {}

func (x *GetMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_metadata_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetMetadataRequest) Descriptor() ([]byte, []int) {
	return file_traits_metadata_proto_rawDescGZIP(), []int{2}
}

func (x *GetMetadataRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetMetadataRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

type PullMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device to fetch the state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Fields to fetch relative to the Metadata type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// When true the device will only send changes to the resource value.
	// The default behaviour is to send the current value immediately followed by any updates as they happen.
	UpdatesOnly bool `protobuf:"varint,3,opt,name=updates_only,json=updatesOnly,proto3" json:"updates_only,omitempty"`
}

func (x *PullMetadataRequest) Reset() {
	*x = PullMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_metadata_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullMetadataRequest) ProtoMessage() {}

func (x *PullMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_metadata_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullMetadataRequest.ProtoReflect.Descriptor instead.
func (*PullMetadataRequest) Descriptor() ([]byte, []int) {
	return file_traits_metadata_proto_rawDescGZIP(), []int{3}
}

func (x *PullMetadataRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullMetadataRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *PullMetadataRequest) GetUpdatesOnly() bool {
	if x != nil {
		return x.UpdatesOnly
	}
	return false
}

type PullMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of changes which have occurred
	Changes []*PullMetadataResponse_Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *PullMetadataResponse) Reset() {
	*x = PullMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_metadata_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullMetadataResponse) ProtoMessage() {}

func (x *PullMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traits_metadata_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullMetadataResponse.ProtoReflect.Descriptor instead.
func (*PullMetadataResponse) Descriptor() ([]byte, []int) {
	return file_traits_metadata_proto_rawDescGZIP(), []int{4}
}

func (x *PullMetadataResponse) GetChanges() []*PullMetadataResponse_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

type Metadata_Appearance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Title holds the official name for the device.
	// For example "Reception Printer" or "MR1 AC Unit"
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Description holds additional detail about this device.
	// For example "The printer for floor 3".
	Description string            `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	More        map[string]string `protobuf:"bytes,100,rep,name=more,proto3" json:"more,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Metadata_Appearance) Reset() {
	*x = Metadata_Appearance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_metadata_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata_Appearance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata_Appearance) ProtoMessage() {}

func (x *Metadata_Appearance) ProtoReflect() protoreflect.Message {
	mi := &file_traits_metadata_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata_Appearance.ProtoReflect.Descriptor instead.
func (*Metadata_Appearance) Descriptor() ([]byte, []int) {
	return file_traits_metadata_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Metadata_Appearance) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Metadata_Appearance) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Metadata_Appearance) GetMore() map[string]string {
	if x != nil {
		return x.More
	}
	return nil
}

type Metadata_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Title holds the official name for the location.
	// For example "Meeting Room 1"
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Description holds additional detail about the location.
	// For example "North-east project room".
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Architectural reference holds the reference for the location in architectural drawings.
	ArchitectureReference string `protobuf:"bytes,3,opt,name=architecture_reference,json=architectureReference,proto3" json:"architecture_reference,omitempty"`
	// The common name for the floor the device is located on.
	Floor string `protobuf:"bytes,4,opt,name=floor,proto3" json:"floor,omitempty"`
	// A user defined zone withing the building where the device is located.
	// Different buildings organise their spaces differently into groups or zones,
	// for example some buildings group by compass points: North and South, some by quarters.
	Zone string            `protobuf:"bytes,5,opt,name=zone,proto3" json:"zone,omitempty"`
	More map[string]string `protobuf:"bytes,100,rep,name=more,proto3" json:"more,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Metadata_Location) Reset() {
	*x = Metadata_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_metadata_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata_Location) ProtoMessage() {}

func (x *Metadata_Location) ProtoReflect() protoreflect.Message {
	mi := &file_traits_metadata_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata_Location.ProtoReflect.Descriptor instead.
func (*Metadata_Location) Descriptor() ([]byte, []int) {
	return file_traits_metadata_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Metadata_Location) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Metadata_Location) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Metadata_Location) GetArchitectureReference() string {
	if x != nil {
		return x.ArchitectureReference
	}
	return ""
}

func (x *Metadata_Location) GetFloor() string {
	if x != nil {
		return x.Floor
	}
	return ""
}

func (x *Metadata_Location) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *Metadata_Location) GetMore() map[string]string {
	if x != nil {
		return x.More
	}
	return nil
}

type Metadata_ID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber string            `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	Bim          string            `protobuf:"bytes,2,opt,name=bim,proto3" json:"bim,omitempty"`
	Bacnet       string            `protobuf:"bytes,3,opt,name=bacnet,proto3" json:"bacnet,omitempty"`
	More         map[string]string `protobuf:"bytes,100,rep,name=more,proto3" json:"more,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Metadata_ID) Reset() {
	*x = Metadata_ID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_metadata_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata_ID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata_ID) ProtoMessage() {}

func (x *Metadata_ID) ProtoReflect() protoreflect.Message {
	mi := &file_traits_metadata_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata_ID.ProtoReflect.Descriptor instead.
func (*Metadata_ID) Descriptor() ([]byte, []int) {
	return file_traits_metadata_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Metadata_ID) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Metadata_ID) GetBim() string {
	if x != nil {
		return x.Bim
	}
	return ""
}

func (x *Metadata_ID) GetBacnet() string {
	if x != nil {
		return x.Bacnet
	}
	return ""
}

func (x *Metadata_ID) GetMore() map[string]string {
	if x != nil {
		return x.More
	}
	return nil
}

type Metadata_Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title           string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Manufacturer    string                 `protobuf:"bytes,2,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Model           string                 `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	HardwareVersion string                 `protobuf:"bytes,4,opt,name=hardware_version,json=hardwareVersion,proto3" json:"hardware_version,omitempty"`
	FirmwareVersion string                 `protobuf:"bytes,5,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	SoftwareVersion string                 `protobuf:"bytes,6,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty"`
	Kind            *Metadata_Product_Kind `protobuf:"bytes,7,opt,name=kind,proto3" json:"kind,omitempty"`
	More            map[string]string      `protobuf:"bytes,100,rep,name=more,proto3" json:"more,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Metadata_Product) Reset() {
	*x = Metadata_Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_metadata_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata_Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata_Product) ProtoMessage() {}

func (x *Metadata_Product) ProtoReflect() protoreflect.Message {
	mi := &file_traits_metadata_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata_Product.ProtoReflect.Descriptor instead.
func (*Metadata_Product) Descriptor() ([]byte, []int) {
	return file_traits_metadata_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Metadata_Product) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Metadata_Product) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *Metadata_Product) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Metadata_Product) GetHardwareVersion() string {
	if x != nil {
		return x.HardwareVersion
	}
	return ""
}

func (x *Metadata_Product) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *Metadata_Product) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

func (x *Metadata_Product) GetKind() *Metadata_Product_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *Metadata_Product) GetMore() map[string]string {
	if x != nil {
		return x.More
	}
	return nil
}

type Metadata_Revision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title           string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	ManufactureDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=manufacture_date,json=manufactureDate,proto3" json:"manufacture_date,omitempty"`
	Model           string                 `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	HardwareVersion string                 `protobuf:"bytes,4,opt,name=hardware_version,json=hardwareVersion,proto3" json:"hardware_version,omitempty"`
	FirmwareVersion string                 `protobuf:"bytes,5,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	SoftwareVersion string                 `protobuf:"bytes,6,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty"`
	Batch           string                 `protobuf:"bytes,7,opt,name=batch,proto3" json:"batch,omitempty"`
	More            map[string]string      `protobuf:"bytes,100,rep,name=more,proto3" json:"more,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Metadata_Revision) Reset() {
	*x = Metadata_Revision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_metadata_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata_Revision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata_Revision) ProtoMessage() {}

func (x *Metadata_Revision) ProtoReflect() protoreflect.Message {
	mi := &file_traits_metadata_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata_Revision.ProtoReflect.Descriptor instead.
func (*Metadata_Revision) Descriptor() ([]byte, []int) {
	return file_traits_metadata_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Metadata_Revision) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Metadata_Revision) GetManufactureDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ManufactureDate
	}
	return nil
}

func (x *Metadata_Revision) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Metadata_Revision) GetHardwareVersion() string {
	if x != nil {
		return x.HardwareVersion
	}
	return ""
}

func (x *Metadata_Revision) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *Metadata_Revision) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

func (x *Metadata_Revision) GetBatch() string {
	if x != nil {
		return x.Batch
	}
	return ""
}

func (x *Metadata_Revision) GetMore() map[string]string {
	if x != nil {
		return x.More
	}
	return nil
}

type Metadata_Installation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstallTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=install_time,json=installTime,proto3" json:"install_time,omitempty"`
	ReplaceTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=replace_time,json=replaceTime,proto3" json:"replace_time,omitempty"`
	Installer   string                 `protobuf:"bytes,3,opt,name=installer,proto3" json:"installer,omitempty"`
	Labelled    bool                   `protobuf:"varint,4,opt,name=labelled,proto3" json:"labelled,omitempty"`
	LabelTime   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=label_time,json=labelTime,proto3" json:"label_time,omitempty"`
	More        map[string]string      `protobuf:"bytes,100,rep,name=more,proto3" json:"more,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Metadata_Installation) Reset() {
	*x = Metadata_Installation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_metadata_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata_Installation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata_Installation) ProtoMessage() {}

func (x *Metadata_Installation) ProtoReflect() protoreflect.Message {
	mi := &file_traits_metadata_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata_Installation.ProtoReflect.Descriptor instead.
func (*Metadata_Installation) Descriptor() ([]byte, []int) {
	return file_traits_metadata_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Metadata_Installation) GetInstallTime() *timestamppb.Timestamp {
	if x != nil {
		return x.InstallTime
	}
	return nil
}

func (x *Metadata_Installation) GetReplaceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReplaceTime
	}
	return nil
}

func (x *Metadata_Installation) GetInstaller() string {
	if x != nil {
		return x.Installer
	}
	return ""
}

func (x *Metadata_Installation) GetLabelled() bool {
	if x != nil {
		return x.Labelled
	}
	return false
}

func (x *Metadata_Installation) GetLabelTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LabelTime
	}
	return nil
}

func (x *Metadata_Installation) GetMore() map[string]string {
	if x != nil {
		return x.More
	}
	return nil
}

type Metadata_NIC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of this NIC, if there is one.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The MAC address of this NIC.
	// May take any of the common MAC formatting options, case insensitive 001B638445E6, 00:1b:63:84:45:e6, or
	// 00-1B-63-84-45-E6.
	// Non-hexadecimal digits should be ignored, and it should not be longer than 17 characters long -
	// 12 digits in pairs + 5 separator chars.
	MacAddress string `protobuf:"bytes,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// The V4 or V6 IP address of the NIC.
	Ip string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	// The network (subnet) the NIC is on.
	// In the form `<ip>/<bits>`, the CIDR notation defined in RFC 4632 and RFC 4291.
	// Masked bits may be masked but are not required to be.
	Network string `protobuf:"bytes,4,opt,name=network,proto3" json:"network,omitempty"`
	// The IP of the gateway.
	Gateway string `protobuf:"bytes,5,opt,name=gateway,proto3" json:"gateway,omitempty"`
	// The IP of DNS servers, in priority order.
	Dns        []string                `protobuf:"bytes,6,rep,name=dns,proto3" json:"dns,omitempty"`
	Assignment Metadata_NIC_Assignment `protobuf:"varint,10,opt,name=assignment,proto3,enum=smartcore.traits.Metadata_NIC_Assignment" json:"assignment,omitempty"`
	More       map[string]string       `protobuf:"bytes,100,rep,name=more,proto3" json:"more,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Metadata_NIC) Reset() {
	*x = Metadata_NIC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_metadata_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata_NIC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata_NIC) ProtoMessage() {}

func (x *Metadata_NIC) ProtoReflect() protoreflect.Message {
	mi := &file_traits_metadata_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata_NIC.ProtoReflect.Descriptor instead.
func (*Metadata_NIC) Descriptor() ([]byte, []int) {
	return file_traits_metadata_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Metadata_NIC) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Metadata_NIC) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *Metadata_NIC) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Metadata_NIC) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Metadata_NIC) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *Metadata_NIC) GetDns() []string {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *Metadata_NIC) GetAssignment() Metadata_NIC_Assignment {
	if x != nil {
		return x.Assignment
	}
	return Metadata_NIC_ASSIGNMENT_UNSPECIFIED
}

func (x *Metadata_NIC) GetMore() map[string]string {
	if x != nil {
		return x.More
	}
	return nil
}

type Metadata_Membership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Group holds a group name shared between this device and others.
	// This can be useful for displaying this device on interfaces.
	Group string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	// Subsystem records which larger system this device is part of.
	// For example "BMS" or "Lighting"
	Subsystem string            `protobuf:"bytes,2,opt,name=subsystem,proto3" json:"subsystem,omitempty"`
	More      map[string]string `protobuf:"bytes,100,rep,name=more,proto3" json:"more,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Metadata_Membership) Reset() {
	*x = Metadata_Membership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_metadata_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata_Membership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata_Membership) ProtoMessage() {}

func (x *Metadata_Membership) ProtoReflect() protoreflect.Message {
	mi := &file_traits_metadata_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata_Membership.ProtoReflect.Descriptor instead.
func (*Metadata_Membership) Descriptor() ([]byte, []int) {
	return file_traits_metadata_proto_rawDescGZIP(), []int{0, 7}
}

func (x *Metadata_Membership) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Metadata_Membership) GetSubsystem() string {
	if x != nil {
		return x.Subsystem
	}
	return ""
}

func (x *Metadata_Membership) GetMore() map[string]string {
	if x != nil {
		return x.More
	}
	return nil
}

type Metadata_Product_Kind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Code  string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Metadata_Product_Kind) Reset() {
	*x = Metadata_Product_Kind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_metadata_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata_Product_Kind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata_Product_Kind) ProtoMessage() {}

func (x *Metadata_Product_Kind) ProtoReflect() protoreflect.Message {
	mi := &file_traits_metadata_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata_Product_Kind.ProtoReflect.Descriptor instead.
func (*Metadata_Product_Kind) Descriptor() ([]byte, []int) {
	return file_traits_metadata_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *Metadata_Product_Kind) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Metadata_Product_Kind) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type PullMetadataResponse_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device that emitted this change
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The new updated value.
	Metadata *Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// When the change occurred
	ChangeTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
}

func (x *PullMetadataResponse_Change) Reset() {
	*x = PullMetadataResponse_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_metadata_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullMetadataResponse_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullMetadataResponse_Change) ProtoMessage() {}

func (x *PullMetadataResponse_Change) ProtoReflect() protoreflect.Message {
	mi := &file_traits_metadata_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullMetadataResponse_Change.ProtoReflect.Descriptor instead.
func (*PullMetadataResponse_Change) Descriptor() ([]byte, []int) {
	return file_traits_metadata_proto_rawDescGZIP(), []int{4, 0}
}

func (x *PullMetadataResponse_Change) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullMetadataResponse_Change) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PullMetadataResponse_Change) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

var File_traits_metadata_proto protoreflect.FileDescriptor

var file_traits_metadata_proto_rawDesc = []byte{
	0x0a, 0x15, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x19, 0x0a,
	0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a,
	0x06, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x06,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x69, 0x63,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4e, 0x49, 0x43, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x73, 0x12, 0x45, 0x0a,
	0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x12, 0x38, 0x0a, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x64, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x1a, 0xc2,
	0x01, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x64, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x72, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x6f,
	0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x9f, 0x02, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x6d, 0x6f, 0x72,
	0x65, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x72,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x1a, 0x37, 0x0a, 0x09,
	0x4d, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xc9, 0x01, 0x0a, 0x02, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x62, 0x69, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x63, 0x6e, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x63, 0x6e, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x6d,
	0x6f, 0x72, 0x65, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x44, 0x2e, 0x4d, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x6f, 0x72, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0xc4, 0x03, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x29, 0x0a,
	0x10, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x04, 0x6d,
	0x6f, 0x72, 0x65, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x4d, 0x6f,
	0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x1a, 0x30, 0x0a,
	0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x1a,
	0x37, 0x0a, 0x09, 0x4d, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x90, 0x03, 0x0a, 0x08, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61,
	0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x41, 0x0a, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x6f,
	0x72, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x81, 0x03, 0x0a, 0x0c,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x45, 0x0a, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x6f, 0x72, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0xa1, 0x03, 0x0a, 0x03, 0x4e, 0x49, 0x43, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6e,
	0x73, 0x12, 0x49, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4e, 0x49, 0x43, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x04,
	0x6d, 0x6f, 0x72, 0x65, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x49, 0x43, 0x2e, 0x4d, 0x6f, 0x72, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x6f,
	0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x3e, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x44, 0x48, 0x43, 0x50, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x49,
	0x43, 0x10, 0x02, 0x1a, 0xbe, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x43, 0x0a, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x64,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x4d, 0x6f, 0x72, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x4d,
	0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b, 0x01,
	0x0a, 0x0d, 0x54, 0x72, 0x61, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x64, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x6f,
	0x72, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x61, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x85,
	0x01, 0x0a, 0x13, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xf3, 0x01, 0x0a, 0x14, 0x50, 0x75, 0x6c, 0x6c, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x91, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x3b, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0xbf, 0x01, 0x0a,
	0x0b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x70, 0x69, 0x12, 0x4f, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5f, 0x0a,
	0x0c, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,
	0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0x0e,
	0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x78,
	0x0a, 0x14, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x42, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6f,
	0x73, 0x2f, 0x73, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x73, 0xaa, 0x02, 0x10, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x69, 0x74, 0x73, 0xca, 0x02, 0x10, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x5c, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_traits_metadata_proto_rawDescOnce sync.Once
	file_traits_metadata_proto_rawDescData = file_traits_metadata_proto_rawDesc
)

func file_traits_metadata_proto_rawDescGZIP() []byte {
	file_traits_metadata_proto_rawDescOnce.Do(func() {
		file_traits_metadata_proto_rawDescData = protoimpl.X.CompressGZIP(file_traits_metadata_proto_rawDescData)
	})
	return file_traits_metadata_proto_rawDescData
}

var file_traits_metadata_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_traits_metadata_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_traits_metadata_proto_goTypes = []any{
	(Metadata_NIC_Assignment)(0),        // 0: smartcore.traits.Metadata.NIC.Assignment
	(*Metadata)(nil),                    // 1: smartcore.traits.Metadata
	(*TraitMetadata)(nil),               // 2: smartcore.traits.TraitMetadata
	(*GetMetadataRequest)(nil),          // 3: smartcore.traits.GetMetadataRequest
	(*PullMetadataRequest)(nil),         // 4: smartcore.traits.PullMetadataRequest
	(*PullMetadataResponse)(nil),        // 5: smartcore.traits.PullMetadataResponse
	(*Metadata_Appearance)(nil),         // 6: smartcore.traits.Metadata.Appearance
	(*Metadata_Location)(nil),           // 7: smartcore.traits.Metadata.Location
	(*Metadata_ID)(nil),                 // 8: smartcore.traits.Metadata.ID
	(*Metadata_Product)(nil),            // 9: smartcore.traits.Metadata.Product
	(*Metadata_Revision)(nil),           // 10: smartcore.traits.Metadata.Revision
	(*Metadata_Installation)(nil),       // 11: smartcore.traits.Metadata.Installation
	(*Metadata_NIC)(nil),                // 12: smartcore.traits.Metadata.NIC
	(*Metadata_Membership)(nil),         // 13: smartcore.traits.Metadata.Membership
	nil,                                 // 14: smartcore.traits.Metadata.MoreEntry
	nil,                                 // 15: smartcore.traits.Metadata.Appearance.MoreEntry
	nil,                                 // 16: smartcore.traits.Metadata.Location.MoreEntry
	nil,                                 // 17: smartcore.traits.Metadata.ID.MoreEntry
	(*Metadata_Product_Kind)(nil),       // 18: smartcore.traits.Metadata.Product.Kind
	nil,                                 // 19: smartcore.traits.Metadata.Product.MoreEntry
	nil,                                 // 20: smartcore.traits.Metadata.Revision.MoreEntry
	nil,                                 // 21: smartcore.traits.Metadata.Installation.MoreEntry
	nil,                                 // 22: smartcore.traits.Metadata.NIC.MoreEntry
	nil,                                 // 23: smartcore.traits.Metadata.Membership.MoreEntry
	nil,                                 // 24: smartcore.traits.TraitMetadata.MoreEntry
	(*PullMetadataResponse_Change)(nil), // 25: smartcore.traits.PullMetadataResponse.Change
	(*fieldmaskpb.FieldMask)(nil),       // 26: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),       // 27: google.protobuf.Timestamp
}
var file_traits_metadata_proto_depIdxs = []int32{
	2,  // 0: smartcore.traits.Metadata.traits:type_name -> smartcore.traits.TraitMetadata
	6,  // 1: smartcore.traits.Metadata.appearance:type_name -> smartcore.traits.Metadata.Appearance
	7,  // 2: smartcore.traits.Metadata.location:type_name -> smartcore.traits.Metadata.Location
	8,  // 3: smartcore.traits.Metadata.id:type_name -> smartcore.traits.Metadata.ID
	9,  // 4: smartcore.traits.Metadata.product:type_name -> smartcore.traits.Metadata.Product
	10, // 5: smartcore.traits.Metadata.revision:type_name -> smartcore.traits.Metadata.Revision
	11, // 6: smartcore.traits.Metadata.installation:type_name -> smartcore.traits.Metadata.Installation
	12, // 7: smartcore.traits.Metadata.nics:type_name -> smartcore.traits.Metadata.NIC
	13, // 8: smartcore.traits.Metadata.membership:type_name -> smartcore.traits.Metadata.Membership
	14, // 9: smartcore.traits.Metadata.more:type_name -> smartcore.traits.Metadata.MoreEntry
	24, // 10: smartcore.traits.TraitMetadata.more:type_name -> smartcore.traits.TraitMetadata.MoreEntry
	26, // 11: smartcore.traits.GetMetadataRequest.read_mask:type_name -> google.protobuf.FieldMask
	26, // 12: smartcore.traits.PullMetadataRequest.read_mask:type_name -> google.protobuf.FieldMask
	25, // 13: smartcore.traits.PullMetadataResponse.changes:type_name -> smartcore.traits.PullMetadataResponse.Change
	15, // 14: smartcore.traits.Metadata.Appearance.more:type_name -> smartcore.traits.Metadata.Appearance.MoreEntry
	16, // 15: smartcore.traits.Metadata.Location.more:type_name -> smartcore.traits.Metadata.Location.MoreEntry
	17, // 16: smartcore.traits.Metadata.ID.more:type_name -> smartcore.traits.Metadata.ID.MoreEntry
	18, // 17: smartcore.traits.Metadata.Product.kind:type_name -> smartcore.traits.Metadata.Product.Kind
	19, // 18: smartcore.traits.Metadata.Product.more:type_name -> smartcore.traits.Metadata.Product.MoreEntry
	27, // 19: smartcore.traits.Metadata.Revision.manufacture_date:type_name -> google.protobuf.Timestamp
	20, // 20: smartcore.traits.Metadata.Revision.more:type_name -> smartcore.traits.Metadata.Revision.MoreEntry
	27, // 21: smartcore.traits.Metadata.Installation.install_time:type_name -> google.protobuf.Timestamp
	27, // 22: smartcore.traits.Metadata.Installation.replace_time:type_name -> google.protobuf.Timestamp
	27, // 23: smartcore.traits.Metadata.Installation.label_time:type_name -> google.protobuf.Timestamp
	21, // 24: smartcore.traits.Metadata.Installation.more:type_name -> smartcore.traits.Metadata.Installation.MoreEntry
	0,  // 25: smartcore.traits.Metadata.NIC.assignment:type_name -> smartcore.traits.Metadata.NIC.Assignment
	22, // 26: smartcore.traits.Metadata.NIC.more:type_name -> smartcore.traits.Metadata.NIC.MoreEntry
	23, // 27: smartcore.traits.Metadata.Membership.more:type_name -> smartcore.traits.Metadata.Membership.MoreEntry
	1,  // 28: smartcore.traits.PullMetadataResponse.Change.metadata:type_name -> smartcore.traits.Metadata
	27, // 29: smartcore.traits.PullMetadataResponse.Change.change_time:type_name -> google.protobuf.Timestamp
	3,  // 30: smartcore.traits.MetadataApi.GetMetadata:input_type -> smartcore.traits.GetMetadataRequest
	4,  // 31: smartcore.traits.MetadataApi.PullMetadata:input_type -> smartcore.traits.PullMetadataRequest
	1,  // 32: smartcore.traits.MetadataApi.GetMetadata:output_type -> smartcore.traits.Metadata
	5,  // 33: smartcore.traits.MetadataApi.PullMetadata:output_type -> smartcore.traits.PullMetadataResponse
	32, // [32:34] is the sub-list for method output_type
	30, // [30:32] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_traits_metadata_proto_init() }
func file_traits_metadata_proto_init() {
	if File_traits_metadata_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_traits_metadata_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_metadata_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TraitMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_metadata_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_metadata_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PullMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_metadata_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PullMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_metadata_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Metadata_Appearance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_metadata_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Metadata_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_metadata_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Metadata_ID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_metadata_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Metadata_Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_metadata_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Metadata_Revision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_metadata_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Metadata_Installation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_metadata_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Metadata_NIC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_metadata_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Metadata_Membership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_metadata_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*Metadata_Product_Kind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_metadata_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*PullMetadataResponse_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_traits_metadata_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_traits_metadata_proto_goTypes,
		DependencyIndexes: file_traits_metadata_proto_depIdxs,
		EnumInfos:         file_traits_metadata_proto_enumTypes,
		MessageInfos:      file_traits_metadata_proto_msgTypes,
	}.Build()
	File_traits_metadata_proto = out.File
	file_traits_metadata_proto_rawDesc = nil
	file_traits_metadata_proto_goTypes = nil
	file_traits_metadata_proto_depIdxs = nil
}
