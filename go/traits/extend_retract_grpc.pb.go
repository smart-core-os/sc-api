// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: traits/extend_retract.proto

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExtendRetractApi_GetExtension_FullMethodName          = "/smartcore.traits.ExtendRetractApi/GetExtension"
	ExtendRetractApi_UpdateExtension_FullMethodName       = "/smartcore.traits.ExtendRetractApi/UpdateExtension"
	ExtendRetractApi_Stop_FullMethodName                  = "/smartcore.traits.ExtendRetractApi/Stop"
	ExtendRetractApi_CreateExtensionPreset_FullMethodName = "/smartcore.traits.ExtendRetractApi/CreateExtensionPreset"
	ExtendRetractApi_PullExtensions_FullMethodName        = "/smartcore.traits.ExtendRetractApi/PullExtensions"
)

// ExtendRetractApiClient is the client API for ExtendRetractApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Applicable to devices that can be extended or retracted. Like a tv mount or adjustable desk
type ExtendRetractApiClient interface {
	// Set the target state for the device
	GetExtension(ctx context.Context, in *GetExtensionRequest, opts ...grpc.CallOption) (*Extension, error)
	// Set the target state for the device
	UpdateExtension(ctx context.Context, in *UpdateExtensionRequest, opts ...grpc.CallOption) (*Extension, error)
	// Stop the device if it is extending or retracting, returns the current known state after stopping.
	Stop(ctx context.Context, in *ExtendRetractStopRequest, opts ...grpc.CallOption) (*Extension, error)
	// Create a preset for the extension. If no preset extension value is specified then use the current position
	CreateExtensionPreset(ctx context.Context, in *CreateExtensionPresetRequest, opts ...grpc.CallOption) (*ExtensionPreset, error)
	// Get notified of changes to the OnOffState of a device
	PullExtensions(ctx context.Context, in *PullExtensionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullExtensionsResponse], error)
}

type extendRetractApiClient struct {
	cc grpc.ClientConnInterface
}

func NewExtendRetractApiClient(cc grpc.ClientConnInterface) ExtendRetractApiClient {
	return &extendRetractApiClient{cc}
}

func (c *extendRetractApiClient) GetExtension(ctx context.Context, in *GetExtensionRequest, opts ...grpc.CallOption) (*Extension, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Extension)
	err := c.cc.Invoke(ctx, ExtendRetractApi_GetExtension_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extendRetractApiClient) UpdateExtension(ctx context.Context, in *UpdateExtensionRequest, opts ...grpc.CallOption) (*Extension, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Extension)
	err := c.cc.Invoke(ctx, ExtendRetractApi_UpdateExtension_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extendRetractApiClient) Stop(ctx context.Context, in *ExtendRetractStopRequest, opts ...grpc.CallOption) (*Extension, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Extension)
	err := c.cc.Invoke(ctx, ExtendRetractApi_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extendRetractApiClient) CreateExtensionPreset(ctx context.Context, in *CreateExtensionPresetRequest, opts ...grpc.CallOption) (*ExtensionPreset, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtensionPreset)
	err := c.cc.Invoke(ctx, ExtendRetractApi_CreateExtensionPreset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extendRetractApiClient) PullExtensions(ctx context.Context, in *PullExtensionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullExtensionsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ExtendRetractApi_ServiceDesc.Streams[0], ExtendRetractApi_PullExtensions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullExtensionsRequest, PullExtensionsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExtendRetractApi_PullExtensionsClient = grpc.ServerStreamingClient[PullExtensionsResponse]

// ExtendRetractApiServer is the server API for ExtendRetractApi service.
// All implementations must embed UnimplementedExtendRetractApiServer
// for forward compatibility.
//
// Applicable to devices that can be extended or retracted. Like a tv mount or adjustable desk
type ExtendRetractApiServer interface {
	// Set the target state for the device
	GetExtension(context.Context, *GetExtensionRequest) (*Extension, error)
	// Set the target state for the device
	UpdateExtension(context.Context, *UpdateExtensionRequest) (*Extension, error)
	// Stop the device if it is extending or retracting, returns the current known state after stopping.
	Stop(context.Context, *ExtendRetractStopRequest) (*Extension, error)
	// Create a preset for the extension. If no preset extension value is specified then use the current position
	CreateExtensionPreset(context.Context, *CreateExtensionPresetRequest) (*ExtensionPreset, error)
	// Get notified of changes to the OnOffState of a device
	PullExtensions(*PullExtensionsRequest, grpc.ServerStreamingServer[PullExtensionsResponse]) error
	mustEmbedUnimplementedExtendRetractApiServer()
}

// UnimplementedExtendRetractApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExtendRetractApiServer struct{}

func (UnimplementedExtendRetractApiServer) GetExtension(context.Context, *GetExtensionRequest) (*Extension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtension not implemented")
}
func (UnimplementedExtendRetractApiServer) UpdateExtension(context.Context, *UpdateExtensionRequest) (*Extension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExtension not implemented")
}
func (UnimplementedExtendRetractApiServer) Stop(context.Context, *ExtendRetractStopRequest) (*Extension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedExtendRetractApiServer) CreateExtensionPreset(context.Context, *CreateExtensionPresetRequest) (*ExtensionPreset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExtensionPreset not implemented")
}
func (UnimplementedExtendRetractApiServer) PullExtensions(*PullExtensionsRequest, grpc.ServerStreamingServer[PullExtensionsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullExtensions not implemented")
}
func (UnimplementedExtendRetractApiServer) mustEmbedUnimplementedExtendRetractApiServer() {}
func (UnimplementedExtendRetractApiServer) testEmbeddedByValue()                          {}

// UnsafeExtendRetractApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExtendRetractApiServer will
// result in compilation errors.
type UnsafeExtendRetractApiServer interface {
	mustEmbedUnimplementedExtendRetractApiServer()
}

func RegisterExtendRetractApiServer(s grpc.ServiceRegistrar, srv ExtendRetractApiServer) {
	// If the following call pancis, it indicates UnimplementedExtendRetractApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExtendRetractApi_ServiceDesc, srv)
}

func _ExtendRetractApi_GetExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtendRetractApiServer).GetExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtendRetractApi_GetExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtendRetractApiServer).GetExtension(ctx, req.(*GetExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtendRetractApi_UpdateExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtendRetractApiServer).UpdateExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtendRetractApi_UpdateExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtendRetractApiServer).UpdateExtension(ctx, req.(*UpdateExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtendRetractApi_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendRetractStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtendRetractApiServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtendRetractApi_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtendRetractApiServer).Stop(ctx, req.(*ExtendRetractStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtendRetractApi_CreateExtensionPreset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExtensionPresetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtendRetractApiServer).CreateExtensionPreset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtendRetractApi_CreateExtensionPreset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtendRetractApiServer).CreateExtensionPreset(ctx, req.(*CreateExtensionPresetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtendRetractApi_PullExtensions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullExtensionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExtendRetractApiServer).PullExtensions(m, &grpc.GenericServerStream[PullExtensionsRequest, PullExtensionsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ExtendRetractApi_PullExtensionsServer = grpc.ServerStreamingServer[PullExtensionsResponse]

// ExtendRetractApi_ServiceDesc is the grpc.ServiceDesc for ExtendRetractApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExtendRetractApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.ExtendRetractApi",
	HandlerType: (*ExtendRetractApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExtension",
			Handler:    _ExtendRetractApi_GetExtension_Handler,
		},
		{
			MethodName: "UpdateExtension",
			Handler:    _ExtendRetractApi_UpdateExtension_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _ExtendRetractApi_Stop_Handler,
		},
		{
			MethodName: "CreateExtensionPreset",
			Handler:    _ExtendRetractApi_CreateExtensionPreset_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullExtensions",
			Handler:       _ExtendRetractApi_PullExtensions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/extend_retract.proto",
}

const (
	ExtendRetractInfo_DescribeExtension_FullMethodName = "/smartcore.traits.ExtendRetractInfo/DescribeExtension"
)

// ExtendRetractInfoClient is the client API for ExtendRetractInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the capabilities of a specific named device with respect to this trait.
type ExtendRetractInfoClient interface {
	// Get information about how a named device implements Extension features
	DescribeExtension(ctx context.Context, in *DescribeExtensionRequest, opts ...grpc.CallOption) (*ExtensionSupport, error)
}

type extendRetractInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewExtendRetractInfoClient(cc grpc.ClientConnInterface) ExtendRetractInfoClient {
	return &extendRetractInfoClient{cc}
}

func (c *extendRetractInfoClient) DescribeExtension(ctx context.Context, in *DescribeExtensionRequest, opts ...grpc.CallOption) (*ExtensionSupport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtensionSupport)
	err := c.cc.Invoke(ctx, ExtendRetractInfo_DescribeExtension_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExtendRetractInfoServer is the server API for ExtendRetractInfo service.
// All implementations must embed UnimplementedExtendRetractInfoServer
// for forward compatibility.
//
// Describes the capabilities of a specific named device with respect to this trait.
type ExtendRetractInfoServer interface {
	// Get information about how a named device implements Extension features
	DescribeExtension(context.Context, *DescribeExtensionRequest) (*ExtensionSupport, error)
	mustEmbedUnimplementedExtendRetractInfoServer()
}

// UnimplementedExtendRetractInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExtendRetractInfoServer struct{}

func (UnimplementedExtendRetractInfoServer) DescribeExtension(context.Context, *DescribeExtensionRequest) (*ExtensionSupport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeExtension not implemented")
}
func (UnimplementedExtendRetractInfoServer) mustEmbedUnimplementedExtendRetractInfoServer() {}
func (UnimplementedExtendRetractInfoServer) testEmbeddedByValue()                           {}

// UnsafeExtendRetractInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExtendRetractInfoServer will
// result in compilation errors.
type UnsafeExtendRetractInfoServer interface {
	mustEmbedUnimplementedExtendRetractInfoServer()
}

func RegisterExtendRetractInfoServer(s grpc.ServiceRegistrar, srv ExtendRetractInfoServer) {
	// If the following call pancis, it indicates UnimplementedExtendRetractInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExtendRetractInfo_ServiceDesc, srv)
}

func _ExtendRetractInfo_DescribeExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtendRetractInfoServer).DescribeExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtendRetractInfo_DescribeExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtendRetractInfoServer).DescribeExtension(ctx, req.(*DescribeExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExtendRetractInfo_ServiceDesc is the grpc.ServiceDesc for ExtendRetractInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExtendRetractInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.ExtendRetractInfo",
	HandlerType: (*ExtendRetractInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeExtension",
			Handler:    _ExtendRetractInfo_DescribeExtension_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "traits/extend_retract.proto",
}
