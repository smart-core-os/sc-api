// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.1
// source: traits/ptz.proto

package traits

import (
	types "github.com/smart-core-os/sc-api/go/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The current or intended state for the device
type Ptz struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current position of the PTZ device (if known)
	Position *PtzPosition `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	// The current motion of the PTZ device (if known)
	Movement *PtzMovement `protobuf:"bytes,2,opt,name=movement,proto3" json:"movement,omitempty"`
	// The current preset selected for the device (if known)
	Preset string `protobuf:"bytes,3,opt,name=preset,proto3" json:"preset,omitempty"`
	// The speed the preset should be applied. 0 for 'use device default'
	PresetSpeed int32 `protobuf:"varint,4,opt,name=preset_speed,json=presetSpeed,proto3" json:"preset_speed,omitempty"`
}

func (x *Ptz) Reset() {
	*x = Ptz{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_ptz_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ptz) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ptz) ProtoMessage() {}

func (x *Ptz) ProtoReflect() protoreflect.Message {
	mi := &file_traits_ptz_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ptz.ProtoReflect.Descriptor instead.
func (*Ptz) Descriptor() ([]byte, []int) {
	return file_traits_ptz_proto_rawDescGZIP(), []int{0}
}

func (x *Ptz) GetPosition() *PtzPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Ptz) GetMovement() *PtzMovement {
	if x != nil {
		return x.Movement
	}
	return nil
}

func (x *Ptz) GetPreset() string {
	if x != nil {
		return x.Preset
	}
	return ""
}

func (x *Ptz) GetPresetSpeed() int32 {
	if x != nil {
		return x.PresetSpeed
	}
	return 0
}

// Defines a value for the pan, tilt, and zoom of the device. This vector can represent a movement in a particular
// direction or a final position to aim for. If used for movement then the values should be positive or negative to
// represent the direction of movement. For absolute values the bounds attribute of the device are used as a guide.
//
// All values are relative to the focus of the vector in the real world. For example for a camera, to move right means
// that the image captured by the camera show more on the right and less on the left of the image.
type PtzVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// left/right direction for movement or position. Positive values mean right, negative mean left when moving
	Pan float32 `protobuf:"fixed32,1,opt,name=pan,proto3" json:"pan,omitempty"`
	// up/down direction for movement or position. Positive values mean up, negative mean down when moving
	Tilt float32 `protobuf:"fixed32,2,opt,name=tilt,proto3" json:"tilt,omitempty"`
	// in/out direction for movement or zoom level. Positive values mean in, negative mean out when moving
	Zoom float32 `protobuf:"fixed32,3,opt,name=zoom,proto3" json:"zoom,omitempty"`
}

func (x *PtzVector) Reset() {
	*x = PtzVector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_ptz_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PtzVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PtzVector) ProtoMessage() {}

func (x *PtzVector) ProtoReflect() protoreflect.Message {
	mi := &file_traits_ptz_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PtzVector.ProtoReflect.Descriptor instead.
func (*PtzVector) Descriptor() ([]byte, []int) {
	return file_traits_ptz_proto_rawDescGZIP(), []int{1}
}

func (x *PtzVector) GetPan() float32 {
	if x != nil {
		return x.Pan
	}
	return 0
}

func (x *PtzVector) GetTilt() float32 {
	if x != nil {
		return x.Tilt
	}
	return 0
}

func (x *PtzVector) GetZoom() float32 {
	if x != nil {
		return x.Zoom
	}
	return 0
}

// The minimum and maximum values each of the PTZ vector axes can take.
type PtzBounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min *PtzVector `protobuf:"bytes,1,opt,name=min,proto3" json:"min,omitempty"`
	Max *PtzVector `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *PtzBounds) Reset() {
	*x = PtzBounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_ptz_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PtzBounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PtzBounds) ProtoMessage() {}

func (x *PtzBounds) ProtoReflect() protoreflect.Message {
	mi := &file_traits_ptz_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PtzBounds.ProtoReflect.Descriptor instead.
func (*PtzBounds) Descriptor() ([]byte, []int) {
	return file_traits_ptz_proto_rawDescGZIP(), []int{2}
}

func (x *PtzBounds) GetMin() *PtzVector {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *PtzBounds) GetMax() *PtzVector {
	if x != nil {
		return x.Max
	}
	return nil
}

// A description of the movement for the PTZ device
type PtzMovement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which direction are we moving. Only the sign of the dimensions of the vector are used to denote direction of
	// movement
	Direction *PtzVector `protobuf:"bytes,1,opt,name=direction,proto3" json:"direction,omitempty"`
	// The speed at which the PTZ device should move. If not specified the device may ramp speed on its own
	Speed int32 `protobuf:"varint,2,opt,name=speed,proto3" json:"speed,omitempty"`
	// How the speed changes or should change over time. On write only duration should be set.
	SpeedTween *types.Tween `protobuf:"bytes,3,opt,name=speed_tween,json=speedTween,proto3" json:"speed_tween,omitempty"`
	// Read-only, the target speed value after a transition
	TargetSpeed int32 `protobuf:"varint,4,opt,name=target_speed,json=targetSpeed,proto3" json:"target_speed,omitempty"`
}

func (x *PtzMovement) Reset() {
	*x = PtzMovement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_ptz_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PtzMovement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PtzMovement) ProtoMessage() {}

func (x *PtzMovement) ProtoReflect() protoreflect.Message {
	mi := &file_traits_ptz_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PtzMovement.ProtoReflect.Descriptor instead.
func (*PtzMovement) Descriptor() ([]byte, []int) {
	return file_traits_ptz_proto_rawDescGZIP(), []int{3}
}

func (x *PtzMovement) GetDirection() *PtzVector {
	if x != nil {
		return x.Direction
	}
	return nil
}

func (x *PtzMovement) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *PtzMovement) GetSpeedTween() *types.Tween {
	if x != nil {
		return x.SpeedTween
	}
	return nil
}

func (x *PtzMovement) GetTargetSpeed() int32 {
	if x != nil {
		return x.TargetSpeed
	}
	return 0
}

// A description of the current position of the PTZ device.
type PtzPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current position.
	Position *PtzVector `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	// How the position changes or should change over time. On write only duration should be set.
	Tween *types.Tween `protobuf:"bytes,2,opt,name=tween,proto3" json:"tween,omitempty"`
	// The target position that will be reached after the tween duration.
	TargetPosition *PtzVector `protobuf:"bytes,3,opt,name=target_position,json=targetPosition,proto3" json:"target_position,omitempty"`
}

func (x *PtzPosition) Reset() {
	*x = PtzPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_ptz_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PtzPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PtzPosition) ProtoMessage() {}

func (x *PtzPosition) ProtoReflect() protoreflect.Message {
	mi := &file_traits_ptz_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PtzPosition.ProtoReflect.Descriptor instead.
func (*PtzPosition) Descriptor() ([]byte, []int) {
	return file_traits_ptz_proto_rawDescGZIP(), []int{4}
}

func (x *PtzPosition) GetPosition() *PtzVector {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *PtzPosition) GetTween() *types.Tween {
	if x != nil {
		return x.Tween
	}
	return nil
}

func (x *PtzPosition) GetTargetPosition() *PtzVector {
	if x != nil {
		return x.TargetPosition
	}
	return nil
}

// Describes a preset that may be configured on the device
type PtzPreset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the preset, to be used for recall.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Official human readable name for the preset
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Optional position of the preset
	Position *PtzVector `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	// Can this preset be stored via the api
	Writable bool `protobuf:"varint,5,opt,name=writable,proto3" json:"writable,omitempty"`
}

func (x *PtzPreset) Reset() {
	*x = PtzPreset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_ptz_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PtzPreset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PtzPreset) ProtoMessage() {}

func (x *PtzPreset) ProtoReflect() protoreflect.Message {
	mi := &file_traits_ptz_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PtzPreset.ProtoReflect.Descriptor instead.
func (*PtzPreset) Descriptor() ([]byte, []int) {
	return file_traits_ptz_proto_rawDescGZIP(), []int{5}
}

func (x *PtzPreset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PtzPreset) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PtzPreset) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PtzPreset) GetPosition() *PtzVector {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *PtzPreset) GetWritable() bool {
	if x != nil {
		return x.Writable
	}
	return false
}

// PtzSupport describes the capabilities of devices implementing this trait
type PtzSupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How a named device supports read/write/pull apis
	ResourceSupport *types.ResourceSupport `protobuf:"bytes,1,opt,name=resource_support,json=resourceSupport,proto3" json:"resource_support,omitempty"`
	// Can we ask the device to move to a specific position
	SupportsPosition bool `protobuf:"varint,2,opt,name=supports_position,json=supportsPosition,proto3" json:"supports_position,omitempty"`
	// Can we move the device without a target position in mind
	SupportsMovement bool `protobuf:"varint,3,opt,name=supports_movement,json=supportsMovement,proto3" json:"supports_movement,omitempty"`
	// A list of presets that the device has configured. If the list is empty and supports_custom_presets is false then
	// the device doesn't support presets
	Presets []*PtzPreset `protobuf:"bytes,4,rep,name=presets,proto3" json:"presets,omitempty"`
	// If true, custom preset names can be used to store ptz positions. If false only writable presets can be updated.
	SupportsCustomPresets bool `protobuf:"varint,5,opt,name=supports_custom_presets,json=supportsCustomPresets,proto3" json:"supports_custom_presets,omitempty"`
}

func (x *PtzSupport) Reset() {
	*x = PtzSupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_ptz_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PtzSupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PtzSupport) ProtoMessage() {}

func (x *PtzSupport) ProtoReflect() protoreflect.Message {
	mi := &file_traits_ptz_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PtzSupport.ProtoReflect.Descriptor instead.
func (*PtzSupport) Descriptor() ([]byte, []int) {
	return file_traits_ptz_proto_rawDescGZIP(), []int{6}
}

func (x *PtzSupport) GetResourceSupport() *types.ResourceSupport {
	if x != nil {
		return x.ResourceSupport
	}
	return nil
}

func (x *PtzSupport) GetSupportsPosition() bool {
	if x != nil {
		return x.SupportsPosition
	}
	return false
}

func (x *PtzSupport) GetSupportsMovement() bool {
	if x != nil {
		return x.SupportsMovement
	}
	return false
}

func (x *PtzSupport) GetPresets() []*PtzPreset {
	if x != nil {
		return x.Presets
	}
	return nil
}

func (x *PtzSupport) GetSupportsCustomPresets() bool {
	if x != nil {
		return x.SupportsCustomPresets
	}
	return false
}

type GetPtzRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device to request state from
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// which fields do we want to fetch
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
}

func (x *GetPtzRequest) Reset() {
	*x = GetPtzRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_ptz_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPtzRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPtzRequest) ProtoMessage() {}

func (x *GetPtzRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_ptz_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPtzRequest.ProtoReflect.Descriptor instead.
func (*GetPtzRequest) Descriptor() ([]byte, []int) {
	return file_traits_ptz_proto_rawDescGZIP(), []int{7}
}

func (x *GetPtzRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetPtzRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

type UpdatePtzRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name of the device to update the state of
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The new state
	State *Ptz `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	// The fields we are intending to update relative to the Ptz
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdatePtzRequest) Reset() {
	*x = UpdatePtzRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_ptz_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePtzRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePtzRequest) ProtoMessage() {}

func (x *UpdatePtzRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_ptz_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePtzRequest.ProtoReflect.Descriptor instead.
func (*UpdatePtzRequest) Descriptor() ([]byte, []int) {
	return file_traits_ptz_proto_rawDescGZIP(), []int{8}
}

func (x *UpdatePtzRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePtzRequest) GetState() *Ptz {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *UpdatePtzRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type StopPtzRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name of the device to stop
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StopPtzRequest) Reset() {
	*x = StopPtzRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_ptz_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopPtzRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopPtzRequest) ProtoMessage() {}

func (x *StopPtzRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_ptz_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopPtzRequest.ProtoReflect.Descriptor instead.
func (*StopPtzRequest) Descriptor() ([]byte, []int) {
	return file_traits_ptz_proto_rawDescGZIP(), []int{9}
}

func (x *StopPtzRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreatePtzPresetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name of the device to update the state of
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Details for the preset
	Preset *PtzPreset `protobuf:"bytes,2,opt,name=preset,proto3" json:"preset,omitempty"`
}

func (x *CreatePtzPresetRequest) Reset() {
	*x = CreatePtzPresetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_ptz_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePtzPresetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePtzPresetRequest) ProtoMessage() {}

func (x *CreatePtzPresetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_ptz_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePtzPresetRequest.ProtoReflect.Descriptor instead.
func (*CreatePtzPresetRequest) Descriptor() ([]byte, []int) {
	return file_traits_ptz_proto_rawDescGZIP(), []int{10}
}

func (x *CreatePtzPresetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePtzPresetRequest) GetPreset() *PtzPreset {
	if x != nil {
		return x.Preset
	}
	return nil
}

type PullPtzRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The device we want to subscribe to
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The state fields to fetch
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// When true the device will only send changes to the resource value.
	// The default behaviour is to send the current value immediately followed by any updates as they happen.
	UpdatesOnly bool `protobuf:"varint,3,opt,name=updates_only,json=updatesOnly,proto3" json:"updates_only,omitempty"`
}

func (x *PullPtzRequest) Reset() {
	*x = PullPtzRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_ptz_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullPtzRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullPtzRequest) ProtoMessage() {}

func (x *PullPtzRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_ptz_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullPtzRequest.ProtoReflect.Descriptor instead.
func (*PullPtzRequest) Descriptor() ([]byte, []int) {
	return file_traits_ptz_proto_rawDescGZIP(), []int{11}
}

func (x *PullPtzRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullPtzRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *PullPtzRequest) GetUpdatesOnly() bool {
	if x != nil {
		return x.UpdatesOnly
	}
	return false
}

type PullPtzResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes []*PullPtzResponse_Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *PullPtzResponse) Reset() {
	*x = PullPtzResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_ptz_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullPtzResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullPtzResponse) ProtoMessage() {}

func (x *PullPtzResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traits_ptz_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullPtzResponse.ProtoReflect.Descriptor instead.
func (*PullPtzResponse) Descriptor() ([]byte, []int) {
	return file_traits_ptz_proto_rawDescGZIP(), []int{12}
}

func (x *PullPtzResponse) GetChanges() []*PullPtzResponse_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

type DescribePtzRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DescribePtzRequest) Reset() {
	*x = DescribePtzRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_ptz_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePtzRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePtzRequest) ProtoMessage() {}

func (x *DescribePtzRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_ptz_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePtzRequest.ProtoReflect.Descriptor instead.
func (*DescribePtzRequest) Descriptor() ([]byte, []int) {
	return file_traits_ptz_proto_rawDescGZIP(), []int{13}
}

func (x *DescribePtzRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PullPtzResponse_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name for the device that issued the change
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// when the change occurred
	ChangeTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
	// The updated state, should be merged with any known state
	Ptz *Ptz `protobuf:"bytes,3,opt,name=ptz,proto3" json:"ptz,omitempty"`
}

func (x *PullPtzResponse_Change) Reset() {
	*x = PullPtzResponse_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_ptz_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullPtzResponse_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullPtzResponse_Change) ProtoMessage() {}

func (x *PullPtzResponse_Change) ProtoReflect() protoreflect.Message {
	mi := &file_traits_ptz_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullPtzResponse_Change.ProtoReflect.Descriptor instead.
func (*PullPtzResponse_Change) Descriptor() ([]byte, []int) {
	return file_traits_ptz_proto_rawDescGZIP(), []int{12, 0}
}

func (x *PullPtzResponse_Change) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullPtzResponse_Change) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

func (x *PullPtzResponse_Change) GetPtz() *Ptz {
	if x != nil {
		return x.Ptz
	}
	return nil
}

var File_traits_ptz_proto protoreflect.FileDescriptor

var file_traits_ptz_proto_rawDesc = []byte{
	0x0a, 0x10, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2f, 0x70, 0x74, 0x7a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x10, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x73, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x01, 0x0a,
	0x03, 0x50, 0x74, 0x7a, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x74, 0x7a, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x74, 0x7a, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x08, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x22, 0x45, 0x0a, 0x09, 0x50, 0x74, 0x7a, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x70, 0x61, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x04, 0x74, 0x69, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6f, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x7a, 0x6f, 0x6f, 0x6d, 0x22, 0x69, 0x0a, 0x09,
	0x50, 0x74, 0x7a, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x03, 0x6d, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x74, 0x7a, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x74, 0x7a, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0xba, 0x01, 0x0a, 0x0b, 0x50, 0x74, 0x7a, 0x4d,
	0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x74,
	0x7a, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x54, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64, 0x54, 0x77, 0x65, 0x65,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x0b, 0x50, 0x74, 0x7a, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x74, 0x7a, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x05, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54,
	0x77, 0x65, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x74, 0x7a, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xac, 0x01, 0x0a, 0x09, 0x50, 0x74, 0x7a, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,
	0x2e, 0x50, 0x74, 0x7a, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0xa2, 0x02, 0x0a, 0x0a, 0x50, 0x74, 0x7a, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x4b, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x6f,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x74, 0x7a, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x52, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a,
	0x17, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x73, 0x22, 0x5c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x74, 0x7a, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x74,
	0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50,
	0x74, 0x7a, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x24, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x74,
	0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x74, 0x7a, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x74,
	0x7a, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x22,
	0x80, 0x01, 0x0a, 0x0e, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x74, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x6e,
	0x6c, 0x79, 0x22, 0xda, 0x01, 0x0a, 0x0f, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x74, 0x7a, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x50,
	0x74, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x82, 0x01, 0x0a, 0x06, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x03, 0x70, 0x74, 0x7a, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x74, 0x7a, 0x52, 0x03, 0x70, 0x74, 0x7a, 0x22,
	0x28, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x74, 0x7a, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0xfc, 0x02, 0x0a, 0x06, 0x50, 0x74,
	0x7a, 0x41, 0x70, 0x69, 0x12, 0x40, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x50, 0x74, 0x7a, 0x12, 0x1f,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x74, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x73, 0x2e, 0x50, 0x74, 0x7a, 0x12, 0x46, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x74, 0x7a, 0x12, 0x22, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x74, 0x7a,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x74, 0x7a, 0x12, 0x3f,
	0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x74,
	0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x74, 0x7a, 0x12,
	0x55, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12,
	0x28, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x74, 0x7a, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x74, 0x7a,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x07, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x74,
	0x7a, 0x12, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x74, 0x7a, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x74, 0x7a, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0x5c, 0x0a, 0x07, 0x50, 0x74, 0x7a, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50,
	0x74, 0x7a, 0x12, 0x24, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x74,
	0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x74, 0x7a, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x73, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x42, 0x08,
	0x50, 0x74, 0x7a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x2d, 0x63, 0x6f, 0x72,
	0x65, 0x2d, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x73, 0xaa, 0x02, 0x10, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0xca, 0x02, 0x10, 0x53, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x5c, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_traits_ptz_proto_rawDescOnce sync.Once
	file_traits_ptz_proto_rawDescData = file_traits_ptz_proto_rawDesc
)

func file_traits_ptz_proto_rawDescGZIP() []byte {
	file_traits_ptz_proto_rawDescOnce.Do(func() {
		file_traits_ptz_proto_rawDescData = protoimpl.X.CompressGZIP(file_traits_ptz_proto_rawDescData)
	})
	return file_traits_ptz_proto_rawDescData
}

var file_traits_ptz_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_traits_ptz_proto_goTypes = []any{
	(*Ptz)(nil),                    // 0: smartcore.traits.Ptz
	(*PtzVector)(nil),              // 1: smartcore.traits.PtzVector
	(*PtzBounds)(nil),              // 2: smartcore.traits.PtzBounds
	(*PtzMovement)(nil),            // 3: smartcore.traits.PtzMovement
	(*PtzPosition)(nil),            // 4: smartcore.traits.PtzPosition
	(*PtzPreset)(nil),              // 5: smartcore.traits.PtzPreset
	(*PtzSupport)(nil),             // 6: smartcore.traits.PtzSupport
	(*GetPtzRequest)(nil),          // 7: smartcore.traits.GetPtzRequest
	(*UpdatePtzRequest)(nil),       // 8: smartcore.traits.UpdatePtzRequest
	(*StopPtzRequest)(nil),         // 9: smartcore.traits.StopPtzRequest
	(*CreatePtzPresetRequest)(nil), // 10: smartcore.traits.CreatePtzPresetRequest
	(*PullPtzRequest)(nil),         // 11: smartcore.traits.PullPtzRequest
	(*PullPtzResponse)(nil),        // 12: smartcore.traits.PullPtzResponse
	(*DescribePtzRequest)(nil),     // 13: smartcore.traits.DescribePtzRequest
	(*PullPtzResponse_Change)(nil), // 14: smartcore.traits.PullPtzResponse.Change
	(*types.Tween)(nil),            // 15: smartcore.types.Tween
	(*types.ResourceSupport)(nil),  // 16: smartcore.types.ResourceSupport
	(*fieldmaskpb.FieldMask)(nil),  // 17: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),  // 18: google.protobuf.Timestamp
}
var file_traits_ptz_proto_depIdxs = []int32{
	4,  // 0: smartcore.traits.Ptz.position:type_name -> smartcore.traits.PtzPosition
	3,  // 1: smartcore.traits.Ptz.movement:type_name -> smartcore.traits.PtzMovement
	1,  // 2: smartcore.traits.PtzBounds.min:type_name -> smartcore.traits.PtzVector
	1,  // 3: smartcore.traits.PtzBounds.max:type_name -> smartcore.traits.PtzVector
	1,  // 4: smartcore.traits.PtzMovement.direction:type_name -> smartcore.traits.PtzVector
	15, // 5: smartcore.traits.PtzMovement.speed_tween:type_name -> smartcore.types.Tween
	1,  // 6: smartcore.traits.PtzPosition.position:type_name -> smartcore.traits.PtzVector
	15, // 7: smartcore.traits.PtzPosition.tween:type_name -> smartcore.types.Tween
	1,  // 8: smartcore.traits.PtzPosition.target_position:type_name -> smartcore.traits.PtzVector
	1,  // 9: smartcore.traits.PtzPreset.position:type_name -> smartcore.traits.PtzVector
	16, // 10: smartcore.traits.PtzSupport.resource_support:type_name -> smartcore.types.ResourceSupport
	5,  // 11: smartcore.traits.PtzSupport.presets:type_name -> smartcore.traits.PtzPreset
	17, // 12: smartcore.traits.GetPtzRequest.read_mask:type_name -> google.protobuf.FieldMask
	0,  // 13: smartcore.traits.UpdatePtzRequest.state:type_name -> smartcore.traits.Ptz
	17, // 14: smartcore.traits.UpdatePtzRequest.update_mask:type_name -> google.protobuf.FieldMask
	5,  // 15: smartcore.traits.CreatePtzPresetRequest.preset:type_name -> smartcore.traits.PtzPreset
	17, // 16: smartcore.traits.PullPtzRequest.read_mask:type_name -> google.protobuf.FieldMask
	14, // 17: smartcore.traits.PullPtzResponse.changes:type_name -> smartcore.traits.PullPtzResponse.Change
	18, // 18: smartcore.traits.PullPtzResponse.Change.change_time:type_name -> google.protobuf.Timestamp
	0,  // 19: smartcore.traits.PullPtzResponse.Change.ptz:type_name -> smartcore.traits.Ptz
	7,  // 20: smartcore.traits.PtzApi.GetPtz:input_type -> smartcore.traits.GetPtzRequest
	8,  // 21: smartcore.traits.PtzApi.UpdatePtz:input_type -> smartcore.traits.UpdatePtzRequest
	9,  // 22: smartcore.traits.PtzApi.Stop:input_type -> smartcore.traits.StopPtzRequest
	10, // 23: smartcore.traits.PtzApi.CreatePreset:input_type -> smartcore.traits.CreatePtzPresetRequest
	11, // 24: smartcore.traits.PtzApi.PullPtz:input_type -> smartcore.traits.PullPtzRequest
	13, // 25: smartcore.traits.PtzInfo.DescribePtz:input_type -> smartcore.traits.DescribePtzRequest
	0,  // 26: smartcore.traits.PtzApi.GetPtz:output_type -> smartcore.traits.Ptz
	0,  // 27: smartcore.traits.PtzApi.UpdatePtz:output_type -> smartcore.traits.Ptz
	0,  // 28: smartcore.traits.PtzApi.Stop:output_type -> smartcore.traits.Ptz
	5,  // 29: smartcore.traits.PtzApi.CreatePreset:output_type -> smartcore.traits.PtzPreset
	12, // 30: smartcore.traits.PtzApi.PullPtz:output_type -> smartcore.traits.PullPtzResponse
	6,  // 31: smartcore.traits.PtzInfo.DescribePtz:output_type -> smartcore.traits.PtzSupport
	26, // [26:32] is the sub-list for method output_type
	20, // [20:26] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_traits_ptz_proto_init() }
func file_traits_ptz_proto_init() {
	if File_traits_ptz_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_traits_ptz_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Ptz); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_ptz_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PtzVector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_ptz_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PtzBounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_ptz_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PtzMovement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_ptz_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PtzPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_ptz_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*PtzPreset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_ptz_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*PtzSupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_ptz_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetPtzRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_ptz_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePtzRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_ptz_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*StopPtzRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_ptz_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePtzPresetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_ptz_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*PullPtzRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_ptz_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*PullPtzResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_ptz_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*DescribePtzRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_ptz_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*PullPtzResponse_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_traits_ptz_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_traits_ptz_proto_goTypes,
		DependencyIndexes: file_traits_ptz_proto_depIdxs,
		MessageInfos:      file_traits_ptz_proto_msgTypes,
	}.Build()
	File_traits_ptz_proto = out.File
	file_traits_ptz_proto_rawDesc = nil
	file_traits_ptz_proto_goTypes = nil
	file_traits_ptz_proto_depIdxs = nil
}
