// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.2
// source: traits/publication.proto

package traits

import (
	types "github.com/smart-core-os/sc-api/go/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Receipt defines the possible acceptance states for downstream audiences of this publication.
type Publication_Audience_Receipt int32

const (
	Publication_Audience_RECEIPT_UNSPECIFIED Publication_Audience_Receipt = 0
	Publication_Audience_NO_SIGNAL           Publication_Audience_Receipt = 1
	Publication_Audience_ACCEPTED            Publication_Audience_Receipt = 2
	Publication_Audience_REJECTED            Publication_Audience_Receipt = 3
)

// Enum value maps for Publication_Audience_Receipt.
var (
	Publication_Audience_Receipt_name = map[int32]string{
		0: "RECEIPT_UNSPECIFIED",
		1: "NO_SIGNAL",
		2: "ACCEPTED",
		3: "REJECTED",
	}
	Publication_Audience_Receipt_value = map[string]int32{
		"RECEIPT_UNSPECIFIED": 0,
		"NO_SIGNAL":           1,
		"ACCEPTED":            2,
		"REJECTED":            3,
	}
)

func (x Publication_Audience_Receipt) Enum() *Publication_Audience_Receipt {
	p := new(Publication_Audience_Receipt)
	*p = x
	return p
}

func (x Publication_Audience_Receipt) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Publication_Audience_Receipt) Descriptor() protoreflect.EnumDescriptor {
	return file_traits_publication_proto_enumTypes[0].Descriptor()
}

func (Publication_Audience_Receipt) Type() protoreflect.EnumType {
	return &file_traits_publication_proto_enumTypes[0]
}

func (x Publication_Audience_Receipt) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Publication_Audience_Receipt.Descriptor instead.
func (Publication_Audience_Receipt) EnumDescriptor() ([]byte, []int) {
	return file_traits_publication_proto_rawDescGZIP(), []int{0, 0, 0}
}

// Publication describes some data that can be published.
// While the content of the data is undefined, the metadata about data is described.
// A publication can be intended for a specific audience, either a device or some other concept.
// The audience for a publication is able to acknowledge that publication, indicating they have received it.
type Publication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An identifier for this publication.
	// Will be unique within the context of the device managing the publications.
	// The ID does not change between publication versions.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// An opaque string used to distinguish between versions of the same publication.
	// Output only.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// The body of this publication.
	// Can be any sequence of bytes from plain text, to binary content, to a serialised proto message.
	// It can also be empty.
	Body []byte `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"` // todo: decide on a limit for the size of data, or document that it doesn't need one
	// An indication of who the publication is targeting.
	// Optional.
	// For example, if the publication represents configuration for a device, the audience would represent that device.
	Audience *Publication_Audience `protobuf:"bytes,4,opt,name=audience,proto3" json:"audience,omitempty"`
	// The time this version of the publication was published.
	// Output only.
	PublishTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=publish_time,json=publishTime,proto3" json:"publish_time,omitempty"`
	// An indication of format of the data in body.
	// Optional.
	// The use of a [Media Type](https://www.iana.org/assignments/media-types) is recommended, but any value recognised by
	// both the server and client is acceptable.
	MediaType string `protobuf:"bytes,6,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
}

func (x *Publication) Reset() {
	*x = Publication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_publication_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Publication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Publication) ProtoMessage() {}

func (x *Publication) ProtoReflect() protoreflect.Message {
	mi := &file_traits_publication_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Publication.ProtoReflect.Descriptor instead.
func (*Publication) Descriptor() ([]byte, []int) {
	return file_traits_publication_proto_rawDescGZIP(), []int{0}
}

func (x *Publication) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Publication) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Publication) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Publication) GetAudience() *Publication_Audience {
	if x != nil {
		return x.Audience
	}
	return nil
}

func (x *Publication) GetPublishTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishTime
	}
	return nil
}

func (x *Publication) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

type CreatePublicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The publication data to seed
	Publication *Publication `protobuf:"bytes,2,opt,name=publication,proto3" json:"publication,omitempty"`
}

func (x *CreatePublicationRequest) Reset() {
	*x = CreatePublicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_publication_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePublicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePublicationRequest) ProtoMessage() {}

func (x *CreatePublicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_publication_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePublicationRequest.ProtoReflect.Descriptor instead.
func (*CreatePublicationRequest) Descriptor() ([]byte, []int) {
	return file_traits_publication_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePublicationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePublicationRequest) GetPublication() *Publication {
	if x != nil {
		return x.Publication
	}
	return nil
}

type GetPublicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The id of the publication to retrieve
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Fields to fetch relative to the Publication type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// The version to retrieve.
	// Optional, if absent the latest version will be retrieved.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetPublicationRequest) Reset() {
	*x = GetPublicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_publication_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPublicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicationRequest) ProtoMessage() {}

func (x *GetPublicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_publication_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicationRequest.ProtoReflect.Descriptor instead.
func (*GetPublicationRequest) Descriptor() ([]byte, []int) {
	return file_traits_publication_proto_rawDescGZIP(), []int{2}
}

func (x *GetPublicationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetPublicationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetPublicationRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *GetPublicationRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type UpdatePublicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The publication to update.
	Publication *Publication `protobuf:"bytes,2,opt,name=publication,proto3" json:"publication,omitempty"`
	// Fields to update relative to the Publication type
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// If present, the update will fail if the version on the server does not match this version.
	// Populate with the latest known version on the client to avoid concurrent updates overriding each other
	// transparently.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *UpdatePublicationRequest) Reset() {
	*x = UpdatePublicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_publication_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePublicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePublicationRequest) ProtoMessage() {}

func (x *UpdatePublicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_publication_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePublicationRequest.ProtoReflect.Descriptor instead.
func (*UpdatePublicationRequest) Descriptor() ([]byte, []int) {
	return file_traits_publication_proto_rawDescGZIP(), []int{3}
}

func (x *UpdatePublicationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePublicationRequest) GetPublication() *Publication {
	if x != nil {
		return x.Publication
	}
	return nil
}

func (x *UpdatePublicationRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdatePublicationRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type DeletePublicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The publication id.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// If present, the delete will fail if the version on the server does not match this version.
	// Populate with the latest known version on the client to avoid concurrent updates overriding each other
	// transparently.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// If set to true, and no publication with the given id exists, the request will succeed but no action will
	// be taken.
	AllowMissing bool `protobuf:"varint,4,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *DeletePublicationRequest) Reset() {
	*x = DeletePublicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_publication_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePublicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePublicationRequest) ProtoMessage() {}

func (x *DeletePublicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_publication_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePublicationRequest.ProtoReflect.Descriptor instead.
func (*DeletePublicationRequest) Descriptor() ([]byte, []int) {
	return file_traits_publication_proto_rawDescGZIP(), []int{4}
}

func (x *DeletePublicationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeletePublicationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeletePublicationRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DeletePublicationRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

type PullPublicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The id of the publication to retrieve
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Fields to fetch relative to the Publication type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// When true the device will only send changes to the resource value.
	// The default behaviour is to send the current value immediately followed by any updates as they happen.
	UpdatesOnly bool `protobuf:"varint,4,opt,name=updates_only,json=updatesOnly,proto3" json:"updates_only,omitempty"`
}

func (x *PullPublicationRequest) Reset() {
	*x = PullPublicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_publication_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullPublicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullPublicationRequest) ProtoMessage() {}

func (x *PullPublicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_publication_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullPublicationRequest.ProtoReflect.Descriptor instead.
func (*PullPublicationRequest) Descriptor() ([]byte, []int) {
	return file_traits_publication_proto_rawDescGZIP(), []int{5}
}

func (x *PullPublicationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullPublicationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PullPublicationRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *PullPublicationRequest) GetUpdatesOnly() bool {
	if x != nil {
		return x.UpdatesOnly
	}
	return false
}

type PullPublicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Changes since the last message.
	Changes []*PullPublicationResponse_Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *PullPublicationResponse) Reset() {
	*x = PullPublicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_publication_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullPublicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullPublicationResponse) ProtoMessage() {}

func (x *PullPublicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traits_publication_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullPublicationResponse.ProtoReflect.Descriptor instead.
func (*PullPublicationResponse) Descriptor() ([]byte, []int) {
	return file_traits_publication_proto_rawDescGZIP(), []int{6}
}

func (x *PullPublicationResponse) GetChanges() []*PullPublicationResponse_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

type ListPublicationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Fields to fetch relative to the Publication type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// The maximum number of items to return.
	// The service may return fewer than this value.
	// If unspecified, at most 50 items will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListPublicationsResponse` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListPublicationsRequest) Reset() {
	*x = ListPublicationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_publication_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPublicationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPublicationsRequest) ProtoMessage() {}

func (x *ListPublicationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_publication_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPublicationsRequest.ProtoReflect.Descriptor instead.
func (*ListPublicationsRequest) Descriptor() ([]byte, []int) {
	return file_traits_publication_proto_rawDescGZIP(), []int{7}
}

func (x *ListPublicationsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListPublicationsRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *ListPublicationsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPublicationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListPublicationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publications []*Publication `protobuf:"bytes,1,rep,name=publications,proto3" json:"publications,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// If non-zero this is the total number of consumables.
	// This may be an estimate.
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListPublicationsResponse) Reset() {
	*x = ListPublicationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_publication_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPublicationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPublicationsResponse) ProtoMessage() {}

func (x *ListPublicationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traits_publication_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPublicationsResponse.ProtoReflect.Descriptor instead.
func (*ListPublicationsResponse) Descriptor() ([]byte, []int) {
	return file_traits_publication_proto_rawDescGZIP(), []int{8}
}

func (x *ListPublicationsResponse) GetPublications() []*Publication {
	if x != nil {
		return x.Publications
	}
	return nil
}

func (x *ListPublicationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListPublicationsResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type PullPublicationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Fields to fetch relative to the Publication type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// When true the device will only send changes to the resource value.
	// The default behaviour is to send the current value immediately followed by any updates as they happen.
	UpdatesOnly bool `protobuf:"varint,3,opt,name=updates_only,json=updatesOnly,proto3" json:"updates_only,omitempty"`
}

func (x *PullPublicationsRequest) Reset() {
	*x = PullPublicationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_publication_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullPublicationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullPublicationsRequest) ProtoMessage() {}

func (x *PullPublicationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_publication_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullPublicationsRequest.ProtoReflect.Descriptor instead.
func (*PullPublicationsRequest) Descriptor() ([]byte, []int) {
	return file_traits_publication_proto_rawDescGZIP(), []int{9}
}

func (x *PullPublicationsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullPublicationsRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *PullPublicationsRequest) GetUpdatesOnly() bool {
	if x != nil {
		return x.UpdatesOnly
	}
	return false
}

type PullPublicationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of changes which have occurred
	Changes []*PullPublicationsResponse_Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *PullPublicationsResponse) Reset() {
	*x = PullPublicationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_publication_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullPublicationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullPublicationsResponse) ProtoMessage() {}

func (x *PullPublicationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traits_publication_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullPublicationsResponse.ProtoReflect.Descriptor instead.
func (*PullPublicationsResponse) Descriptor() ([]byte, []int) {
	return file_traits_publication_proto_rawDescGZIP(), []int{10}
}

func (x *PullPublicationsResponse) GetChanges() []*PullPublicationsResponse_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

type AcknowledgePublicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The ID of the publication to acknowledge.
	// Required.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The version of the publication to acknowledge.
	// Required.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// One of ACCEPTED or REJECTED.
	// Optional, ACCEPTED is used if not present
	Receipt Publication_Audience_Receipt `protobuf:"varint,4,opt,name=receipt,proto3,enum=smartcore.traits.Publication_Audience_Receipt" json:"receipt,omitempty"`
	// If receipt is REJECTED, supply a reason that may be shown to an operator to help troubleshoot issues.
	ReceiptRejectedReason string `protobuf:"bytes,5,opt,name=receipt_rejected_reason,json=receiptRejectedReason,proto3" json:"receipt_rejected_reason,omitempty"`
	// If true, acknowledging a publication more than once will not result in an error response status and the publication
	// will not change.
	AllowAcknowledged bool `protobuf:"varint,6,opt,name=allow_acknowledged,json=allowAcknowledged,proto3" json:"allow_acknowledged,omitempty"`
}

func (x *AcknowledgePublicationRequest) Reset() {
	*x = AcknowledgePublicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_publication_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcknowledgePublicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgePublicationRequest) ProtoMessage() {}

func (x *AcknowledgePublicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_publication_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgePublicationRequest.ProtoReflect.Descriptor instead.
func (*AcknowledgePublicationRequest) Descriptor() ([]byte, []int) {
	return file_traits_publication_proto_rawDescGZIP(), []int{11}
}

func (x *AcknowledgePublicationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AcknowledgePublicationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AcknowledgePublicationRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AcknowledgePublicationRequest) GetReceipt() Publication_Audience_Receipt {
	if x != nil {
		return x.Receipt
	}
	return Publication_Audience_RECEIPT_UNSPECIFIED
}

func (x *AcknowledgePublicationRequest) GetReceiptRejectedReason() string {
	if x != nil {
		return x.ReceiptRejectedReason
	}
	return ""
}

func (x *AcknowledgePublicationRequest) GetAllowAcknowledged() bool {
	if x != nil {
		return x.AllowAcknowledged
	}
	return false
}

// Audience describes who a publication is targeting.
// A publication audience is typically used when one device is responsible for managing the state of another device,
// for example holding configuration data. In this case DeviceA creates device configuration for DeviceB, DeviceB is
// the audience for that configuration publication.
// When a publication has an audience, it is useful to know when that third-party has received the publication, this
// is modelled as a receipt.
type Publication_Audience struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device that is the audience for the publication.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// An indication of whether the audience has received this publication.
	Receipt Publication_Audience_Receipt `protobuf:"varint,2,opt,name=receipt,proto3,enum=smartcore.traits.Publication_Audience_Receipt" json:"receipt,omitempty"`
	// A reason for a rejection of the publication by the audience.
	ReceiptRejectedReason string `protobuf:"bytes,3,opt,name=receipt_rejected_reason,json=receiptRejectedReason,proto3" json:"receipt_rejected_reason,omitempty"`
	// A timestamp indicating when the audience acknowledged the publication.
	// Output only.
	// Populated using the servers time when AcknowledgePublication is called by the audience.
	ReceiptTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=receipt_time,json=receiptTime,proto3" json:"receipt_time,omitempty"`
}

func (x *Publication_Audience) Reset() {
	*x = Publication_Audience{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_publication_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Publication_Audience) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Publication_Audience) ProtoMessage() {}

func (x *Publication_Audience) ProtoReflect() protoreflect.Message {
	mi := &file_traits_publication_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Publication_Audience.ProtoReflect.Descriptor instead.
func (*Publication_Audience) Descriptor() ([]byte, []int) {
	return file_traits_publication_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Publication_Audience) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Publication_Audience) GetReceipt() Publication_Audience_Receipt {
	if x != nil {
		return x.Receipt
	}
	return Publication_Audience_RECEIPT_UNSPECIFIED
}

func (x *Publication_Audience) GetReceiptRejectedReason() string {
	if x != nil {
		return x.ReceiptRejectedReason
	}
	return ""
}

func (x *Publication_Audience) GetReceiptTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiptTime
	}
	return nil
}

type PullPublicationResponse_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device that issued the change.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// When the change occurred
	ChangeTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
	// The new value for the publication.
	Publication *Publication `protobuf:"bytes,3,opt,name=publication,proto3" json:"publication,omitempty"`
}

func (x *PullPublicationResponse_Change) Reset() {
	*x = PullPublicationResponse_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_publication_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullPublicationResponse_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullPublicationResponse_Change) ProtoMessage() {}

func (x *PullPublicationResponse_Change) ProtoReflect() protoreflect.Message {
	mi := &file_traits_publication_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullPublicationResponse_Change.ProtoReflect.Descriptor instead.
func (*PullPublicationResponse_Change) Descriptor() ([]byte, []int) {
	return file_traits_publication_proto_rawDescGZIP(), []int{6, 0}
}

func (x *PullPublicationResponse_Change) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullPublicationResponse_Change) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

func (x *PullPublicationResponse_Change) GetPublication() *Publication {
	if x != nil {
		return x.Publication
	}
	return nil
}

type PullPublicationsResponse_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device that emitted this change
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The type of change (e.g. ADD, UPDATE, etc...)
	Type types.ChangeType `protobuf:"varint,2,opt,name=type,proto3,enum=smartcore.types.ChangeType" json:"type,omitempty"`
	// The new value to use for ADD|UPDATE changes
	NewValue *Publication `protobuf:"bytes,3,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	// The old value to use for UPDATE|REMOVE changes
	OldValue *Publication `protobuf:"bytes,4,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	// When the change occurred
	ChangeTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
}

func (x *PullPublicationsResponse_Change) Reset() {
	*x = PullPublicationsResponse_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_publication_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullPublicationsResponse_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullPublicationsResponse_Change) ProtoMessage() {}

func (x *PullPublicationsResponse_Change) ProtoReflect() protoreflect.Message {
	mi := &file_traits_publication_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullPublicationsResponse_Change.ProtoReflect.Descriptor instead.
func (*PullPublicationsResponse_Change) Descriptor() ([]byte, []int) {
	return file_traits_publication_proto_rawDescGZIP(), []int{10, 0}
}

func (x *PullPublicationsResponse_Change) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullPublicationsResponse_Change) GetType() types.ChangeType {
	if x != nil {
		return x.Type
	}
	return types.ChangeType(0)
}

func (x *PullPublicationsResponse_Change) GetNewValue() *Publication {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *PullPublicationsResponse_Change) GetOldValue() *Publication {
	if x != nil {
		return x.OldValue
	}
	return nil
}

func (x *PullPublicationsResponse_Change) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

var File_traits_publication_proto protoreflect.FileDescriptor

var file_traits_publication_proto_rawDesc = []byte{
	0x0a, 0x18, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x12, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x04, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x12, 0x42, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x61, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x1a, 0xae, 0x02, 0x0a, 0x08, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x36,
	0x0a, 0x17, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45,
	0x50, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x22, 0x6f, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc6, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x7d, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x98,
	0x01, 0x0a, 0x16, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a,
	0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65,
	0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x82, 0x02, 0x0a, 0x17, 0x50, 0x75,
	0x6c, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x1a, 0x9a, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa2,
	0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37,
	0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x17, 0x50,
	0x75, 0x6c, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xec, 0x02, 0x0a, 0x18, 0x50, 0x75, 0x6c, 0x6c, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x1a, 0x82, 0x02, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x09,
	0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8e, 0x02, 0x0a, 0x1d, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12,
	0x36, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x32, 0xb6, 0x06, 0x0a, 0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x12, 0x5e, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x0f, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x69, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x29, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x10, 0x50, 0x75, 0x6c, 0x6c,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e,
	0x50, 0x75, 0x6c, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x68, 0x0a, 0x16, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2f, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x7b, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x42, 0x10, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x29, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x2d, 0x63, 0x6f,
	0x72, 0x65, 0x2d, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0xaa, 0x02, 0x10, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0xca, 0x02, 0x10, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x5c, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_traits_publication_proto_rawDescOnce sync.Once
	file_traits_publication_proto_rawDescData = file_traits_publication_proto_rawDesc
)

func file_traits_publication_proto_rawDescGZIP() []byte {
	file_traits_publication_proto_rawDescOnce.Do(func() {
		file_traits_publication_proto_rawDescData = protoimpl.X.CompressGZIP(file_traits_publication_proto_rawDescData)
	})
	return file_traits_publication_proto_rawDescData
}

var file_traits_publication_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_traits_publication_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_traits_publication_proto_goTypes = []any{
	(Publication_Audience_Receipt)(0),       // 0: smartcore.traits.Publication.Audience.Receipt
	(*Publication)(nil),                     // 1: smartcore.traits.Publication
	(*CreatePublicationRequest)(nil),        // 2: smartcore.traits.CreatePublicationRequest
	(*GetPublicationRequest)(nil),           // 3: smartcore.traits.GetPublicationRequest
	(*UpdatePublicationRequest)(nil),        // 4: smartcore.traits.UpdatePublicationRequest
	(*DeletePublicationRequest)(nil),        // 5: smartcore.traits.DeletePublicationRequest
	(*PullPublicationRequest)(nil),          // 6: smartcore.traits.PullPublicationRequest
	(*PullPublicationResponse)(nil),         // 7: smartcore.traits.PullPublicationResponse
	(*ListPublicationsRequest)(nil),         // 8: smartcore.traits.ListPublicationsRequest
	(*ListPublicationsResponse)(nil),        // 9: smartcore.traits.ListPublicationsResponse
	(*PullPublicationsRequest)(nil),         // 10: smartcore.traits.PullPublicationsRequest
	(*PullPublicationsResponse)(nil),        // 11: smartcore.traits.PullPublicationsResponse
	(*AcknowledgePublicationRequest)(nil),   // 12: smartcore.traits.AcknowledgePublicationRequest
	(*Publication_Audience)(nil),            // 13: smartcore.traits.Publication.Audience
	(*PullPublicationResponse_Change)(nil),  // 14: smartcore.traits.PullPublicationResponse.Change
	(*PullPublicationsResponse_Change)(nil), // 15: smartcore.traits.PullPublicationsResponse.Change
	(*timestamppb.Timestamp)(nil),           // 16: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),           // 17: google.protobuf.FieldMask
	(types.ChangeType)(0),                   // 18: smartcore.types.ChangeType
}
var file_traits_publication_proto_depIdxs = []int32{
	13, // 0: smartcore.traits.Publication.audience:type_name -> smartcore.traits.Publication.Audience
	16, // 1: smartcore.traits.Publication.publish_time:type_name -> google.protobuf.Timestamp
	1,  // 2: smartcore.traits.CreatePublicationRequest.publication:type_name -> smartcore.traits.Publication
	17, // 3: smartcore.traits.GetPublicationRequest.read_mask:type_name -> google.protobuf.FieldMask
	1,  // 4: smartcore.traits.UpdatePublicationRequest.publication:type_name -> smartcore.traits.Publication
	17, // 5: smartcore.traits.UpdatePublicationRequest.update_mask:type_name -> google.protobuf.FieldMask
	17, // 6: smartcore.traits.PullPublicationRequest.read_mask:type_name -> google.protobuf.FieldMask
	14, // 7: smartcore.traits.PullPublicationResponse.changes:type_name -> smartcore.traits.PullPublicationResponse.Change
	17, // 8: smartcore.traits.ListPublicationsRequest.read_mask:type_name -> google.protobuf.FieldMask
	1,  // 9: smartcore.traits.ListPublicationsResponse.publications:type_name -> smartcore.traits.Publication
	17, // 10: smartcore.traits.PullPublicationsRequest.read_mask:type_name -> google.protobuf.FieldMask
	15, // 11: smartcore.traits.PullPublicationsResponse.changes:type_name -> smartcore.traits.PullPublicationsResponse.Change
	0,  // 12: smartcore.traits.AcknowledgePublicationRequest.receipt:type_name -> smartcore.traits.Publication.Audience.Receipt
	0,  // 13: smartcore.traits.Publication.Audience.receipt:type_name -> smartcore.traits.Publication.Audience.Receipt
	16, // 14: smartcore.traits.Publication.Audience.receipt_time:type_name -> google.protobuf.Timestamp
	16, // 15: smartcore.traits.PullPublicationResponse.Change.change_time:type_name -> google.protobuf.Timestamp
	1,  // 16: smartcore.traits.PullPublicationResponse.Change.publication:type_name -> smartcore.traits.Publication
	18, // 17: smartcore.traits.PullPublicationsResponse.Change.type:type_name -> smartcore.types.ChangeType
	1,  // 18: smartcore.traits.PullPublicationsResponse.Change.new_value:type_name -> smartcore.traits.Publication
	1,  // 19: smartcore.traits.PullPublicationsResponse.Change.old_value:type_name -> smartcore.traits.Publication
	16, // 20: smartcore.traits.PullPublicationsResponse.Change.change_time:type_name -> google.protobuf.Timestamp
	2,  // 21: smartcore.traits.PublicationApi.CreatePublication:input_type -> smartcore.traits.CreatePublicationRequest
	3,  // 22: smartcore.traits.PublicationApi.GetPublication:input_type -> smartcore.traits.GetPublicationRequest
	4,  // 23: smartcore.traits.PublicationApi.UpdatePublication:input_type -> smartcore.traits.UpdatePublicationRequest
	5,  // 24: smartcore.traits.PublicationApi.DeletePublication:input_type -> smartcore.traits.DeletePublicationRequest
	6,  // 25: smartcore.traits.PublicationApi.PullPublication:input_type -> smartcore.traits.PullPublicationRequest
	8,  // 26: smartcore.traits.PublicationApi.ListPublications:input_type -> smartcore.traits.ListPublicationsRequest
	10, // 27: smartcore.traits.PublicationApi.PullPublications:input_type -> smartcore.traits.PullPublicationsRequest
	12, // 28: smartcore.traits.PublicationApi.AcknowledgePublication:input_type -> smartcore.traits.AcknowledgePublicationRequest
	1,  // 29: smartcore.traits.PublicationApi.CreatePublication:output_type -> smartcore.traits.Publication
	1,  // 30: smartcore.traits.PublicationApi.GetPublication:output_type -> smartcore.traits.Publication
	1,  // 31: smartcore.traits.PublicationApi.UpdatePublication:output_type -> smartcore.traits.Publication
	1,  // 32: smartcore.traits.PublicationApi.DeletePublication:output_type -> smartcore.traits.Publication
	7,  // 33: smartcore.traits.PublicationApi.PullPublication:output_type -> smartcore.traits.PullPublicationResponse
	9,  // 34: smartcore.traits.PublicationApi.ListPublications:output_type -> smartcore.traits.ListPublicationsResponse
	11, // 35: smartcore.traits.PublicationApi.PullPublications:output_type -> smartcore.traits.PullPublicationsResponse
	1,  // 36: smartcore.traits.PublicationApi.AcknowledgePublication:output_type -> smartcore.traits.Publication
	29, // [29:37] is the sub-list for method output_type
	21, // [21:29] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_traits_publication_proto_init() }
func file_traits_publication_proto_init() {
	if File_traits_publication_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_traits_publication_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Publication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_publication_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePublicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_publication_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetPublicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_publication_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePublicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_publication_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DeletePublicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_publication_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*PullPublicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_publication_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*PullPublicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_publication_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ListPublicationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_publication_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ListPublicationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_publication_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*PullPublicationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_publication_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*PullPublicationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_publication_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*AcknowledgePublicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_publication_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Publication_Audience); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_publication_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*PullPublicationResponse_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_publication_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*PullPublicationsResponse_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_traits_publication_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_traits_publication_proto_goTypes,
		DependencyIndexes: file_traits_publication_proto_depIdxs,
		EnumInfos:         file_traits_publication_proto_enumTypes,
		MessageInfos:      file_traits_publication_proto_msgTypes,
	}.Build()
	File_traits_publication_proto = out.File
	file_traits_publication_proto_rawDesc = nil
	file_traits_publication_proto_goTypes = nil
	file_traits_publication_proto_depIdxs = nil
}
