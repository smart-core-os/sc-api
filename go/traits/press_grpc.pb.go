// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: traits/press.proto

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PressApi_GetPressedState_FullMethodName    = "/smartcore.traits.PressApi/GetPressedState"
	PressApi_PullPressedState_FullMethodName   = "/smartcore.traits.PressApi/PullPressedState"
	PressApi_UpdatePressedState_FullMethodName = "/smartcore.traits.PressApi/UpdatePressedState"
)

// PressApiClient is the client API for PressApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The state and events from an input that can be pressed, e.g. a momentary push-button input.
// This trait facilitates reactions to basic user input.
// Both the basic pressed state (pressed or not) as well as higher-level input events like "double click" are supported.
type PressApiClient interface {
	// Gets the current state of the input.
	// Contain the most recent gesture, so clients using polling can still detect and respond to gestures.
	// However, to reduce latency, PullPressedState is recommended for this use case.
	GetPressedState(ctx context.Context, in *GetPressedStateRequest, opts ...grpc.CallOption) (*PressedState, error)
	// Fetches changes to the pressed state and gestures, and optionally the initial state.
	PullPressedState(ctx context.Context, in *PullPressedStateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullPressedStateResponse], error)
	// Updates the input state according to the write mask.
	// Real (physical) inputs are not expected to implement this method - it is intended for virtual or mock inputs
	UpdatePressedState(ctx context.Context, in *UpdatePressedStateRequest, opts ...grpc.CallOption) (*PressedState, error)
}

type pressApiClient struct {
	cc grpc.ClientConnInterface
}

func NewPressApiClient(cc grpc.ClientConnInterface) PressApiClient {
	return &pressApiClient{cc}
}

func (c *pressApiClient) GetPressedState(ctx context.Context, in *GetPressedStateRequest, opts ...grpc.CallOption) (*PressedState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PressedState)
	err := c.cc.Invoke(ctx, PressApi_GetPressedState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pressApiClient) PullPressedState(ctx context.Context, in *PullPressedStateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullPressedStateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PressApi_ServiceDesc.Streams[0], PressApi_PullPressedState_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullPressedStateRequest, PullPressedStateResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PressApi_PullPressedStateClient = grpc.ServerStreamingClient[PullPressedStateResponse]

func (c *pressApiClient) UpdatePressedState(ctx context.Context, in *UpdatePressedStateRequest, opts ...grpc.CallOption) (*PressedState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PressedState)
	err := c.cc.Invoke(ctx, PressApi_UpdatePressedState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PressApiServer is the server API for PressApi service.
// All implementations must embed UnimplementedPressApiServer
// for forward compatibility.
//
// The state and events from an input that can be pressed, e.g. a momentary push-button input.
// This trait facilitates reactions to basic user input.
// Both the basic pressed state (pressed or not) as well as higher-level input events like "double click" are supported.
type PressApiServer interface {
	// Gets the current state of the input.
	// Contain the most recent gesture, so clients using polling can still detect and respond to gestures.
	// However, to reduce latency, PullPressedState is recommended for this use case.
	GetPressedState(context.Context, *GetPressedStateRequest) (*PressedState, error)
	// Fetches changes to the pressed state and gestures, and optionally the initial state.
	PullPressedState(*PullPressedStateRequest, grpc.ServerStreamingServer[PullPressedStateResponse]) error
	// Updates the input state according to the write mask.
	// Real (physical) inputs are not expected to implement this method - it is intended for virtual or mock inputs
	UpdatePressedState(context.Context, *UpdatePressedStateRequest) (*PressedState, error)
	mustEmbedUnimplementedPressApiServer()
}

// UnimplementedPressApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPressApiServer struct{}

func (UnimplementedPressApiServer) GetPressedState(context.Context, *GetPressedStateRequest) (*PressedState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPressedState not implemented")
}
func (UnimplementedPressApiServer) PullPressedState(*PullPressedStateRequest, grpc.ServerStreamingServer[PullPressedStateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullPressedState not implemented")
}
func (UnimplementedPressApiServer) UpdatePressedState(context.Context, *UpdatePressedStateRequest) (*PressedState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePressedState not implemented")
}
func (UnimplementedPressApiServer) mustEmbedUnimplementedPressApiServer() {}
func (UnimplementedPressApiServer) testEmbeddedByValue()                  {}

// UnsafePressApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PressApiServer will
// result in compilation errors.
type UnsafePressApiServer interface {
	mustEmbedUnimplementedPressApiServer()
}

func RegisterPressApiServer(s grpc.ServiceRegistrar, srv PressApiServer) {
	// If the following call pancis, it indicates UnimplementedPressApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PressApi_ServiceDesc, srv)
}

func _PressApi_GetPressedState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPressedStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PressApiServer).GetPressedState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PressApi_GetPressedState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PressApiServer).GetPressedState(ctx, req.(*GetPressedStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PressApi_PullPressedState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullPressedStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PressApiServer).PullPressedState(m, &grpc.GenericServerStream[PullPressedStateRequest, PullPressedStateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PressApi_PullPressedStateServer = grpc.ServerStreamingServer[PullPressedStateResponse]

func _PressApi_UpdatePressedState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePressedStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PressApiServer).UpdatePressedState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PressApi_UpdatePressedState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PressApiServer).UpdatePressedState(ctx, req.(*UpdatePressedStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PressApi_ServiceDesc is the grpc.ServiceDesc for PressApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PressApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.PressApi",
	HandlerType: (*PressApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPressedState",
			Handler:    _PressApi_GetPressedState_Handler,
		},
		{
			MethodName: "UpdatePressedState",
			Handler:    _PressApi_UpdatePressedState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullPressedState",
			Handler:       _PressApi_PullPressedState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/press.proto",
}
