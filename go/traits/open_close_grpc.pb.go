// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: traits/open_close.proto

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OpenCloseApi_GetPositions_FullMethodName    = "/smartcore.traits.OpenCloseApi/GetPositions"
	OpenCloseApi_UpdatePositions_FullMethodName = "/smartcore.traits.OpenCloseApi/UpdatePositions"
	OpenCloseApi_Stop_FullMethodName            = "/smartcore.traits.OpenCloseApi/Stop"
	OpenCloseApi_PullPositions_FullMethodName   = "/smartcore.traits.OpenCloseApi/PullPositions"
)

// OpenCloseApiClient is the client API for OpenCloseApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Applicable to devices that can open or close. Think window contact closure, window blind, or garage door.
type OpenCloseApiClient interface {
	GetPositions(ctx context.Context, in *GetOpenClosePositionsRequest, opts ...grpc.CallOption) (*OpenClosePositions, error)
	UpdatePositions(ctx context.Context, in *UpdateOpenClosePositionsRequest, opts ...grpc.CallOption) (*OpenClosePositions, error)
	// Stop causes any changes being performed by the underlying device to stop. Will return the current state.
	Stop(ctx context.Context, in *StopOpenCloseRequest, opts ...grpc.CallOption) (*OpenClosePositions, error)
	// Get notified of changes to the OpenCloseState of a device
	PullPositions(ctx context.Context, in *PullOpenClosePositionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullOpenClosePositionsResponse], error)
}

type openCloseApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenCloseApiClient(cc grpc.ClientConnInterface) OpenCloseApiClient {
	return &openCloseApiClient{cc}
}

func (c *openCloseApiClient) GetPositions(ctx context.Context, in *GetOpenClosePositionsRequest, opts ...grpc.CallOption) (*OpenClosePositions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenClosePositions)
	err := c.cc.Invoke(ctx, OpenCloseApi_GetPositions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCloseApiClient) UpdatePositions(ctx context.Context, in *UpdateOpenClosePositionsRequest, opts ...grpc.CallOption) (*OpenClosePositions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenClosePositions)
	err := c.cc.Invoke(ctx, OpenCloseApi_UpdatePositions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCloseApiClient) Stop(ctx context.Context, in *StopOpenCloseRequest, opts ...grpc.CallOption) (*OpenClosePositions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenClosePositions)
	err := c.cc.Invoke(ctx, OpenCloseApi_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCloseApiClient) PullPositions(ctx context.Context, in *PullOpenClosePositionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullOpenClosePositionsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OpenCloseApi_ServiceDesc.Streams[0], OpenCloseApi_PullPositions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullOpenClosePositionsRequest, PullOpenClosePositionsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OpenCloseApi_PullPositionsClient = grpc.ServerStreamingClient[PullOpenClosePositionsResponse]

// OpenCloseApiServer is the server API for OpenCloseApi service.
// All implementations must embed UnimplementedOpenCloseApiServer
// for forward compatibility.
//
// Applicable to devices that can open or close. Think window contact closure, window blind, or garage door.
type OpenCloseApiServer interface {
	GetPositions(context.Context, *GetOpenClosePositionsRequest) (*OpenClosePositions, error)
	UpdatePositions(context.Context, *UpdateOpenClosePositionsRequest) (*OpenClosePositions, error)
	// Stop causes any changes being performed by the underlying device to stop. Will return the current state.
	Stop(context.Context, *StopOpenCloseRequest) (*OpenClosePositions, error)
	// Get notified of changes to the OpenCloseState of a device
	PullPositions(*PullOpenClosePositionsRequest, grpc.ServerStreamingServer[PullOpenClosePositionsResponse]) error
	mustEmbedUnimplementedOpenCloseApiServer()
}

// UnimplementedOpenCloseApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOpenCloseApiServer struct{}

func (UnimplementedOpenCloseApiServer) GetPositions(context.Context, *GetOpenClosePositionsRequest) (*OpenClosePositions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositions not implemented")
}
func (UnimplementedOpenCloseApiServer) UpdatePositions(context.Context, *UpdateOpenClosePositionsRequest) (*OpenClosePositions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePositions not implemented")
}
func (UnimplementedOpenCloseApiServer) Stop(context.Context, *StopOpenCloseRequest) (*OpenClosePositions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedOpenCloseApiServer) PullPositions(*PullOpenClosePositionsRequest, grpc.ServerStreamingServer[PullOpenClosePositionsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullPositions not implemented")
}
func (UnimplementedOpenCloseApiServer) mustEmbedUnimplementedOpenCloseApiServer() {}
func (UnimplementedOpenCloseApiServer) testEmbeddedByValue()                      {}

// UnsafeOpenCloseApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenCloseApiServer will
// result in compilation errors.
type UnsafeOpenCloseApiServer interface {
	mustEmbedUnimplementedOpenCloseApiServer()
}

func RegisterOpenCloseApiServer(s grpc.ServiceRegistrar, srv OpenCloseApiServer) {
	// If the following call pancis, it indicates UnimplementedOpenCloseApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OpenCloseApi_ServiceDesc, srv)
}

func _OpenCloseApi_GetPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenClosePositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCloseApiServer).GetPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenCloseApi_GetPositions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCloseApiServer).GetPositions(ctx, req.(*GetOpenClosePositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenCloseApi_UpdatePositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOpenClosePositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCloseApiServer).UpdatePositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenCloseApi_UpdatePositions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCloseApiServer).UpdatePositions(ctx, req.(*UpdateOpenClosePositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenCloseApi_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopOpenCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCloseApiServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenCloseApi_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCloseApiServer).Stop(ctx, req.(*StopOpenCloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenCloseApi_PullPositions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullOpenClosePositionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OpenCloseApiServer).PullPositions(m, &grpc.GenericServerStream[PullOpenClosePositionsRequest, PullOpenClosePositionsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OpenCloseApi_PullPositionsServer = grpc.ServerStreamingServer[PullOpenClosePositionsResponse]

// OpenCloseApi_ServiceDesc is the grpc.ServiceDesc for OpenCloseApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenCloseApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.OpenCloseApi",
	HandlerType: (*OpenCloseApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPositions",
			Handler:    _OpenCloseApi_GetPositions_Handler,
		},
		{
			MethodName: "UpdatePositions",
			Handler:    _OpenCloseApi_UpdatePositions_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _OpenCloseApi_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullPositions",
			Handler:       _OpenCloseApi_PullPositions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/open_close.proto",
}

const (
	OpenCloseInfo_DescribePositions_FullMethodName = "/smartcore.traits.OpenCloseInfo/DescribePositions"
)

// OpenCloseInfoClient is the client API for OpenCloseInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the capabilities of a specific named device with respect to this trait.
type OpenCloseInfoClient interface {
	// Get information about how a named device implements Positions features
	DescribePositions(ctx context.Context, in *DescribePositionsRequest, opts ...grpc.CallOption) (*PositionsSupport, error)
}

type openCloseInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenCloseInfoClient(cc grpc.ClientConnInterface) OpenCloseInfoClient {
	return &openCloseInfoClient{cc}
}

func (c *openCloseInfoClient) DescribePositions(ctx context.Context, in *DescribePositionsRequest, opts ...grpc.CallOption) (*PositionsSupport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PositionsSupport)
	err := c.cc.Invoke(ctx, OpenCloseInfo_DescribePositions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenCloseInfoServer is the server API for OpenCloseInfo service.
// All implementations must embed UnimplementedOpenCloseInfoServer
// for forward compatibility.
//
// Describes the capabilities of a specific named device with respect to this trait.
type OpenCloseInfoServer interface {
	// Get information about how a named device implements Positions features
	DescribePositions(context.Context, *DescribePositionsRequest) (*PositionsSupport, error)
	mustEmbedUnimplementedOpenCloseInfoServer()
}

// UnimplementedOpenCloseInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOpenCloseInfoServer struct{}

func (UnimplementedOpenCloseInfoServer) DescribePositions(context.Context, *DescribePositionsRequest) (*PositionsSupport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePositions not implemented")
}
func (UnimplementedOpenCloseInfoServer) mustEmbedUnimplementedOpenCloseInfoServer() {}
func (UnimplementedOpenCloseInfoServer) testEmbeddedByValue()                       {}

// UnsafeOpenCloseInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenCloseInfoServer will
// result in compilation errors.
type UnsafeOpenCloseInfoServer interface {
	mustEmbedUnimplementedOpenCloseInfoServer()
}

func RegisterOpenCloseInfoServer(s grpc.ServiceRegistrar, srv OpenCloseInfoServer) {
	// If the following call pancis, it indicates UnimplementedOpenCloseInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OpenCloseInfo_ServiceDesc, srv)
}

func _OpenCloseInfo_DescribePositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCloseInfoServer).DescribePositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenCloseInfo_DescribePositions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCloseInfoServer).DescribePositions(ctx, req.(*DescribePositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpenCloseInfo_ServiceDesc is the grpc.ServiceDesc for OpenCloseInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenCloseInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.OpenCloseInfo",
	HandlerType: (*OpenCloseInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribePositions",
			Handler:    _OpenCloseInfo_DescribePositions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "traits/open_close.proto",
}
