// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.3
// source: traits/energy_storage.proto

package traits

import (
	types "github.com/smart-core-os/sc-api/go/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnergyLevelSupport_ChargeControl int32

const (
	EnergyLevelSupport_CHARGE_CONTROL_UNSPECIFIED EnergyLevelSupport_ChargeControl = 0
	// Charge status cannot change.
	// Typically this is because the device is not rechargeable.
	EnergyLevelSupport_NONE EnergyLevelSupport_ChargeControl = 1
	// The device may change the charge status, calling Charge will not affect it and will return an error.
	EnergyLevelSupport_DEVICE EnergyLevelSupport_ChargeControl = 2
	// Calling Charge can change the charge status. The device will not change it on its own.
	EnergyLevelSupport_EXTERNAL EnergyLevelSupport_ChargeControl = 3
	// Both the device and calling Charge can change the charge status.
	EnergyLevelSupport_ALL EnergyLevelSupport_ChargeControl = 4
)

// Enum value maps for EnergyLevelSupport_ChargeControl.
var (
	EnergyLevelSupport_ChargeControl_name = map[int32]string{
		0: "CHARGE_CONTROL_UNSPECIFIED",
		1: "NONE",
		2: "DEVICE",
		3: "EXTERNAL",
		4: "ALL",
	}
	EnergyLevelSupport_ChargeControl_value = map[string]int32{
		"CHARGE_CONTROL_UNSPECIFIED": 0,
		"NONE":                       1,
		"DEVICE":                     2,
		"EXTERNAL":                   3,
		"ALL":                        4,
	}
)

func (x EnergyLevelSupport_ChargeControl) Enum() *EnergyLevelSupport_ChargeControl {
	p := new(EnergyLevelSupport_ChargeControl)
	*p = x
	return p
}

func (x EnergyLevelSupport_ChargeControl) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnergyLevelSupport_ChargeControl) Descriptor() protoreflect.EnumDescriptor {
	return file_traits_energy_storage_proto_enumTypes[0].Descriptor()
}

func (EnergyLevelSupport_ChargeControl) Type() protoreflect.EnumType {
	return &file_traits_energy_storage_proto_enumTypes[0]
}

func (x EnergyLevelSupport_ChargeControl) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnergyLevelSupport_ChargeControl.Descriptor instead.
func (EnergyLevelSupport_ChargeControl) EnumDescriptor() ([]byte, []int) {
	return file_traits_energy_storage_proto_rawDescGZIP(), []int{0, 0}
}

// Speed defines descriptive relative energy transfer speeds for a device.
// Larger enum values will always be faster than smaller enum values.
//
// Comparing two devices speeds is not defined, one device that is FAST and another that is SLOW does not
// guarantee that either device will transfer energy quicker than the other.
type EnergyLevel_Transfer_Speed int32

const (
	EnergyLevel_Transfer_SPEED_UNSPECIFIED EnergyLevel_Transfer_Speed = 0
	EnergyLevel_Transfer_EXTRA_SLOW        EnergyLevel_Transfer_Speed = 1
	EnergyLevel_Transfer_SLOW              EnergyLevel_Transfer_Speed = 2
	EnergyLevel_Transfer_NORMAL            EnergyLevel_Transfer_Speed = 3
	EnergyLevel_Transfer_FAST              EnergyLevel_Transfer_Speed = 4
	EnergyLevel_Transfer_EXTRA_FAST        EnergyLevel_Transfer_Speed = 5
)

// Enum value maps for EnergyLevel_Transfer_Speed.
var (
	EnergyLevel_Transfer_Speed_name = map[int32]string{
		0: "SPEED_UNSPECIFIED",
		1: "EXTRA_SLOW",
		2: "SLOW",
		3: "NORMAL",
		4: "FAST",
		5: "EXTRA_FAST",
	}
	EnergyLevel_Transfer_Speed_value = map[string]int32{
		"SPEED_UNSPECIFIED": 0,
		"EXTRA_SLOW":        1,
		"SLOW":              2,
		"NORMAL":            3,
		"FAST":              4,
		"EXTRA_FAST":        5,
	}
)

func (x EnergyLevel_Transfer_Speed) Enum() *EnergyLevel_Transfer_Speed {
	p := new(EnergyLevel_Transfer_Speed)
	*p = x
	return p
}

func (x EnergyLevel_Transfer_Speed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnergyLevel_Transfer_Speed) Descriptor() protoreflect.EnumDescriptor {
	return file_traits_energy_storage_proto_enumTypes[1].Descriptor()
}

func (EnergyLevel_Transfer_Speed) Type() protoreflect.EnumType {
	return &file_traits_energy_storage_proto_enumTypes[1]
}

func (x EnergyLevel_Transfer_Speed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnergyLevel_Transfer_Speed.Descriptor instead.
func (EnergyLevel_Transfer_Speed) EnumDescriptor() ([]byte, []int) {
	return file_traits_energy_storage_proto_rawDescGZIP(), []int{1, 0, 0}
}

// Threshold defines preset descriptive quantities for the energy level of the device.
// Numeric values will be preferred if provided.
type EnergyLevel_Quantity_Threshold int32

const (
	EnergyLevel_Quantity_THRESHOLD_UNSPECIFIED EnergyLevel_Quantity_Threshold = 0
	EnergyLevel_Quantity_CRITICALLY_LOW        EnergyLevel_Quantity_Threshold = 1
	EnergyLevel_Quantity_EMPTY                 EnergyLevel_Quantity_Threshold = 2
	EnergyLevel_Quantity_LOW                   EnergyLevel_Quantity_Threshold = 3
	EnergyLevel_Quantity_MEDIUM                EnergyLevel_Quantity_Threshold = 4
	EnergyLevel_Quantity_HIGH                  EnergyLevel_Quantity_Threshold = 5
	EnergyLevel_Quantity_FULL                  EnergyLevel_Quantity_Threshold = 7
	EnergyLevel_Quantity_CRITICALLY_HIGH       EnergyLevel_Quantity_Threshold = 8
)

// Enum value maps for EnergyLevel_Quantity_Threshold.
var (
	EnergyLevel_Quantity_Threshold_name = map[int32]string{
		0: "THRESHOLD_UNSPECIFIED",
		1: "CRITICALLY_LOW",
		2: "EMPTY",
		3: "LOW",
		4: "MEDIUM",
		5: "HIGH",
		7: "FULL",
		8: "CRITICALLY_HIGH",
	}
	EnergyLevel_Quantity_Threshold_value = map[string]int32{
		"THRESHOLD_UNSPECIFIED": 0,
		"CRITICALLY_LOW":        1,
		"EMPTY":                 2,
		"LOW":                   3,
		"MEDIUM":                4,
		"HIGH":                  5,
		"FULL":                  7,
		"CRITICALLY_HIGH":       8,
	}
)

func (x EnergyLevel_Quantity_Threshold) Enum() *EnergyLevel_Quantity_Threshold {
	p := new(EnergyLevel_Quantity_Threshold)
	*p = x
	return p
}

func (x EnergyLevel_Quantity_Threshold) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnergyLevel_Quantity_Threshold) Descriptor() protoreflect.EnumDescriptor {
	return file_traits_energy_storage_proto_enumTypes[2].Descriptor()
}

func (EnergyLevel_Quantity_Threshold) Type() protoreflect.EnumType {
	return &file_traits_energy_storage_proto_enumTypes[2]
}

func (x EnergyLevel_Quantity_Threshold) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnergyLevel_Quantity_Threshold.Descriptor instead.
func (EnergyLevel_Quantity_Threshold) EnumDescriptor() ([]byte, []int) {
	return file_traits_energy_storage_proto_rawDescGZIP(), []int{1, 2, 0}
}

// EnergyLevelSupport describes the capabilities of devices implementing this trait.
type EnergyLevelSupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How a named device supports read/write/pull apis
	ResourceSupport *types.ResourceSupport `protobuf:"bytes,1,opt,name=resource_support,json=resourceSupport,proto3" json:"resource_support,omitempty"`
	// A true value indicates that the device can be recharged.
	// A rechargeable device should report charging and until_full where appropriate.
	Rechargeable bool `protobuf:"varint,2,opt,name=rechargeable,proto3" json:"rechargeable,omitempty"`
	// A description of how the charge status of the device can be changed.
	ChargeControl EnergyLevelSupport_ChargeControl `protobuf:"varint,3,opt,name=charge_control,json=chargeControl,proto3,enum=smartcore.traits.EnergyLevelSupport_ChargeControl" json:"charge_control,omitempty"`
}

func (x *EnergyLevelSupport) Reset() {
	*x = EnergyLevelSupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_energy_storage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnergyLevelSupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnergyLevelSupport) ProtoMessage() {}

func (x *EnergyLevelSupport) ProtoReflect() protoreflect.Message {
	mi := &file_traits_energy_storage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnergyLevelSupport.ProtoReflect.Descriptor instead.
func (*EnergyLevelSupport) Descriptor() ([]byte, []int) {
	return file_traits_energy_storage_proto_rawDescGZIP(), []int{0}
}

func (x *EnergyLevelSupport) GetResourceSupport() *types.ResourceSupport {
	if x != nil {
		return x.ResourceSupport
	}
	return nil
}

func (x *EnergyLevelSupport) GetRechargeable() bool {
	if x != nil {
		return x.Rechargeable
	}
	return false
}

func (x *EnergyLevelSupport) GetChargeControl() EnergyLevelSupport_ChargeControl {
	if x != nil {
		return x.ChargeControl
	}
	return EnergyLevelSupport_CHARGE_CONTROL_UNSPECIFIED
}

// EnergyLevel describes properties related to the current and potential charge levels of the device.
type EnergyLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flow describes the direction of the flow of energy from the devices point of view.
	// If all fields are absent then we don't know how energy is flowing.
	//
	// Types that are assignable to Flow:
	//
	//	*EnergyLevel_Discharge
	//	*EnergyLevel_Charge
	//	*EnergyLevel_Idle
	Flow isEnergyLevel_Flow `protobuf_oneof:"flow"`
	// Quantity describes an absolute energy level using different units.
	Quantity *EnergyLevel_Quantity `protobuf:"bytes,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Is the device plugged in.
	PluggedIn bool `protobuf:"varint,6,opt,name=plugged_in,json=pluggedIn,proto3" json:"plugged_in,omitempty"`
}

func (x *EnergyLevel) Reset() {
	*x = EnergyLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_energy_storage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnergyLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnergyLevel) ProtoMessage() {}

func (x *EnergyLevel) ProtoReflect() protoreflect.Message {
	mi := &file_traits_energy_storage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnergyLevel.ProtoReflect.Descriptor instead.
func (*EnergyLevel) Descriptor() ([]byte, []int) {
	return file_traits_energy_storage_proto_rawDescGZIP(), []int{1}
}

func (m *EnergyLevel) GetFlow() isEnergyLevel_Flow {
	if m != nil {
		return m.Flow
	}
	return nil
}

func (x *EnergyLevel) GetDischarge() *EnergyLevel_Transfer {
	if x, ok := x.GetFlow().(*EnergyLevel_Discharge); ok {
		return x.Discharge
	}
	return nil
}

func (x *EnergyLevel) GetCharge() *EnergyLevel_Transfer {
	if x, ok := x.GetFlow().(*EnergyLevel_Charge); ok {
		return x.Charge
	}
	return nil
}

func (x *EnergyLevel) GetIdle() *EnergyLevel_Steady {
	if x, ok := x.GetFlow().(*EnergyLevel_Idle); ok {
		return x.Idle
	}
	return nil
}

func (x *EnergyLevel) GetQuantity() *EnergyLevel_Quantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *EnergyLevel) GetPluggedIn() bool {
	if x != nil {
		return x.PluggedIn
	}
	return false
}

type isEnergyLevel_Flow interface {
	isEnergyLevel_Flow()
}

type EnergyLevel_Discharge struct {
	// Discharge denotes that the device is currently decreasing its energy level.
	// An empty transfer object is valid and says: this device is discharging.
	Discharge *EnergyLevel_Transfer `protobuf:"bytes,2,opt,name=discharge,proto3,oneof"`
}

type EnergyLevel_Charge struct {
	// Charge denotes that the device is currently increasing its energy level.
	// An empty transfer object is valid and says: this device is charging.
	Charge *EnergyLevel_Transfer `protobuf:"bytes,3,opt,name=charge,proto3,oneof"`
}

type EnergyLevel_Idle struct {
	// Idle denotes that the device is neither increasing or decreasing its energy level.
	Idle *EnergyLevel_Steady `protobuf:"bytes,4,opt,name=idle,proto3,oneof"`
}

func (*EnergyLevel_Discharge) isEnergyLevel_Flow() {}

func (*EnergyLevel_Charge) isEnergyLevel_Flow() {}

func (*EnergyLevel_Idle) isEnergyLevel_Flow() {}

type GetEnergyLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device to fetch the state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Fields to fetch relative to the EnergyLevel type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
}

func (x *GetEnergyLevelRequest) Reset() {
	*x = GetEnergyLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_energy_storage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEnergyLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnergyLevelRequest) ProtoMessage() {}

func (x *GetEnergyLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_energy_storage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnergyLevelRequest.ProtoReflect.Descriptor instead.
func (*GetEnergyLevelRequest) Descriptor() ([]byte, []int) {
	return file_traits_energy_storage_proto_rawDescGZIP(), []int{2}
}

func (x *GetEnergyLevelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetEnergyLevelRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

type PullEnergyLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device to fetch the state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Fields to fetch relative to the EnergyLevel type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// When true the device will only send changes to the resource value.
	// The default behaviour is to send the current value immediately followed by any updates as they happen.
	UpdatesOnly bool `protobuf:"varint,3,opt,name=updates_only,json=updatesOnly,proto3" json:"updates_only,omitempty"`
}

func (x *PullEnergyLevelRequest) Reset() {
	*x = PullEnergyLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_energy_storage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullEnergyLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullEnergyLevelRequest) ProtoMessage() {}

func (x *PullEnergyLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_energy_storage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullEnergyLevelRequest.ProtoReflect.Descriptor instead.
func (*PullEnergyLevelRequest) Descriptor() ([]byte, []int) {
	return file_traits_energy_storage_proto_rawDescGZIP(), []int{3}
}

func (x *PullEnergyLevelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullEnergyLevelRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *PullEnergyLevelRequest) GetUpdatesOnly() bool {
	if x != nil {
		return x.UpdatesOnly
	}
	return false
}

type PullEnergyLevelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Changes since the last message
	Changes []*PullEnergyLevelResponse_Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *PullEnergyLevelResponse) Reset() {
	*x = PullEnergyLevelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_energy_storage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullEnergyLevelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullEnergyLevelResponse) ProtoMessage() {}

func (x *PullEnergyLevelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traits_energy_storage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullEnergyLevelResponse.ProtoReflect.Descriptor instead.
func (*PullEnergyLevelResponse) Descriptor() ([]byte, []int) {
	return file_traits_energy_storage_proto_rawDescGZIP(), []int{4}
}

func (x *PullEnergyLevelResponse) GetChanges() []*PullEnergyLevelResponse_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

type ChargeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// True to begin charging, false to stop.
	Charge bool `protobuf:"varint,2,opt,name=charge,proto3" json:"charge,omitempty"`
}

func (x *ChargeRequest) Reset() {
	*x = ChargeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_energy_storage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeRequest) ProtoMessage() {}

func (x *ChargeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_energy_storage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeRequest.ProtoReflect.Descriptor instead.
func (*ChargeRequest) Descriptor() ([]byte, []int) {
	return file_traits_energy_storage_proto_rawDescGZIP(), []int{5}
}

func (x *ChargeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChargeRequest) GetCharge() bool {
	if x != nil {
		return x.Charge
	}
	return false
}

type ChargeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChargeResponse) Reset() {
	*x = ChargeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_energy_storage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeResponse) ProtoMessage() {}

func (x *ChargeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traits_energy_storage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeResponse.ProtoReflect.Descriptor instead.
func (*ChargeResponse) Descriptor() ([]byte, []int) {
	return file_traits_energy_storage_proto_rawDescGZIP(), []int{6}
}

type DescribeEnergyLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DescribeEnergyLevelRequest) Reset() {
	*x = DescribeEnergyLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_energy_storage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeEnergyLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeEnergyLevelRequest) ProtoMessage() {}

func (x *DescribeEnergyLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_energy_storage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeEnergyLevelRequest.ProtoReflect.Descriptor instead.
func (*DescribeEnergyLevelRequest) Descriptor() ([]byte, []int) {
	return file_traits_energy_storage_proto_rawDescGZIP(), []int{7}
}

func (x *DescribeEnergyLevelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Transfer describes how energy is being transferred, either into or out of the device.
// See discharge and charge for information on the direction of the transfer.
type EnergyLevel_Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Start time describes when this transfer started
	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// How long until the transfer is complete.
	// Measured relative to the current time according to the devices clock.
	Time *durationpb.Duration `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// How many more kilometers need to be travelled before the transfer is complete.
	// For example when discharging, this might represent kilometers until the battery is empty.
	DistanceKm float32 `protobuf:"fixed32,3,opt,name=distance_km,json=distanceKm,proto3" json:"distance_km,omitempty"`
	// Speed describes relative transfer speed for the device.
	Speed EnergyLevel_Transfer_Speed `protobuf:"varint,4,opt,name=speed,proto3,enum=smartcore.traits.EnergyLevel_Transfer_Speed" json:"speed,omitempty"`
	// The planned end values for the transfer.
	// There is no guarantee that the transfer will reach these values, but they are useful for informational and
	// planning purposes.
	Target *EnergyLevel_Quantity `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *EnergyLevel_Transfer) Reset() {
	*x = EnergyLevel_Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_energy_storage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnergyLevel_Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnergyLevel_Transfer) ProtoMessage() {}

func (x *EnergyLevel_Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_traits_energy_storage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnergyLevel_Transfer.ProtoReflect.Descriptor instead.
func (*EnergyLevel_Transfer) Descriptor() ([]byte, []int) {
	return file_traits_energy_storage_proto_rawDescGZIP(), []int{1, 0}
}

func (x *EnergyLevel_Transfer) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *EnergyLevel_Transfer) GetTime() *durationpb.Duration {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *EnergyLevel_Transfer) GetDistanceKm() float32 {
	if x != nil {
		return x.DistanceKm
	}
	return 0
}

func (x *EnergyLevel_Transfer) GetSpeed() EnergyLevel_Transfer_Speed {
	if x != nil {
		return x.Speed
	}
	return EnergyLevel_Transfer_SPEED_UNSPECIFIED
}

func (x *EnergyLevel_Transfer) GetTarget() *EnergyLevel_Quantity {
	if x != nil {
		return x.Target
	}
	return nil
}

// Steady describes a non-changing energy level.
type EnergyLevel_Steady struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *EnergyLevel_Steady) Reset() {
	*x = EnergyLevel_Steady{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_energy_storage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnergyLevel_Steady) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnergyLevel_Steady) ProtoMessage() {}

func (x *EnergyLevel_Steady) ProtoReflect() protoreflect.Message {
	mi := &file_traits_energy_storage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnergyLevel_Steady.ProtoReflect.Descriptor instead.
func (*EnergyLevel_Steady) Descriptor() ([]byte, []int) {
	return file_traits_energy_storage_proto_rawDescGZIP(), []int{1, 1}
}

func (x *EnergyLevel_Steady) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

// Quantity describes an absolute energy level using different units.
type EnergyLevel_Quantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Percentage float32 `protobuf:"fixed32,1,opt,name=percentage,proto3" json:"percentage,omitempty"` // [0, 100]
	EnergyKwh  float32 `protobuf:"fixed32,2,opt,name=energy_kwh,json=energyKwh,proto3" json:"energy_kwh,omitempty"`
	// descriptive defines preset descriptive quantities for the energy level of the device.
	// Numeric values should be preferred if provided.
	Descriptive EnergyLevel_Quantity_Threshold `protobuf:"varint,3,opt,name=descriptive,proto3,enum=smartcore.traits.EnergyLevel_Quantity_Threshold" json:"descriptive,omitempty"`
	// A measure of how far the device can travel with its current energy level.
	DistanceKm float32 `protobuf:"fixed32,4,opt,name=distance_km,json=distanceKm,proto3" json:"distance_km,omitempty"`
}

func (x *EnergyLevel_Quantity) Reset() {
	*x = EnergyLevel_Quantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_energy_storage_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnergyLevel_Quantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnergyLevel_Quantity) ProtoMessage() {}

func (x *EnergyLevel_Quantity) ProtoReflect() protoreflect.Message {
	mi := &file_traits_energy_storage_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnergyLevel_Quantity.ProtoReflect.Descriptor instead.
func (*EnergyLevel_Quantity) Descriptor() ([]byte, []int) {
	return file_traits_energy_storage_proto_rawDescGZIP(), []int{1, 2}
}

func (x *EnergyLevel_Quantity) GetPercentage() float32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *EnergyLevel_Quantity) GetEnergyKwh() float32 {
	if x != nil {
		return x.EnergyKwh
	}
	return 0
}

func (x *EnergyLevel_Quantity) GetDescriptive() EnergyLevel_Quantity_Threshold {
	if x != nil {
		return x.Descriptive
	}
	return EnergyLevel_Quantity_THRESHOLD_UNSPECIFIED
}

func (x *EnergyLevel_Quantity) GetDistanceKm() float32 {
	if x != nil {
		return x.DistanceKm
	}
	return 0
}

type PullEnergyLevelResponse_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name for the device that issued the change
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// when the change occurred
	ChangeTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
	// The new value for the energy level
	EnergyLevel *EnergyLevel `protobuf:"bytes,3,opt,name=energy_level,json=energyLevel,proto3" json:"energy_level,omitempty"`
}

func (x *PullEnergyLevelResponse_Change) Reset() {
	*x = PullEnergyLevelResponse_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_energy_storage_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullEnergyLevelResponse_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullEnergyLevelResponse_Change) ProtoMessage() {}

func (x *PullEnergyLevelResponse_Change) ProtoReflect() protoreflect.Message {
	mi := &file_traits_energy_storage_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullEnergyLevelResponse_Change.ProtoReflect.Descriptor instead.
func (*PullEnergyLevelResponse_Change) Descriptor() ([]byte, []int) {
	return file_traits_energy_storage_proto_rawDescGZIP(), []int{4, 0}
}

func (x *PullEnergyLevelResponse_Change) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullEnergyLevelResponse_Change) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

func (x *PullEnergyLevelResponse_Change) GetEnergyLevel() *EnergyLevel {
	if x != nil {
		return x.EnergyLevel
	}
	return nil
}

var File_traits_energy_storage_proto protoreflect.FileDescriptor

var file_traits_energy_storage_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x10, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x02, 0x0a, 0x12, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4b, 0x0a, 0x10, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x59, 0x0a, 0x0e,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0x5c, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x48, 0x41, 0x52,
	0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x4c, 0x4c, 0x10, 0x04, 0x22, 0xc6, 0x08, 0x0a, 0x0b, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x46, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x09, 0x64, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x40, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,
	0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12,
	0x3a, 0x0a, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,
	0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x65,
	0x61, 0x64, 0x79, 0x48, 0x00, 0x52, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,
	0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x6c, 0x75, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x1a, 0xf9,
	0x02, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6b, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4b, 0x6d, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x5e, 0x0a, 0x05, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x58,
	0x54, 0x52, 0x41, 0x5f, 0x53, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4c,
	0x4f, 0x57, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x03,
	0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x53, 0x54, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x58,
	0x54, 0x52, 0x41, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x10, 0x05, 0x1a, 0x43, 0x0a, 0x06, 0x53, 0x74,
	0x65, 0x61, 0x64, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x1a,
	0xc4, 0x02, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x6b, 0x77, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4b, 0x77, 0x68, 0x12, 0x52, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x30, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x2e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x6d,
	0x22, 0x83, 0x01, 0x0a, 0x09, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x19,
	0x0a, 0x15, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x52, 0x49,
	0x54, 0x49, 0x43, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x04, 0x12, 0x08, 0x0a,
	0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10,
	0x07, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x4c, 0x59, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x10, 0x08, 0x42, 0x06, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x64,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x22, 0x88, 0x01, 0x0a, 0x16, 0x50, 0x75, 0x6c, 0x6c, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22,
	0x83, 0x02, 0x0a, 0x17, 0x50, 0x75, 0x6c, 0x6c, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e,
	0x50, 0x75, 0x6c, 0x6c, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x9b, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0b, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x3b, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x22, 0x10, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x0a, 0x1a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0xa3, 0x02, 0x0a, 0x10, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x70, 0x69, 0x12, 0x58, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x27, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x68, 0x0a, 0x0f, 0x50, 0x75, 0x6c, 0x6c, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x4b, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x7e, 0x0a, 0x11,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x69, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x7d, 0x0a, 0x14,
	0x64, 0x65, 0x76, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x73, 0x42, 0x12, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x2d, 0x63, 0x6f, 0x72,
	0x65, 0x2d, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x73, 0xaa, 0x02, 0x10, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0xca, 0x02, 0x10, 0x53, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x5c, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_traits_energy_storage_proto_rawDescOnce sync.Once
	file_traits_energy_storage_proto_rawDescData = file_traits_energy_storage_proto_rawDesc
)

func file_traits_energy_storage_proto_rawDescGZIP() []byte {
	file_traits_energy_storage_proto_rawDescOnce.Do(func() {
		file_traits_energy_storage_proto_rawDescData = protoimpl.X.CompressGZIP(file_traits_energy_storage_proto_rawDescData)
	})
	return file_traits_energy_storage_proto_rawDescData
}

var file_traits_energy_storage_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_traits_energy_storage_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_traits_energy_storage_proto_goTypes = []any{
	(EnergyLevelSupport_ChargeControl)(0),  // 0: smartcore.traits.EnergyLevelSupport.ChargeControl
	(EnergyLevel_Transfer_Speed)(0),        // 1: smartcore.traits.EnergyLevel.Transfer.Speed
	(EnergyLevel_Quantity_Threshold)(0),    // 2: smartcore.traits.EnergyLevel.Quantity.Threshold
	(*EnergyLevelSupport)(nil),             // 3: smartcore.traits.EnergyLevelSupport
	(*EnergyLevel)(nil),                    // 4: smartcore.traits.EnergyLevel
	(*GetEnergyLevelRequest)(nil),          // 5: smartcore.traits.GetEnergyLevelRequest
	(*PullEnergyLevelRequest)(nil),         // 6: smartcore.traits.PullEnergyLevelRequest
	(*PullEnergyLevelResponse)(nil),        // 7: smartcore.traits.PullEnergyLevelResponse
	(*ChargeRequest)(nil),                  // 8: smartcore.traits.ChargeRequest
	(*ChargeResponse)(nil),                 // 9: smartcore.traits.ChargeResponse
	(*DescribeEnergyLevelRequest)(nil),     // 10: smartcore.traits.DescribeEnergyLevelRequest
	(*EnergyLevel_Transfer)(nil),           // 11: smartcore.traits.EnergyLevel.Transfer
	(*EnergyLevel_Steady)(nil),             // 12: smartcore.traits.EnergyLevel.Steady
	(*EnergyLevel_Quantity)(nil),           // 13: smartcore.traits.EnergyLevel.Quantity
	(*PullEnergyLevelResponse_Change)(nil), // 14: smartcore.traits.PullEnergyLevelResponse.Change
	(*types.ResourceSupport)(nil),          // 15: smartcore.types.ResourceSupport
	(*fieldmaskpb.FieldMask)(nil),          // 16: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),          // 17: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),            // 18: google.protobuf.Duration
}
var file_traits_energy_storage_proto_depIdxs = []int32{
	15, // 0: smartcore.traits.EnergyLevelSupport.resource_support:type_name -> smartcore.types.ResourceSupport
	0,  // 1: smartcore.traits.EnergyLevelSupport.charge_control:type_name -> smartcore.traits.EnergyLevelSupport.ChargeControl
	11, // 2: smartcore.traits.EnergyLevel.discharge:type_name -> smartcore.traits.EnergyLevel.Transfer
	11, // 3: smartcore.traits.EnergyLevel.charge:type_name -> smartcore.traits.EnergyLevel.Transfer
	12, // 4: smartcore.traits.EnergyLevel.idle:type_name -> smartcore.traits.EnergyLevel.Steady
	13, // 5: smartcore.traits.EnergyLevel.quantity:type_name -> smartcore.traits.EnergyLevel.Quantity
	16, // 6: smartcore.traits.GetEnergyLevelRequest.read_mask:type_name -> google.protobuf.FieldMask
	16, // 7: smartcore.traits.PullEnergyLevelRequest.read_mask:type_name -> google.protobuf.FieldMask
	14, // 8: smartcore.traits.PullEnergyLevelResponse.changes:type_name -> smartcore.traits.PullEnergyLevelResponse.Change
	17, // 9: smartcore.traits.EnergyLevel.Transfer.start_time:type_name -> google.protobuf.Timestamp
	18, // 10: smartcore.traits.EnergyLevel.Transfer.time:type_name -> google.protobuf.Duration
	1,  // 11: smartcore.traits.EnergyLevel.Transfer.speed:type_name -> smartcore.traits.EnergyLevel.Transfer.Speed
	13, // 12: smartcore.traits.EnergyLevel.Transfer.target:type_name -> smartcore.traits.EnergyLevel.Quantity
	17, // 13: smartcore.traits.EnergyLevel.Steady.start_time:type_name -> google.protobuf.Timestamp
	2,  // 14: smartcore.traits.EnergyLevel.Quantity.descriptive:type_name -> smartcore.traits.EnergyLevel.Quantity.Threshold
	17, // 15: smartcore.traits.PullEnergyLevelResponse.Change.change_time:type_name -> google.protobuf.Timestamp
	4,  // 16: smartcore.traits.PullEnergyLevelResponse.Change.energy_level:type_name -> smartcore.traits.EnergyLevel
	5,  // 17: smartcore.traits.EnergyStorageApi.GetEnergyLevel:input_type -> smartcore.traits.GetEnergyLevelRequest
	6,  // 18: smartcore.traits.EnergyStorageApi.PullEnergyLevel:input_type -> smartcore.traits.PullEnergyLevelRequest
	8,  // 19: smartcore.traits.EnergyStorageApi.Charge:input_type -> smartcore.traits.ChargeRequest
	10, // 20: smartcore.traits.EnergyStorageInfo.DescribeEnergyLevel:input_type -> smartcore.traits.DescribeEnergyLevelRequest
	4,  // 21: smartcore.traits.EnergyStorageApi.GetEnergyLevel:output_type -> smartcore.traits.EnergyLevel
	7,  // 22: smartcore.traits.EnergyStorageApi.PullEnergyLevel:output_type -> smartcore.traits.PullEnergyLevelResponse
	9,  // 23: smartcore.traits.EnergyStorageApi.Charge:output_type -> smartcore.traits.ChargeResponse
	3,  // 24: smartcore.traits.EnergyStorageInfo.DescribeEnergyLevel:output_type -> smartcore.traits.EnergyLevelSupport
	21, // [21:25] is the sub-list for method output_type
	17, // [17:21] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_traits_energy_storage_proto_init() }
func file_traits_energy_storage_proto_init() {
	if File_traits_energy_storage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_traits_energy_storage_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*EnergyLevelSupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_energy_storage_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*EnergyLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_energy_storage_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetEnergyLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_energy_storage_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PullEnergyLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_energy_storage_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PullEnergyLevelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_energy_storage_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ChargeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_energy_storage_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ChargeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_energy_storage_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DescribeEnergyLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_energy_storage_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*EnergyLevel_Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_energy_storage_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*EnergyLevel_Steady); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_energy_storage_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*EnergyLevel_Quantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_energy_storage_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*PullEnergyLevelResponse_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_traits_energy_storage_proto_msgTypes[1].OneofWrappers = []any{
		(*EnergyLevel_Discharge)(nil),
		(*EnergyLevel_Charge)(nil),
		(*EnergyLevel_Idle)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_traits_energy_storage_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_traits_energy_storage_proto_goTypes,
		DependencyIndexes: file_traits_energy_storage_proto_depIdxs,
		EnumInfos:         file_traits_energy_storage_proto_enumTypes,
		MessageInfos:      file_traits_energy_storage_proto_msgTypes,
	}.Build()
	File_traits_energy_storage_proto = out.File
	file_traits_energy_storage_proto_rawDesc = nil
	file_traits_energy_storage_proto_goTypes = nil
	file_traits_energy_storage_proto_depIdxs = nil
}
