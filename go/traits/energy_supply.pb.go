// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: traits/energy_supply.proto

package traits

import (
	types "github.com/smart-core-os/sc-api/go/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PowerCapacitySupport describes the capabilities of devices implementing this trait.
type PowerCapacitySupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How a named device supports read/write/pull apis
	ResourceSupport *types.ResourceSupport `protobuf:"bytes,1,opt,name=resource_support,json=resourceSupport,proto3" json:"resource_support,omitempty"`
	// Attributes associated with the available capacity property of the supply.
	// This applies to the rating, load, capacity, and free properties of PowerCapacity.
	AvailableAttributes *types.FloatAttributes `protobuf:"bytes,2,opt,name=available_attributes,json=availableAttributes,proto3" json:"available_attributes,omitempty"`
}

func (x *PowerCapacitySupport) Reset() {
	*x = PowerCapacitySupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_energy_supply_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerCapacitySupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerCapacitySupport) ProtoMessage() {}

func (x *PowerCapacitySupport) ProtoReflect() protoreflect.Message {
	mi := &file_traits_energy_supply_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerCapacitySupport.ProtoReflect.Descriptor instead.
func (*PowerCapacitySupport) Descriptor() ([]byte, []int) {
	return file_traits_energy_supply_proto_rawDescGZIP(), []int{0}
}

func (x *PowerCapacitySupport) GetResourceSupport() *types.ResourceSupport {
	if x != nil {
		return x.ResourceSupport
	}
	return nil
}

func (x *PowerCapacitySupport) GetAvailableAttributes() *types.FloatAttributes {
	if x != nil {
		return x.AvailableAttributes
	}
	return nil
}

// PowerCapacity describes how much power is available to be supplied by a device.
// This can also describe how much isn't available.
//
// Note that load + free <= rating (when rating is present).
// When rating is absent it is acceptable to estimate it using load + free for most cases.
// The device may only make some of the total power available for consumption.
//
// Notified draw is not accounted for as part of the free calculation.
// If it were, during the ramp period the device would count the notified load + the actual load
// and potentially double count how much capacity is being used.
type PowerCapacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// What is the maximum rating the device can ever supply.
	// Unlikely to change without changes to the electric circuit.
	// In amps.
	// Zero means absent, not a rating of 0 amps.
	Rating float32 `protobuf:"fixed32,1,opt,name=rating,proto3" json:"rating,omitempty"`
	// The voltage level the device supplies.
	// In volts.
	// Zero means absent, not 0 volts.
	Voltage float32 `protobuf:"fixed32,2,opt,name=voltage,proto3" json:"voltage,omitempty"`
	// How much power is currently drawn from this device.
	// In amps.
	Load *float32 `protobuf:"fixed32,3,opt,name=load,proto3,oneof" json:"load,omitempty"`
	// How much of the rated capacity can be supplied from this device.
	// This will update as available capacity changes.
	// In amps.
	// For example a 100A rating with 30A load is likely to respond with 70A capacity.
	Capacity *float32 `protobuf:"fixed32,4,opt,name=capacity,proto3,oneof" json:"capacity,omitempty"`
	// How much more capacity can be drawn from this device.
	// In amps.
	// Notification of draw should _not_ be included in the calculation for this value.
	// For example a 100A rating with 30A load with a 10A configured safety margin is likely to respond with 60A.
	Free *float32 `protobuf:"fixed32,5,opt,name=free,proto3,oneof" json:"free,omitempty"`
	// A total for how much current (in amps) consumers of this supply have notified they will be drawing.
	// See DrawNotification.
	Notified float32 `protobuf:"fixed32,6,opt,name=notified,proto3" json:"notified,omitempty"`
}

func (x *PowerCapacity) Reset() {
	*x = PowerCapacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_energy_supply_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerCapacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerCapacity) ProtoMessage() {}

func (x *PowerCapacity) ProtoReflect() protoreflect.Message {
	mi := &file_traits_energy_supply_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerCapacity.ProtoReflect.Descriptor instead.
func (*PowerCapacity) Descriptor() ([]byte, []int) {
	return file_traits_energy_supply_proto_rawDescGZIP(), []int{1}
}

func (x *PowerCapacity) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *PowerCapacity) GetVoltage() float32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *PowerCapacity) GetLoad() float32 {
	if x != nil && x.Load != nil {
		return *x.Load
	}
	return 0
}

func (x *PowerCapacity) GetCapacity() float32 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

func (x *PowerCapacity) GetFree() float32 {
	if x != nil && x.Free != nil {
		return *x.Free
	}
	return 0
}

func (x *PowerCapacity) GetNotified() float32 {
	if x != nil {
		return x.Notified
	}
	return 0
}

// DrawNotification represents a consuming device informing a supply device that it intends to draw current.
// Callers can use this to help make a power supply more resilient to multiple consumers that might be adjusting
// their draw at the same time.
//
// Min Draw Example
//
// Given a notification of {max_draw: 50A, min_draw: 10A} applied to a device with only 30A free.
// The device may decide to respond as if the notification was for exactly 30A,
// as 30A is within the [10,50] amp range specified in the request.
//
// If no min_draw was specified the device may have responded with an error indicating that
// the value of max_draw:50A isn't available.
type DrawNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies the notification of draw.
	// Required for update or delete operations, should be absent for add operations
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The maximum draw that the caller is expecting to consume.
	// In amps.
	// During read, or as part of a write response, this is the maximum draw the supply expects the caller to consume.
	MaxDraw float32 `protobuf:"fixed32,2,opt,name=max_draw,json=maxDraw,proto3" json:"max_draw,omitempty"`
	// How long does the caller expect it will be before the draw level has reached its maximum.
	// The device is free to forget draw notifications after this duration has elapsed as it is expected
	// the caller is actually drawing the current so it is not available anymore.
	RampDuration *durationpb.Duration `protobuf:"bytes,3,opt,name=ramp_duration,json=rampDuration,proto3" json:"ramp_duration,omitempty"`
	// The minimum draw that the caller will accept.
	// A zero value indicates that the caller only draws using max_draw and no less.
	// During write, a non-zero value is an indication to the device that it may choose an expected draw value
	// somewhere between the min_draw and max_draw, typically based on free and unallocated current.
	// The max_draw of the response will inform the caller which value has been chosen.
	// See message docs for more details.
	MinDraw float32 `protobuf:"fixed32,4,opt,name=min_draw,json=minDraw,proto3" json:"min_draw,omitempty"`
}

func (x *DrawNotification) Reset() {
	*x = DrawNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_energy_supply_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawNotification) ProtoMessage() {}

func (x *DrawNotification) ProtoReflect() protoreflect.Message {
	mi := &file_traits_energy_supply_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawNotification.ProtoReflect.Descriptor instead.
func (*DrawNotification) Descriptor() ([]byte, []int) {
	return file_traits_energy_supply_proto_rawDescGZIP(), []int{2}
}

func (x *DrawNotification) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DrawNotification) GetMaxDraw() float32 {
	if x != nil {
		return x.MaxDraw
	}
	return 0
}

func (x *DrawNotification) GetRampDuration() *durationpb.Duration {
	if x != nil {
		return x.RampDuration
	}
	return nil
}

func (x *DrawNotification) GetMinDraw() float32 {
	if x != nil {
		return x.MinDraw
	}
	return 0
}

type GetPowerCapacityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device to fetch the state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Fields to fetch relative to the PowerCapacity type
	Fields *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
}

func (x *GetPowerCapacityRequest) Reset() {
	*x = GetPowerCapacityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_energy_supply_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPowerCapacityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPowerCapacityRequest) ProtoMessage() {}

func (x *GetPowerCapacityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_energy_supply_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPowerCapacityRequest.ProtoReflect.Descriptor instead.
func (*GetPowerCapacityRequest) Descriptor() ([]byte, []int) {
	return file_traits_energy_supply_proto_rawDescGZIP(), []int{3}
}

func (x *GetPowerCapacityRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetPowerCapacityRequest) GetFields() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Fields
	}
	return nil
}

type PullPowerCapacityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device to fetch the state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Fields to fetch relative to the PowerCapacity type
	Fields *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
}

func (x *PullPowerCapacityRequest) Reset() {
	*x = PullPowerCapacityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_energy_supply_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullPowerCapacityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullPowerCapacityRequest) ProtoMessage() {}

func (x *PullPowerCapacityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_energy_supply_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullPowerCapacityRequest.ProtoReflect.Descriptor instead.
func (*PullPowerCapacityRequest) Descriptor() ([]byte, []int) {
	return file_traits_energy_supply_proto_rawDescGZIP(), []int{4}
}

func (x *PullPowerCapacityRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullPowerCapacityRequest) GetFields() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Fields
	}
	return nil
}

type PullPowerCapacityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Changes since the last message
	Changes []*PullPowerCapacityResponse_Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *PullPowerCapacityResponse) Reset() {
	*x = PullPowerCapacityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_energy_supply_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullPowerCapacityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullPowerCapacityResponse) ProtoMessage() {}

func (x *PullPowerCapacityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traits_energy_supply_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullPowerCapacityResponse.ProtoReflect.Descriptor instead.
func (*PullPowerCapacityResponse) Descriptor() ([]byte, []int) {
	return file_traits_energy_supply_proto_rawDescGZIP(), []int{5}
}

func (x *PullPowerCapacityResponse) GetChanges() []*PullPowerCapacityResponse_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

type DescribePowerCapacityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DescribePowerCapacityRequest) Reset() {
	*x = DescribePowerCapacityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_energy_supply_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribePowerCapacityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribePowerCapacityRequest) ProtoMessage() {}

func (x *DescribePowerCapacityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_energy_supply_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribePowerCapacityRequest.ProtoReflect.Descriptor instead.
func (*DescribePowerCapacityRequest) Descriptor() ([]byte, []int) {
	return file_traits_energy_supply_proto_rawDescGZIP(), []int{6}
}

func (x *DescribePowerCapacityRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateDrawNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device
	Name             string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DrawNotification *DrawNotification `protobuf:"bytes,2,opt,name=draw_notification,json=drawNotification,proto3" json:"draw_notification,omitempty"`
}

func (x *CreateDrawNotificationRequest) Reset() {
	*x = CreateDrawNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_energy_supply_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDrawNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDrawNotificationRequest) ProtoMessage() {}

func (x *CreateDrawNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_energy_supply_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDrawNotificationRequest.ProtoReflect.Descriptor instead.
func (*CreateDrawNotificationRequest) Descriptor() ([]byte, []int) {
	return file_traits_energy_supply_proto_rawDescGZIP(), []int{7}
}

func (x *CreateDrawNotificationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDrawNotificationRequest) GetDrawNotification() *DrawNotification {
	if x != nil {
		return x.DrawNotification
	}
	return nil
}

type UpdateDrawNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device
	Name             string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DrawNotification *DrawNotification `protobuf:"bytes,2,opt,name=draw_notification,json=drawNotification,proto3" json:"draw_notification,omitempty"`
}

func (x *UpdateDrawNotificationRequest) Reset() {
	*x = UpdateDrawNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_energy_supply_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDrawNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDrawNotificationRequest) ProtoMessage() {}

func (x *UpdateDrawNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_energy_supply_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDrawNotificationRequest.ProtoReflect.Descriptor instead.
func (*UpdateDrawNotificationRequest) Descriptor() ([]byte, []int) {
	return file_traits_energy_supply_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateDrawNotificationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDrawNotificationRequest) GetDrawNotification() *DrawNotification {
	if x != nil {
		return x.DrawNotification
	}
	return nil
}

type DeleteDrawNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Id of the draw notification returned during the CreateDrawNotification call.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDrawNotificationRequest) Reset() {
	*x = DeleteDrawNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_energy_supply_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDrawNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDrawNotificationRequest) ProtoMessage() {}

func (x *DeleteDrawNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_energy_supply_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDrawNotificationRequest.ProtoReflect.Descriptor instead.
func (*DeleteDrawNotificationRequest) Descriptor() ([]byte, []int) {
	return file_traits_energy_supply_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteDrawNotificationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteDrawNotificationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PullPowerCapacityResponse_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name for the device that issued the change
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// when the change occurred
	ChangeTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
	// The new value for the available capacity
	AvailableCapacity *PowerCapacity `protobuf:"bytes,3,opt,name=available_capacity,json=availableCapacity,proto3" json:"available_capacity,omitempty"`
}

func (x *PullPowerCapacityResponse_Change) Reset() {
	*x = PullPowerCapacityResponse_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_energy_supply_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullPowerCapacityResponse_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullPowerCapacityResponse_Change) ProtoMessage() {}

func (x *PullPowerCapacityResponse_Change) ProtoReflect() protoreflect.Message {
	mi := &file_traits_energy_supply_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullPowerCapacityResponse_Change.ProtoReflect.Descriptor instead.
func (*PullPowerCapacityResponse_Change) Descriptor() ([]byte, []int) {
	return file_traits_energy_supply_proto_rawDescGZIP(), []int{5, 0}
}

func (x *PullPowerCapacityResponse_Change) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullPowerCapacityResponse_Change) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

func (x *PullPowerCapacityResponse_Change) GetAvailableCapacity() *PowerCapacity {
	if x != nil {
		return x.AvailableCapacity
	}
	return nil
}

var File_traits_energy_supply_proto protoreflect.FileDescriptor

var file_traits_energy_supply_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x12, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x01, 0x0a, 0x14, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4b, 0x0a,
	0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x53, 0x0a, 0x14, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x13, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22,
	0xcf, 0x01, 0x0a, 0x0d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01,
	0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x04, 0x66,
	0x72, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x72, 0x65,
	0x65, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x44, 0x72, 0x61, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x72,
	0x61, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x61,
	0x77, 0x12, 0x3e, 0x0a, 0x0d, 0x72, 0x61, 0x6d, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x61, 0x6d, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x22, 0x61, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22,
	0x62, 0x0a, 0x18, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x22, 0x95, 0x02, 0x0a, 0x19, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4c, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a,
	0xa9, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0x32, 0x0a, 0x1c, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x84, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x77, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x73, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x64, 0x72, 0x61, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x72, 0x61, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x11,
	0x64, 0x72, 0x61, 0x77, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x64, 0x72, 0x61,
	0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a,
	0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x72, 0x61, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x32, 0xa1, 0x04, 0x0a, 0x0e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x41, 0x70, 0x69, 0x12, 0x5e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x29, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x6e, 0x0a, 0x11, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75,
	0x6c, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6d, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x72, 0x61, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2f, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x77, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x73, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72,
	0x61, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x77, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x73, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x72, 0x61,
	0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x72, 0x61, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x82, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6f, 0x0a, 0x15, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x2e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x7b, 0x0a, 0x14, 0x64,
	0x65, 0x76, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x73, 0x42, 0x10, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6f,
	0x73, 0x2f, 0x73, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x73, 0xaa, 0x02, 0x10, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x69, 0x74, 0x73, 0xca, 0x02, 0x10, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x5c, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_traits_energy_supply_proto_rawDescOnce sync.Once
	file_traits_energy_supply_proto_rawDescData = file_traits_energy_supply_proto_rawDesc
)

func file_traits_energy_supply_proto_rawDescGZIP() []byte {
	file_traits_energy_supply_proto_rawDescOnce.Do(func() {
		file_traits_energy_supply_proto_rawDescData = protoimpl.X.CompressGZIP(file_traits_energy_supply_proto_rawDescData)
	})
	return file_traits_energy_supply_proto_rawDescData
}

var file_traits_energy_supply_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_traits_energy_supply_proto_goTypes = []interface{}{
	(*PowerCapacitySupport)(nil),             // 0: smartcore.traits.PowerCapacitySupport
	(*PowerCapacity)(nil),                    // 1: smartcore.traits.PowerCapacity
	(*DrawNotification)(nil),                 // 2: smartcore.traits.DrawNotification
	(*GetPowerCapacityRequest)(nil),          // 3: smartcore.traits.GetPowerCapacityRequest
	(*PullPowerCapacityRequest)(nil),         // 4: smartcore.traits.PullPowerCapacityRequest
	(*PullPowerCapacityResponse)(nil),        // 5: smartcore.traits.PullPowerCapacityResponse
	(*DescribePowerCapacityRequest)(nil),     // 6: smartcore.traits.DescribePowerCapacityRequest
	(*CreateDrawNotificationRequest)(nil),    // 7: smartcore.traits.CreateDrawNotificationRequest
	(*UpdateDrawNotificationRequest)(nil),    // 8: smartcore.traits.UpdateDrawNotificationRequest
	(*DeleteDrawNotificationRequest)(nil),    // 9: smartcore.traits.DeleteDrawNotificationRequest
	(*PullPowerCapacityResponse_Change)(nil), // 10: smartcore.traits.PullPowerCapacityResponse.Change
	(*types.ResourceSupport)(nil),            // 11: smartcore.types.ResourceSupport
	(*types.FloatAttributes)(nil),            // 12: smartcore.types.FloatAttributes
	(*durationpb.Duration)(nil),              // 13: google.protobuf.Duration
	(*fieldmaskpb.FieldMask)(nil),            // 14: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),            // 15: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                    // 16: google.protobuf.Empty
}
var file_traits_energy_supply_proto_depIdxs = []int32{
	11, // 0: smartcore.traits.PowerCapacitySupport.resource_support:type_name -> smartcore.types.ResourceSupport
	12, // 1: smartcore.traits.PowerCapacitySupport.available_attributes:type_name -> smartcore.types.FloatAttributes
	13, // 2: smartcore.traits.DrawNotification.ramp_duration:type_name -> google.protobuf.Duration
	14, // 3: smartcore.traits.GetPowerCapacityRequest.fields:type_name -> google.protobuf.FieldMask
	14, // 4: smartcore.traits.PullPowerCapacityRequest.fields:type_name -> google.protobuf.FieldMask
	10, // 5: smartcore.traits.PullPowerCapacityResponse.changes:type_name -> smartcore.traits.PullPowerCapacityResponse.Change
	2,  // 6: smartcore.traits.CreateDrawNotificationRequest.draw_notification:type_name -> smartcore.traits.DrawNotification
	2,  // 7: smartcore.traits.UpdateDrawNotificationRequest.draw_notification:type_name -> smartcore.traits.DrawNotification
	15, // 8: smartcore.traits.PullPowerCapacityResponse.Change.change_time:type_name -> google.protobuf.Timestamp
	1,  // 9: smartcore.traits.PullPowerCapacityResponse.Change.available_capacity:type_name -> smartcore.traits.PowerCapacity
	3,  // 10: smartcore.traits.PowerSupplyApi.GetPowerCapacity:input_type -> smartcore.traits.GetPowerCapacityRequest
	4,  // 11: smartcore.traits.PowerSupplyApi.PullPowerCapacity:input_type -> smartcore.traits.PullPowerCapacityRequest
	7,  // 12: smartcore.traits.PowerSupplyApi.CreateDrawNotification:input_type -> smartcore.traits.CreateDrawNotificationRequest
	8,  // 13: smartcore.traits.PowerSupplyApi.UpdateDrawNotification:input_type -> smartcore.traits.UpdateDrawNotificationRequest
	9,  // 14: smartcore.traits.PowerSupplyApi.DeleteDrawNotification:input_type -> smartcore.traits.DeleteDrawNotificationRequest
	6,  // 15: smartcore.traits.PowerSupplyInfo.DescribePowerCapacity:input_type -> smartcore.traits.DescribePowerCapacityRequest
	1,  // 16: smartcore.traits.PowerSupplyApi.GetPowerCapacity:output_type -> smartcore.traits.PowerCapacity
	5,  // 17: smartcore.traits.PowerSupplyApi.PullPowerCapacity:output_type -> smartcore.traits.PullPowerCapacityResponse
	2,  // 18: smartcore.traits.PowerSupplyApi.CreateDrawNotification:output_type -> smartcore.traits.DrawNotification
	2,  // 19: smartcore.traits.PowerSupplyApi.UpdateDrawNotification:output_type -> smartcore.traits.DrawNotification
	16, // 20: smartcore.traits.PowerSupplyApi.DeleteDrawNotification:output_type -> google.protobuf.Empty
	0,  // 21: smartcore.traits.PowerSupplyInfo.DescribePowerCapacity:output_type -> smartcore.traits.PowerCapacitySupport
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_traits_energy_supply_proto_init() }
func file_traits_energy_supply_proto_init() {
	if File_traits_energy_supply_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_traits_energy_supply_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerCapacitySupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_energy_supply_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerCapacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_energy_supply_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_energy_supply_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPowerCapacityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_energy_supply_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullPowerCapacityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_energy_supply_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullPowerCapacityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_energy_supply_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribePowerCapacityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_energy_supply_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDrawNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_energy_supply_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDrawNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_energy_supply_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDrawNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_energy_supply_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullPowerCapacityResponse_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_traits_energy_supply_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_traits_energy_supply_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_traits_energy_supply_proto_goTypes,
		DependencyIndexes: file_traits_energy_supply_proto_depIdxs,
		MessageInfos:      file_traits_energy_supply_proto_msgTypes,
	}.Build()
	File_traits_energy_supply_proto = out.File
	file_traits_energy_supply_proto_rawDesc = nil
	file_traits_energy_supply_proto_goTypes = nil
	file_traits_energy_supply_proto_depIdxs = nil
}
