// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: traits/parent.proto

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ParentApi_ListChildren_FullMethodName = "/smartcore.traits.ParentApi/ListChildren"
	ParentApi_PullChildren_FullMethodName = "/smartcore.traits.ParentApi/PullChildren"
)

// ParentApiClient is the client API for ParentApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ParentApi describes the capabilities of a device to have child devices.
type ParentApiClient interface {
	// ListChildren returns children associated with the named parent device.
	ListChildren(ctx context.Context, in *ListChildrenRequest, opts ...grpc.CallOption) (*ListChildrenResponse, error)
	// PullChildren subscribes to changes in the children associated with the named parent device.
	PullChildren(ctx context.Context, in *PullChildrenRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullChildrenResponse], error)
}

type parentApiClient struct {
	cc grpc.ClientConnInterface
}

func NewParentApiClient(cc grpc.ClientConnInterface) ParentApiClient {
	return &parentApiClient{cc}
}

func (c *parentApiClient) ListChildren(ctx context.Context, in *ListChildrenRequest, opts ...grpc.CallOption) (*ListChildrenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChildrenResponse)
	err := c.cc.Invoke(ctx, ParentApi_ListChildren_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parentApiClient) PullChildren(ctx context.Context, in *PullChildrenRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullChildrenResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ParentApi_ServiceDesc.Streams[0], ParentApi_PullChildren_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullChildrenRequest, PullChildrenResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ParentApi_PullChildrenClient = grpc.ServerStreamingClient[PullChildrenResponse]

// ParentApiServer is the server API for ParentApi service.
// All implementations must embed UnimplementedParentApiServer
// for forward compatibility.
//
// ParentApi describes the capabilities of a device to have child devices.
type ParentApiServer interface {
	// ListChildren returns children associated with the named parent device.
	ListChildren(context.Context, *ListChildrenRequest) (*ListChildrenResponse, error)
	// PullChildren subscribes to changes in the children associated with the named parent device.
	PullChildren(*PullChildrenRequest, grpc.ServerStreamingServer[PullChildrenResponse]) error
	mustEmbedUnimplementedParentApiServer()
}

// UnimplementedParentApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedParentApiServer struct{}

func (UnimplementedParentApiServer) ListChildren(context.Context, *ListChildrenRequest) (*ListChildrenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChildren not implemented")
}
func (UnimplementedParentApiServer) PullChildren(*PullChildrenRequest, grpc.ServerStreamingServer[PullChildrenResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullChildren not implemented")
}
func (UnimplementedParentApiServer) mustEmbedUnimplementedParentApiServer() {}
func (UnimplementedParentApiServer) testEmbeddedByValue()                   {}

// UnsafeParentApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParentApiServer will
// result in compilation errors.
type UnsafeParentApiServer interface {
	mustEmbedUnimplementedParentApiServer()
}

func RegisterParentApiServer(s grpc.ServiceRegistrar, srv ParentApiServer) {
	// If the following call pancis, it indicates UnimplementedParentApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ParentApi_ServiceDesc, srv)
}

func _ParentApi_ListChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChildrenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParentApiServer).ListChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParentApi_ListChildren_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParentApiServer).ListChildren(ctx, req.(*ListChildrenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParentApi_PullChildren_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullChildrenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ParentApiServer).PullChildren(m, &grpc.GenericServerStream[PullChildrenRequest, PullChildrenResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ParentApi_PullChildrenServer = grpc.ServerStreamingServer[PullChildrenResponse]

// ParentApi_ServiceDesc is the grpc.ServiceDesc for ParentApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParentApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.ParentApi",
	HandlerType: (*ParentApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListChildren",
			Handler:    _ParentApi_ListChildren_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullChildren",
			Handler:       _ParentApi_PullChildren_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/parent.proto",
}

// ParentInfoClient is the client API for ParentInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParentInfoClient interface {
}

type parentInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewParentInfoClient(cc grpc.ClientConnInterface) ParentInfoClient {
	return &parentInfoClient{cc}
}

// ParentInfoServer is the server API for ParentInfo service.
// All implementations must embed UnimplementedParentInfoServer
// for forward compatibility.
type ParentInfoServer interface {
	mustEmbedUnimplementedParentInfoServer()
}

// UnimplementedParentInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedParentInfoServer struct{}

func (UnimplementedParentInfoServer) mustEmbedUnimplementedParentInfoServer() {}
func (UnimplementedParentInfoServer) testEmbeddedByValue()                    {}

// UnsafeParentInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParentInfoServer will
// result in compilation errors.
type UnsafeParentInfoServer interface {
	mustEmbedUnimplementedParentInfoServer()
}

func RegisterParentInfoServer(s grpc.ServiceRegistrar, srv ParentInfoServer) {
	// If the following call pancis, it indicates UnimplementedParentInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ParentInfo_ServiceDesc, srv)
}

// ParentInfo_ServiceDesc is the grpc.ServiceDesc for ParentInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParentInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.ParentInfo",
	HandlerType: (*ParentInfoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "traits/parent.proto",
}
