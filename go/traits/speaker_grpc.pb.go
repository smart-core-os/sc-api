// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: traits/speaker.proto

package traits

import (
	context "context"
	types "github.com/smart-core-os/sc-api/go/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SpeakerApi_GetVolume_FullMethodName    = "/smartcore.traits.SpeakerApi/GetVolume"
	SpeakerApi_UpdateVolume_FullMethodName = "/smartcore.traits.SpeakerApi/UpdateVolume"
	SpeakerApi_PullVolume_FullMethodName   = "/smartcore.traits.SpeakerApi/PullVolume"
)

// SpeakerApiClient is the client API for SpeakerApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Trait for devices that support some kind of audio output. The most basic is a simple on/off speaker, it's optional to
// support volume adjustment on a scale.
//
// For the sakes of this trait "volume" means the combination of a gain and a mute state.
type SpeakerApiClient interface {
	// Get the current state of the volume for the device
	GetVolume(ctx context.Context, in *GetSpeakerVolumeRequest, opts ...grpc.CallOption) (*types.AudioLevel, error)
	// update the volume state for the device
	UpdateVolume(ctx context.Context, in *UpdateSpeakerVolumeRequest, opts ...grpc.CallOption) (*types.AudioLevel, error)
	PullVolume(ctx context.Context, in *PullSpeakerVolumeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullSpeakerVolumeResponse], error)
}

type speakerApiClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeakerApiClient(cc grpc.ClientConnInterface) SpeakerApiClient {
	return &speakerApiClient{cc}
}

func (c *speakerApiClient) GetVolume(ctx context.Context, in *GetSpeakerVolumeRequest, opts ...grpc.CallOption) (*types.AudioLevel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.AudioLevel)
	err := c.cc.Invoke(ctx, SpeakerApi_GetVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speakerApiClient) UpdateVolume(ctx context.Context, in *UpdateSpeakerVolumeRequest, opts ...grpc.CallOption) (*types.AudioLevel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(types.AudioLevel)
	err := c.cc.Invoke(ctx, SpeakerApi_UpdateVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speakerApiClient) PullVolume(ctx context.Context, in *PullSpeakerVolumeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullSpeakerVolumeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SpeakerApi_ServiceDesc.Streams[0], SpeakerApi_PullVolume_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullSpeakerVolumeRequest, PullSpeakerVolumeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SpeakerApi_PullVolumeClient = grpc.ServerStreamingClient[PullSpeakerVolumeResponse]

// SpeakerApiServer is the server API for SpeakerApi service.
// All implementations must embed UnimplementedSpeakerApiServer
// for forward compatibility.
//
// Trait for devices that support some kind of audio output. The most basic is a simple on/off speaker, it's optional to
// support volume adjustment on a scale.
//
// For the sakes of this trait "volume" means the combination of a gain and a mute state.
type SpeakerApiServer interface {
	// Get the current state of the volume for the device
	GetVolume(context.Context, *GetSpeakerVolumeRequest) (*types.AudioLevel, error)
	// update the volume state for the device
	UpdateVolume(context.Context, *UpdateSpeakerVolumeRequest) (*types.AudioLevel, error)
	PullVolume(*PullSpeakerVolumeRequest, grpc.ServerStreamingServer[PullSpeakerVolumeResponse]) error
	mustEmbedUnimplementedSpeakerApiServer()
}

// UnimplementedSpeakerApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSpeakerApiServer struct{}

func (UnimplementedSpeakerApiServer) GetVolume(context.Context, *GetSpeakerVolumeRequest) (*types.AudioLevel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolume not implemented")
}
func (UnimplementedSpeakerApiServer) UpdateVolume(context.Context, *UpdateSpeakerVolumeRequest) (*types.AudioLevel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVolume not implemented")
}
func (UnimplementedSpeakerApiServer) PullVolume(*PullSpeakerVolumeRequest, grpc.ServerStreamingServer[PullSpeakerVolumeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullVolume not implemented")
}
func (UnimplementedSpeakerApiServer) mustEmbedUnimplementedSpeakerApiServer() {}
func (UnimplementedSpeakerApiServer) testEmbeddedByValue()                    {}

// UnsafeSpeakerApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpeakerApiServer will
// result in compilation errors.
type UnsafeSpeakerApiServer interface {
	mustEmbedUnimplementedSpeakerApiServer()
}

func RegisterSpeakerApiServer(s grpc.ServiceRegistrar, srv SpeakerApiServer) {
	// If the following call pancis, it indicates UnimplementedSpeakerApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SpeakerApi_ServiceDesc, srv)
}

func _SpeakerApi_GetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpeakerVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakerApiServer).GetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeakerApi_GetVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakerApiServer).GetVolume(ctx, req.(*GetSpeakerVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeakerApi_UpdateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpeakerVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakerApiServer).UpdateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeakerApi_UpdateVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakerApiServer).UpdateVolume(ctx, req.(*UpdateSpeakerVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeakerApi_PullVolume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullSpeakerVolumeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpeakerApiServer).PullVolume(m, &grpc.GenericServerStream[PullSpeakerVolumeRequest, PullSpeakerVolumeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SpeakerApi_PullVolumeServer = grpc.ServerStreamingServer[PullSpeakerVolumeResponse]

// SpeakerApi_ServiceDesc is the grpc.ServiceDesc for SpeakerApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpeakerApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.SpeakerApi",
	HandlerType: (*SpeakerApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVolume",
			Handler:    _SpeakerApi_GetVolume_Handler,
		},
		{
			MethodName: "UpdateVolume",
			Handler:    _SpeakerApi_UpdateVolume_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullVolume",
			Handler:       _SpeakerApi_PullVolume_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/speaker.proto",
}

const (
	SpeakerInfo_DescribeVolume_FullMethodName = "/smartcore.traits.SpeakerInfo/DescribeVolume"
)

// SpeakerInfoClient is the client API for SpeakerInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the capabilities of a specific named device with respect to this trait.
type SpeakerInfoClient interface {
	// Get information about how a named device implements volume features
	DescribeVolume(ctx context.Context, in *DescribeVolumeRequest, opts ...grpc.CallOption) (*VolumeSupport, error)
}

type speakerInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeakerInfoClient(cc grpc.ClientConnInterface) SpeakerInfoClient {
	return &speakerInfoClient{cc}
}

func (c *speakerInfoClient) DescribeVolume(ctx context.Context, in *DescribeVolumeRequest, opts ...grpc.CallOption) (*VolumeSupport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VolumeSupport)
	err := c.cc.Invoke(ctx, SpeakerInfo_DescribeVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpeakerInfoServer is the server API for SpeakerInfo service.
// All implementations must embed UnimplementedSpeakerInfoServer
// for forward compatibility.
//
// Describes the capabilities of a specific named device with respect to this trait.
type SpeakerInfoServer interface {
	// Get information about how a named device implements volume features
	DescribeVolume(context.Context, *DescribeVolumeRequest) (*VolumeSupport, error)
	mustEmbedUnimplementedSpeakerInfoServer()
}

// UnimplementedSpeakerInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSpeakerInfoServer struct{}

func (UnimplementedSpeakerInfoServer) DescribeVolume(context.Context, *DescribeVolumeRequest) (*VolumeSupport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeVolume not implemented")
}
func (UnimplementedSpeakerInfoServer) mustEmbedUnimplementedSpeakerInfoServer() {}
func (UnimplementedSpeakerInfoServer) testEmbeddedByValue()                     {}

// UnsafeSpeakerInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpeakerInfoServer will
// result in compilation errors.
type UnsafeSpeakerInfoServer interface {
	mustEmbedUnimplementedSpeakerInfoServer()
}

func RegisterSpeakerInfoServer(s grpc.ServiceRegistrar, srv SpeakerInfoServer) {
	// If the following call pancis, it indicates UnimplementedSpeakerInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SpeakerInfo_ServiceDesc, srv)
}

func _SpeakerInfo_DescribeVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakerInfoServer).DescribeVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeakerInfo_DescribeVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakerInfoServer).DescribeVolume(ctx, req.(*DescribeVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpeakerInfo_ServiceDesc is the grpc.ServiceDesc for SpeakerInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpeakerInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.SpeakerInfo",
	HandlerType: (*SpeakerInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeVolume",
			Handler:    _SpeakerInfo_DescribeVolume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "traits/speaker.proto",
}
