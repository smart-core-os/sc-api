// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: traits/lock_unlock.proto

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LockUnlockApi_GetLockUnlock_FullMethodName    = "/smartcore.traits.LockUnlockApi/GetLockUnlock"
	LockUnlockApi_UpdateLockUnlock_FullMethodName = "/smartcore.traits.LockUnlockApi/UpdateLockUnlock"
	LockUnlockApi_PullLockUnlock_FullMethodName   = "/smartcore.traits.LockUnlockApi/PullLockUnlock"
)

// LockUnlockApiClient is the client API for LockUnlockApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LockUnlockApi describes devices that can be locked and unlocked, and/or report a locked state.
// The concept is encoded in the LockUnlock.position, a device may be locked, unlocked, or transitioning into one of
// these positions.
type LockUnlockApiClient interface {
	// Get the current lock position for the device.
	GetLockUnlock(ctx context.Context, in *GetLockUnlockRequest, opts ...grpc.CallOption) (*LockUnlock, error)
	// Update the lock position of the device.
	UpdateLockUnlock(ctx context.Context, in *UpdateLockUnlockRequest, opts ...grpc.CallOption) (*LockUnlock, error)
	// Subscribe to changes in the lock position for the device.
	PullLockUnlock(ctx context.Context, in *PullLockUnlockRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullLockUnlockResponse], error)
}

type lockUnlockApiClient struct {
	cc grpc.ClientConnInterface
}

func NewLockUnlockApiClient(cc grpc.ClientConnInterface) LockUnlockApiClient {
	return &lockUnlockApiClient{cc}
}

func (c *lockUnlockApiClient) GetLockUnlock(ctx context.Context, in *GetLockUnlockRequest, opts ...grpc.CallOption) (*LockUnlock, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LockUnlock)
	err := c.cc.Invoke(ctx, LockUnlockApi_GetLockUnlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockUnlockApiClient) UpdateLockUnlock(ctx context.Context, in *UpdateLockUnlockRequest, opts ...grpc.CallOption) (*LockUnlock, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LockUnlock)
	err := c.cc.Invoke(ctx, LockUnlockApi_UpdateLockUnlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockUnlockApiClient) PullLockUnlock(ctx context.Context, in *PullLockUnlockRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullLockUnlockResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LockUnlockApi_ServiceDesc.Streams[0], LockUnlockApi_PullLockUnlock_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullLockUnlockRequest, PullLockUnlockResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LockUnlockApi_PullLockUnlockClient = grpc.ServerStreamingClient[PullLockUnlockResponse]

// LockUnlockApiServer is the server API for LockUnlockApi service.
// All implementations must embed UnimplementedLockUnlockApiServer
// for forward compatibility.
//
// LockUnlockApi describes devices that can be locked and unlocked, and/or report a locked state.
// The concept is encoded in the LockUnlock.position, a device may be locked, unlocked, or transitioning into one of
// these positions.
type LockUnlockApiServer interface {
	// Get the current lock position for the device.
	GetLockUnlock(context.Context, *GetLockUnlockRequest) (*LockUnlock, error)
	// Update the lock position of the device.
	UpdateLockUnlock(context.Context, *UpdateLockUnlockRequest) (*LockUnlock, error)
	// Subscribe to changes in the lock position for the device.
	PullLockUnlock(*PullLockUnlockRequest, grpc.ServerStreamingServer[PullLockUnlockResponse]) error
	mustEmbedUnimplementedLockUnlockApiServer()
}

// UnimplementedLockUnlockApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLockUnlockApiServer struct{}

func (UnimplementedLockUnlockApiServer) GetLockUnlock(context.Context, *GetLockUnlockRequest) (*LockUnlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLockUnlock not implemented")
}
func (UnimplementedLockUnlockApiServer) UpdateLockUnlock(context.Context, *UpdateLockUnlockRequest) (*LockUnlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLockUnlock not implemented")
}
func (UnimplementedLockUnlockApiServer) PullLockUnlock(*PullLockUnlockRequest, grpc.ServerStreamingServer[PullLockUnlockResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullLockUnlock not implemented")
}
func (UnimplementedLockUnlockApiServer) mustEmbedUnimplementedLockUnlockApiServer() {}
func (UnimplementedLockUnlockApiServer) testEmbeddedByValue()                       {}

// UnsafeLockUnlockApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LockUnlockApiServer will
// result in compilation errors.
type UnsafeLockUnlockApiServer interface {
	mustEmbedUnimplementedLockUnlockApiServer()
}

func RegisterLockUnlockApiServer(s grpc.ServiceRegistrar, srv LockUnlockApiServer) {
	// If the following call pancis, it indicates UnimplementedLockUnlockApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LockUnlockApi_ServiceDesc, srv)
}

func _LockUnlockApi_GetLockUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLockUnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockUnlockApiServer).GetLockUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LockUnlockApi_GetLockUnlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockUnlockApiServer).GetLockUnlock(ctx, req.(*GetLockUnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockUnlockApi_UpdateLockUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLockUnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockUnlockApiServer).UpdateLockUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LockUnlockApi_UpdateLockUnlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockUnlockApiServer).UpdateLockUnlock(ctx, req.(*UpdateLockUnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LockUnlockApi_PullLockUnlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullLockUnlockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LockUnlockApiServer).PullLockUnlock(m, &grpc.GenericServerStream[PullLockUnlockRequest, PullLockUnlockResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LockUnlockApi_PullLockUnlockServer = grpc.ServerStreamingServer[PullLockUnlockResponse]

// LockUnlockApi_ServiceDesc is the grpc.ServiceDesc for LockUnlockApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LockUnlockApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.LockUnlockApi",
	HandlerType: (*LockUnlockApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLockUnlock",
			Handler:    _LockUnlockApi_GetLockUnlock_Handler,
		},
		{
			MethodName: "UpdateLockUnlock",
			Handler:    _LockUnlockApi_UpdateLockUnlock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullLockUnlock",
			Handler:       _LockUnlockApi_PullLockUnlock_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/lock_unlock.proto",
}

// LockUnlockInfoClient is the client API for LockUnlockInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LockUnlockInfoClient interface {
}

type lockUnlockInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewLockUnlockInfoClient(cc grpc.ClientConnInterface) LockUnlockInfoClient {
	return &lockUnlockInfoClient{cc}
}

// LockUnlockInfoServer is the server API for LockUnlockInfo service.
// All implementations must embed UnimplementedLockUnlockInfoServer
// for forward compatibility.
type LockUnlockInfoServer interface {
	mustEmbedUnimplementedLockUnlockInfoServer()
}

// UnimplementedLockUnlockInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLockUnlockInfoServer struct{}

func (UnimplementedLockUnlockInfoServer) mustEmbedUnimplementedLockUnlockInfoServer() {}
func (UnimplementedLockUnlockInfoServer) testEmbeddedByValue()                        {}

// UnsafeLockUnlockInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LockUnlockInfoServer will
// result in compilation errors.
type UnsafeLockUnlockInfoServer interface {
	mustEmbedUnimplementedLockUnlockInfoServer()
}

func RegisterLockUnlockInfoServer(s grpc.ServiceRegistrar, srv LockUnlockInfoServer) {
	// If the following call pancis, it indicates UnimplementedLockUnlockInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LockUnlockInfo_ServiceDesc, srv)
}

// LockUnlockInfo_ServiceDesc is the grpc.ServiceDesc for LockUnlockInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LockUnlockInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.LockUnlockInfo",
	HandlerType: (*LockUnlockInfoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "traits/lock_unlock.proto",
}
