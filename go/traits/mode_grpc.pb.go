// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: traits/mode.proto

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ModeApi_GetModeValues_FullMethodName    = "/smartcore.traits.ModeApi/GetModeValues"
	ModeApi_UpdateModeValues_FullMethodName = "/smartcore.traits.ModeApi/UpdateModeValues"
	ModeApi_PullModeValues_FullMethodName   = "/smartcore.traits.ModeApi/PullModeValues"
)

// ModeApiClient is the client API for ModeApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Trait for devices that present one or more distinct modes.
// For example a washing machine might have a "temperature" mode with available values ["delicate", "auto", "whites"].
type ModeApiClient interface {
	// GetModeValues returns the current state for all modes for a device.
	GetModeValues(ctx context.Context, in *GetModeValuesRequest, opts ...grpc.CallOption) (*ModeValues, error)
	// UpdateModeValues sets the current mode for the device.
	// Multiple modes may be set at the same time.
	// The device may error if setting a mode that is not supported, in any case the returned ModeValues contains the
	// state after the update.
	// Relative updates to the mode may either cap or wrap the mode value if adjusting the value relatively would either
	// underflow or overflow the available modes.
	UpdateModeValues(ctx context.Context, in *UpdateModeValuesRequest, opts ...grpc.CallOption) (*ModeValues, error)
	// PullModeValues returns a stream of updates to the modes set on the device.
	PullModeValues(ctx context.Context, in *PullModeValuesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullModeValuesResponse], error)
}

type modeApiClient struct {
	cc grpc.ClientConnInterface
}

func NewModeApiClient(cc grpc.ClientConnInterface) ModeApiClient {
	return &modeApiClient{cc}
}

func (c *modeApiClient) GetModeValues(ctx context.Context, in *GetModeValuesRequest, opts ...grpc.CallOption) (*ModeValues, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModeValues)
	err := c.cc.Invoke(ctx, ModeApi_GetModeValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modeApiClient) UpdateModeValues(ctx context.Context, in *UpdateModeValuesRequest, opts ...grpc.CallOption) (*ModeValues, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModeValues)
	err := c.cc.Invoke(ctx, ModeApi_UpdateModeValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modeApiClient) PullModeValues(ctx context.Context, in *PullModeValuesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullModeValuesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ModeApi_ServiceDesc.Streams[0], ModeApi_PullModeValues_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullModeValuesRequest, PullModeValuesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModeApi_PullModeValuesClient = grpc.ServerStreamingClient[PullModeValuesResponse]

// ModeApiServer is the server API for ModeApi service.
// All implementations must embed UnimplementedModeApiServer
// for forward compatibility.
//
// Trait for devices that present one or more distinct modes.
// For example a washing machine might have a "temperature" mode with available values ["delicate", "auto", "whites"].
type ModeApiServer interface {
	// GetModeValues returns the current state for all modes for a device.
	GetModeValues(context.Context, *GetModeValuesRequest) (*ModeValues, error)
	// UpdateModeValues sets the current mode for the device.
	// Multiple modes may be set at the same time.
	// The device may error if setting a mode that is not supported, in any case the returned ModeValues contains the
	// state after the update.
	// Relative updates to the mode may either cap or wrap the mode value if adjusting the value relatively would either
	// underflow or overflow the available modes.
	UpdateModeValues(context.Context, *UpdateModeValuesRequest) (*ModeValues, error)
	// PullModeValues returns a stream of updates to the modes set on the device.
	PullModeValues(*PullModeValuesRequest, grpc.ServerStreamingServer[PullModeValuesResponse]) error
	mustEmbedUnimplementedModeApiServer()
}

// UnimplementedModeApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModeApiServer struct{}

func (UnimplementedModeApiServer) GetModeValues(context.Context, *GetModeValuesRequest) (*ModeValues, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModeValues not implemented")
}
func (UnimplementedModeApiServer) UpdateModeValues(context.Context, *UpdateModeValuesRequest) (*ModeValues, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModeValues not implemented")
}
func (UnimplementedModeApiServer) PullModeValues(*PullModeValuesRequest, grpc.ServerStreamingServer[PullModeValuesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullModeValues not implemented")
}
func (UnimplementedModeApiServer) mustEmbedUnimplementedModeApiServer() {}
func (UnimplementedModeApiServer) testEmbeddedByValue()                 {}

// UnsafeModeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModeApiServer will
// result in compilation errors.
type UnsafeModeApiServer interface {
	mustEmbedUnimplementedModeApiServer()
}

func RegisterModeApiServer(s grpc.ServiceRegistrar, srv ModeApiServer) {
	// If the following call pancis, it indicates UnimplementedModeApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ModeApi_ServiceDesc, srv)
}

func _ModeApi_GetModeValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModeValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModeApiServer).GetModeValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModeApi_GetModeValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModeApiServer).GetModeValues(ctx, req.(*GetModeValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModeApi_UpdateModeValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModeValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModeApiServer).UpdateModeValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModeApi_UpdateModeValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModeApiServer).UpdateModeValues(ctx, req.(*UpdateModeValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModeApi_PullModeValues_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullModeValuesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ModeApiServer).PullModeValues(m, &grpc.GenericServerStream[PullModeValuesRequest, PullModeValuesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModeApi_PullModeValuesServer = grpc.ServerStreamingServer[PullModeValuesResponse]

// ModeApi_ServiceDesc is the grpc.ServiceDesc for ModeApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModeApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.ModeApi",
	HandlerType: (*ModeApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetModeValues",
			Handler:    _ModeApi_GetModeValues_Handler,
		},
		{
			MethodName: "UpdateModeValues",
			Handler:    _ModeApi_UpdateModeValues_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullModeValues",
			Handler:       _ModeApi_PullModeValues_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/mode.proto",
}

const (
	ModeInfo_DescribeModes_FullMethodName = "/smartcore.traits.ModeInfo/DescribeModes"
)

// ModeInfoClient is the client API for ModeInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the capabilities of a specific named device with respect to this trait.
type ModeInfoClient interface {
	// Get information about how a named device implements Modes features
	DescribeModes(ctx context.Context, in *DescribeModesRequest, opts ...grpc.CallOption) (*ModesSupport, error)
}

type modeInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewModeInfoClient(cc grpc.ClientConnInterface) ModeInfoClient {
	return &modeInfoClient{cc}
}

func (c *modeInfoClient) DescribeModes(ctx context.Context, in *DescribeModesRequest, opts ...grpc.CallOption) (*ModesSupport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModesSupport)
	err := c.cc.Invoke(ctx, ModeInfo_DescribeModes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModeInfoServer is the server API for ModeInfo service.
// All implementations must embed UnimplementedModeInfoServer
// for forward compatibility.
//
// Describes the capabilities of a specific named device with respect to this trait.
type ModeInfoServer interface {
	// Get information about how a named device implements Modes features
	DescribeModes(context.Context, *DescribeModesRequest) (*ModesSupport, error)
	mustEmbedUnimplementedModeInfoServer()
}

// UnimplementedModeInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModeInfoServer struct{}

func (UnimplementedModeInfoServer) DescribeModes(context.Context, *DescribeModesRequest) (*ModesSupport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeModes not implemented")
}
func (UnimplementedModeInfoServer) mustEmbedUnimplementedModeInfoServer() {}
func (UnimplementedModeInfoServer) testEmbeddedByValue()                  {}

// UnsafeModeInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModeInfoServer will
// result in compilation errors.
type UnsafeModeInfoServer interface {
	mustEmbedUnimplementedModeInfoServer()
}

func RegisterModeInfoServer(s grpc.ServiceRegistrar, srv ModeInfoServer) {
	// If the following call pancis, it indicates UnimplementedModeInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ModeInfo_ServiceDesc, srv)
}

func _ModeInfo_DescribeModes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeModesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModeInfoServer).DescribeModes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModeInfo_DescribeModes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModeInfoServer).DescribeModes(ctx, req.(*DescribeModesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModeInfo_ServiceDesc is the grpc.ServiceDesc for ModeInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModeInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.ModeInfo",
	HandlerType: (*ModeInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeModes",
			Handler:    _ModeInfo_DescribeModes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "traits/mode.proto",
}
