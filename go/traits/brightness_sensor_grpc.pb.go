// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: traits/brightness_sensor.proto

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BrightnessSensorApi_GetAmbientBrightness_FullMethodName  = "/smartcore.traits.BrightnessSensorApi/GetAmbientBrightness"
	BrightnessSensorApi_PullAmbientBrightness_FullMethodName = "/smartcore.traits.BrightnessSensorApi/PullAmbientBrightness"
)

// BrightnessSensorApiClient is the client API for BrightnessSensorApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BrightnessSensorApi reports on the measured ambient brightness for a space.
type BrightnessSensorApiClient interface {
	// GetAmbientBrightness returns the current brightness level as measured by the device.
	GetAmbientBrightness(ctx context.Context, in *GetAmbientBrightnessRequest, opts ...grpc.CallOption) (*AmbientBrightness, error)
	// PullAmbientBrightness returns a stream of brightness changes as the device measures them.
	PullAmbientBrightness(ctx context.Context, in *PullAmbientBrightnessRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullAmbientBrightnessResponse], error)
}

type brightnessSensorApiClient struct {
	cc grpc.ClientConnInterface
}

func NewBrightnessSensorApiClient(cc grpc.ClientConnInterface) BrightnessSensorApiClient {
	return &brightnessSensorApiClient{cc}
}

func (c *brightnessSensorApiClient) GetAmbientBrightness(ctx context.Context, in *GetAmbientBrightnessRequest, opts ...grpc.CallOption) (*AmbientBrightness, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AmbientBrightness)
	err := c.cc.Invoke(ctx, BrightnessSensorApi_GetAmbientBrightness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brightnessSensorApiClient) PullAmbientBrightness(ctx context.Context, in *PullAmbientBrightnessRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PullAmbientBrightnessResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BrightnessSensorApi_ServiceDesc.Streams[0], BrightnessSensorApi_PullAmbientBrightness_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PullAmbientBrightnessRequest, PullAmbientBrightnessResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BrightnessSensorApi_PullAmbientBrightnessClient = grpc.ServerStreamingClient[PullAmbientBrightnessResponse]

// BrightnessSensorApiServer is the server API for BrightnessSensorApi service.
// All implementations must embed UnimplementedBrightnessSensorApiServer
// for forward compatibility.
//
// BrightnessSensorApi reports on the measured ambient brightness for a space.
type BrightnessSensorApiServer interface {
	// GetAmbientBrightness returns the current brightness level as measured by the device.
	GetAmbientBrightness(context.Context, *GetAmbientBrightnessRequest) (*AmbientBrightness, error)
	// PullAmbientBrightness returns a stream of brightness changes as the device measures them.
	PullAmbientBrightness(*PullAmbientBrightnessRequest, grpc.ServerStreamingServer[PullAmbientBrightnessResponse]) error
	mustEmbedUnimplementedBrightnessSensorApiServer()
}

// UnimplementedBrightnessSensorApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBrightnessSensorApiServer struct{}

func (UnimplementedBrightnessSensorApiServer) GetAmbientBrightness(context.Context, *GetAmbientBrightnessRequest) (*AmbientBrightness, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAmbientBrightness not implemented")
}
func (UnimplementedBrightnessSensorApiServer) PullAmbientBrightness(*PullAmbientBrightnessRequest, grpc.ServerStreamingServer[PullAmbientBrightnessResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PullAmbientBrightness not implemented")
}
func (UnimplementedBrightnessSensorApiServer) mustEmbedUnimplementedBrightnessSensorApiServer() {}
func (UnimplementedBrightnessSensorApiServer) testEmbeddedByValue()                             {}

// UnsafeBrightnessSensorApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrightnessSensorApiServer will
// result in compilation errors.
type UnsafeBrightnessSensorApiServer interface {
	mustEmbedUnimplementedBrightnessSensorApiServer()
}

func RegisterBrightnessSensorApiServer(s grpc.ServiceRegistrar, srv BrightnessSensorApiServer) {
	// If the following call pancis, it indicates UnimplementedBrightnessSensorApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BrightnessSensorApi_ServiceDesc, srv)
}

func _BrightnessSensorApi_GetAmbientBrightness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAmbientBrightnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrightnessSensorApiServer).GetAmbientBrightness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrightnessSensorApi_GetAmbientBrightness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrightnessSensorApiServer).GetAmbientBrightness(ctx, req.(*GetAmbientBrightnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrightnessSensorApi_PullAmbientBrightness_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullAmbientBrightnessRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BrightnessSensorApiServer).PullAmbientBrightness(m, &grpc.GenericServerStream[PullAmbientBrightnessRequest, PullAmbientBrightnessResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BrightnessSensorApi_PullAmbientBrightnessServer = grpc.ServerStreamingServer[PullAmbientBrightnessResponse]

// BrightnessSensorApi_ServiceDesc is the grpc.ServiceDesc for BrightnessSensorApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrightnessSensorApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.BrightnessSensorApi",
	HandlerType: (*BrightnessSensorApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAmbientBrightness",
			Handler:    _BrightnessSensorApi_GetAmbientBrightness_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullAmbientBrightness",
			Handler:       _BrightnessSensorApi_PullAmbientBrightness_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/brightness_sensor.proto",
}

const (
	BrightnessSensorInfo_DescribeAmbientBrightness_FullMethodName = "/smartcore.traits.BrightnessSensorInfo/DescribeAmbientBrightness"
)

// BrightnessSensorInfoClient is the client API for BrightnessSensorInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Describes the capabilities of a specific named device with respect to this trait.
type BrightnessSensorInfoClient interface {
	// Get information about how a named device implements AmbientBrightness measurements
	DescribeAmbientBrightness(ctx context.Context, in *DescribeAmbientBrightnessRequest, opts ...grpc.CallOption) (*AmbientBrightnessSupport, error)
}

type brightnessSensorInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewBrightnessSensorInfoClient(cc grpc.ClientConnInterface) BrightnessSensorInfoClient {
	return &brightnessSensorInfoClient{cc}
}

func (c *brightnessSensorInfoClient) DescribeAmbientBrightness(ctx context.Context, in *DescribeAmbientBrightnessRequest, opts ...grpc.CallOption) (*AmbientBrightnessSupport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AmbientBrightnessSupport)
	err := c.cc.Invoke(ctx, BrightnessSensorInfo_DescribeAmbientBrightness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrightnessSensorInfoServer is the server API for BrightnessSensorInfo service.
// All implementations must embed UnimplementedBrightnessSensorInfoServer
// for forward compatibility.
//
// Describes the capabilities of a specific named device with respect to this trait.
type BrightnessSensorInfoServer interface {
	// Get information about how a named device implements AmbientBrightness measurements
	DescribeAmbientBrightness(context.Context, *DescribeAmbientBrightnessRequest) (*AmbientBrightnessSupport, error)
	mustEmbedUnimplementedBrightnessSensorInfoServer()
}

// UnimplementedBrightnessSensorInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBrightnessSensorInfoServer struct{}

func (UnimplementedBrightnessSensorInfoServer) DescribeAmbientBrightness(context.Context, *DescribeAmbientBrightnessRequest) (*AmbientBrightnessSupport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeAmbientBrightness not implemented")
}
func (UnimplementedBrightnessSensorInfoServer) mustEmbedUnimplementedBrightnessSensorInfoServer() {}
func (UnimplementedBrightnessSensorInfoServer) testEmbeddedByValue()                              {}

// UnsafeBrightnessSensorInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrightnessSensorInfoServer will
// result in compilation errors.
type UnsafeBrightnessSensorInfoServer interface {
	mustEmbedUnimplementedBrightnessSensorInfoServer()
}

func RegisterBrightnessSensorInfoServer(s grpc.ServiceRegistrar, srv BrightnessSensorInfoServer) {
	// If the following call pancis, it indicates UnimplementedBrightnessSensorInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BrightnessSensorInfo_ServiceDesc, srv)
}

func _BrightnessSensorInfo_DescribeAmbientBrightness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeAmbientBrightnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrightnessSensorInfoServer).DescribeAmbientBrightness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BrightnessSensorInfo_DescribeAmbientBrightness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrightnessSensorInfoServer).DescribeAmbientBrightness(ctx, req.(*DescribeAmbientBrightnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BrightnessSensorInfo_ServiceDesc is the grpc.ServiceDesc for BrightnessSensorInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrightnessSensorInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.BrightnessSensorInfo",
	HandlerType: (*BrightnessSensorInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeAmbientBrightness",
			Handler:    _BrightnessSensorInfo_DescribeAmbientBrightness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "traits/brightness_sensor.proto",
}
