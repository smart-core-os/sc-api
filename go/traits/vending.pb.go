// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.1
// source: traits/vending.proto

package traits

import (
	types "github.com/smart-core-os/sc-api/go/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Unit defines different consumable units.
type Consumable_Unit int32

const (
	Consumable_UNIT_UNSPECIFIED Consumable_Unit = 0
	// There is no unit for this quantity, typically a count.
	Consumable_NO_UNIT Consumable_Unit = 1
	// The quantity is a length, in meters.
	Consumable_METER Consumable_Unit = 2
	// The quantity is a volume, in liters
	Consumable_LITER Consumable_Unit = 3
	// The quantity is a volume, in cubic meters.
	Consumable_CUBIC_METER Consumable_Unit = 4
	// The quantity is a portion, sized to fill a cup.
	Consumable_CUP Consumable_Unit = 5
	// The quantity is a mass, in kilograms.
	Consumable_KILOGRAM Consumable_Unit = 6
)

// Enum value maps for Consumable_Unit.
var (
	Consumable_Unit_name = map[int32]string{
		0: "UNIT_UNSPECIFIED",
		1: "NO_UNIT",
		2: "METER",
		3: "LITER",
		4: "CUBIC_METER",
		5: "CUP",
		6: "KILOGRAM",
	}
	Consumable_Unit_value = map[string]int32{
		"UNIT_UNSPECIFIED": 0,
		"NO_UNIT":          1,
		"METER":            2,
		"LITER":            3,
		"CUBIC_METER":      4,
		"CUP":              5,
		"KILOGRAM":         6,
	}
)

func (x Consumable_Unit) Enum() *Consumable_Unit {
	p := new(Consumable_Unit)
	*p = x
	return p
}

func (x Consumable_Unit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Consumable_Unit) Descriptor() protoreflect.EnumDescriptor {
	return file_traits_vending_proto_enumTypes[0].Descriptor()
}

func (Consumable_Unit) Type() protoreflect.EnumType {
	return &file_traits_vending_proto_enumTypes[0]
}

func (x Consumable_Unit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Consumable_Unit.Descriptor instead.
func (Consumable_Unit) EnumDescriptor() ([]byte, []int) {
	return file_traits_vending_proto_rawDescGZIP(), []int{0, 0}
}

// Consumable describes some item that can be dispensed from a vending device.
// Noticeable variations, so far as someone might want to choose between two consumables, should be modelled as
// separate consumable instances. For example red or green apples, large or regular drinks.
type Consumable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A name that can be used to uniquely refer to this consumable in the device.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The available portions that this consumable can be dispensed in.
	AvailablePortions []*Consumable_Portion `protobuf:"bytes,2,rep,name=available_portions,json=availablePortions,proto3" json:"available_portions,omitempty"`
	// The portion that will be dispensed if not specified as part of the request.
	DefaultPortion *Consumable_Quantity `protobuf:"bytes,3,opt,name=default_portion,json=defaultPortion,proto3" json:"default_portion,omitempty"`
	// An official title for this item.
	Title string `protobuf:"bytes,10,opt,name=title,proto3" json:"title,omitempty"`
	// A recognisable display name for this item.
	DisplayName string `protobuf:"bytes,11,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// A picture of the item.
	Picture *types.Image `protobuf:"bytes,12,opt,name=picture,proto3" json:"picture,omitempty"`
	// A url that resolves to more information on this item.
	Url string `protobuf:"bytes,13,opt,name=url,proto3" json:"url,omitempty"`
	// IDs holds external consumable ids.
	// For example this might hold an id representing an Amazon Dash button product code.
	// The map key should uniquely represent the domain for the id, for example "amazon.com/dash", the use of uris is not
	// required, values should be the id of this consumable in that domain, for example "sma81r6t1c5o3r58e1-3r8u16l1es".
	Ids map[string]string `protobuf:"bytes,100,rep,name=ids,proto3" json:"ids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Additional properties associated with the consumable.
	// Typically displayed to a user to help them to distinguish between similar consumables.
	More map[string]string `protobuf:"bytes,101,rep,name=more,proto3" json:"more,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Consumable) Reset() {
	*x = Consumable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_vending_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consumable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consumable) ProtoMessage() {}

func (x *Consumable) ProtoReflect() protoreflect.Message {
	mi := &file_traits_vending_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consumable.ProtoReflect.Descriptor instead.
func (*Consumable) Descriptor() ([]byte, []int) {
	return file_traits_vending_proto_rawDescGZIP(), []int{0}
}

func (x *Consumable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Consumable) GetAvailablePortions() []*Consumable_Portion {
	if x != nil {
		return x.AvailablePortions
	}
	return nil
}

func (x *Consumable) GetDefaultPortion() *Consumable_Quantity {
	if x != nil {
		return x.DefaultPortion
	}
	return nil
}

func (x *Consumable) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Consumable) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Consumable) GetPicture() *types.Image {
	if x != nil {
		return x.Picture
	}
	return nil
}

func (x *Consumable) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Consumable) GetIds() map[string]string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *Consumable) GetMore() map[string]string {
	if x != nil {
		return x.More
	}
	return nil
}

type ListConsumablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device to fetch the state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Fields to fetch relative to the Consumable type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// The maximum number of items to return.
	// The service may return fewer than this value.
	// If unspecified, at most 50 items will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListConsumablesRequest` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListConsumablesRequest) Reset() {
	*x = ListConsumablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_vending_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConsumablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConsumablesRequest) ProtoMessage() {}

func (x *ListConsumablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_vending_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConsumablesRequest.ProtoReflect.Descriptor instead.
func (*ListConsumablesRequest) Descriptor() ([]byte, []int) {
	return file_traits_vending_proto_rawDescGZIP(), []int{1}
}

func (x *ListConsumablesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListConsumablesRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *ListConsumablesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListConsumablesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListConsumablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consumables []*Consumable `protobuf:"bytes,1,rep,name=consumables,proto3" json:"consumables,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// If non-zero this is the total number of consumables.
	// This may be an estimate.
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListConsumablesResponse) Reset() {
	*x = ListConsumablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_vending_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConsumablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConsumablesResponse) ProtoMessage() {}

func (x *ListConsumablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traits_vending_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConsumablesResponse.ProtoReflect.Descriptor instead.
func (*ListConsumablesResponse) Descriptor() ([]byte, []int) {
	return file_traits_vending_proto_rawDescGZIP(), []int{2}
}

func (x *ListConsumablesResponse) GetConsumables() []*Consumable {
	if x != nil {
		return x.Consumables
	}
	return nil
}

func (x *ListConsumablesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListConsumablesResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type PullConsumablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device to fetch the state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Fields to fetch relative to the Consumable type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// When true the device will only send changes to the resource value.
	// The default behaviour is to send the current value immediately followed by any updates as they happen.
	UpdatesOnly bool `protobuf:"varint,3,opt,name=updates_only,json=updatesOnly,proto3" json:"updates_only,omitempty"`
}

func (x *PullConsumablesRequest) Reset() {
	*x = PullConsumablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_vending_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullConsumablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullConsumablesRequest) ProtoMessage() {}

func (x *PullConsumablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_vending_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullConsumablesRequest.ProtoReflect.Descriptor instead.
func (*PullConsumablesRequest) Descriptor() ([]byte, []int) {
	return file_traits_vending_proto_rawDescGZIP(), []int{3}
}

func (x *PullConsumablesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullConsumablesRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *PullConsumablesRequest) GetUpdatesOnly() bool {
	if x != nil {
		return x.UpdatesOnly
	}
	return false
}

type PullConsumablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of changes which have occurred
	Changes []*PullConsumablesResponse_Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *PullConsumablesResponse) Reset() {
	*x = PullConsumablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_vending_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullConsumablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullConsumablesResponse) ProtoMessage() {}

func (x *PullConsumablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traits_vending_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullConsumablesResponse.ProtoReflect.Descriptor instead.
func (*PullConsumablesResponse) Descriptor() ([]byte, []int) {
	return file_traits_vending_proto_rawDescGZIP(), []int{4}
}

func (x *PullConsumablesResponse) GetChanges() []*PullConsumablesResponse_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

type GetStockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device to update the state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The name of the consumable to get the stock for.
	Consumable string `protobuf:"bytes,3,opt,name=consumable,proto3" json:"consumable,omitempty"`
	// Fields to read relative to the Consumable.Stock type.
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
}

func (x *GetStockRequest) Reset() {
	*x = GetStockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_vending_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStockRequest) ProtoMessage() {}

func (x *GetStockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_vending_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStockRequest.ProtoReflect.Descriptor instead.
func (*GetStockRequest) Descriptor() ([]byte, []int) {
	return file_traits_vending_proto_rawDescGZIP(), []int{5}
}

func (x *GetStockRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetStockRequest) GetConsumable() string {
	if x != nil {
		return x.Consumable
	}
	return ""
}

func (x *GetStockRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

type UpdateStockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device to update the state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// New quantities for the consumable stock.
	Stock *Consumable_Stock `protobuf:"bytes,2,opt,name=stock,proto3" json:"stock,omitempty"`
	// Fields to update relative to the Consumable.Stock type.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// If true, stock adjustments are relative to their current values.
	Relative bool `protobuf:"varint,4,opt,name=relative,proto3" json:"relative,omitempty"`
}

func (x *UpdateStockRequest) Reset() {
	*x = UpdateStockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_vending_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStockRequest) ProtoMessage() {}

func (x *UpdateStockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_vending_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStockRequest.ProtoReflect.Descriptor instead.
func (*UpdateStockRequest) Descriptor() ([]byte, []int) {
	return file_traits_vending_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateStockRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateStockRequest) GetStock() *Consumable_Stock {
	if x != nil {
		return x.Stock
	}
	return nil
}

func (x *UpdateStockRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateStockRequest) GetRelative() bool {
	if x != nil {
		return x.Relative
	}
	return false
}

type PullStockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device to fetch the state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The name of the consumable to get the stock for.
	Consumable string `protobuf:"bytes,4,opt,name=consumable,proto3" json:"consumable,omitempty"`
	// Fields to fetch relative to the Consumable.Stock type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// When true the device will only send changes to the resource value.
	// The default behaviour is to send the current value immediately followed by any updates as they happen.
	UpdatesOnly bool `protobuf:"varint,3,opt,name=updates_only,json=updatesOnly,proto3" json:"updates_only,omitempty"`
}

func (x *PullStockRequest) Reset() {
	*x = PullStockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_vending_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullStockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullStockRequest) ProtoMessage() {}

func (x *PullStockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_vending_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullStockRequest.ProtoReflect.Descriptor instead.
func (*PullStockRequest) Descriptor() ([]byte, []int) {
	return file_traits_vending_proto_rawDescGZIP(), []int{7}
}

func (x *PullStockRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullStockRequest) GetConsumable() string {
	if x != nil {
		return x.Consumable
	}
	return ""
}

func (x *PullStockRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *PullStockRequest) GetUpdatesOnly() bool {
	if x != nil {
		return x.UpdatesOnly
	}
	return false
}

type PullStockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Changes that have occurred since the last event
	Changes []*PullStockResponse_Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *PullStockResponse) Reset() {
	*x = PullStockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_vending_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullStockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullStockResponse) ProtoMessage() {}

func (x *PullStockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traits_vending_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullStockResponse.ProtoReflect.Descriptor instead.
func (*PullStockResponse) Descriptor() ([]byte, []int) {
	return file_traits_vending_proto_rawDescGZIP(), []int{8}
}

func (x *PullStockResponse) GetChanges() []*PullStockResponse_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

type ListInventoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device to fetch the state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Fields to fetch relative to the Consumable.Stock type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// The maximum number of items to return.
	// The service may return fewer than this value.
	// If unspecified, at most 50 items will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListInventoryRequest` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListInventoryRequest) Reset() {
	*x = ListInventoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_vending_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInventoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInventoryRequest) ProtoMessage() {}

func (x *ListInventoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_vending_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInventoryRequest.ProtoReflect.Descriptor instead.
func (*ListInventoryRequest) Descriptor() ([]byte, []int) {
	return file_traits_vending_proto_rawDescGZIP(), []int{9}
}

func (x *ListInventoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListInventoryRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *ListInventoryRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListInventoryRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListInventoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The stock requested.
	Inventory []*Consumable_Stock `protobuf:"bytes,1,rep,name=inventory,proto3" json:"inventory,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// If non-zero this is the total number of stocked consumables.
	// This may be an estimate.
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListInventoryResponse) Reset() {
	*x = ListInventoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_vending_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInventoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInventoryResponse) ProtoMessage() {}

func (x *ListInventoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traits_vending_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInventoryResponse.ProtoReflect.Descriptor instead.
func (*ListInventoryResponse) Descriptor() ([]byte, []int) {
	return file_traits_vending_proto_rawDescGZIP(), []int{10}
}

func (x *ListInventoryResponse) GetInventory() []*Consumable_Stock {
	if x != nil {
		return x.Inventory
	}
	return nil
}

func (x *ListInventoryResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListInventoryResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type PullInventoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device to fetch the state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Fields to fetch relative to the Consumable.Stock type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// When true the device will only send changes to the resource value.
	// The default behaviour is to send the current value immediately followed by any updates as they happen.
	UpdatesOnly bool `protobuf:"varint,3,opt,name=updates_only,json=updatesOnly,proto3" json:"updates_only,omitempty"`
}

func (x *PullInventoryRequest) Reset() {
	*x = PullInventoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_vending_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullInventoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullInventoryRequest) ProtoMessage() {}

func (x *PullInventoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_vending_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullInventoryRequest.ProtoReflect.Descriptor instead.
func (*PullInventoryRequest) Descriptor() ([]byte, []int) {
	return file_traits_vending_proto_rawDescGZIP(), []int{11}
}

func (x *PullInventoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullInventoryRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *PullInventoryRequest) GetUpdatesOnly() bool {
	if x != nil {
		return x.UpdatesOnly
	}
	return false
}

type PullInventoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of changes which have occurred
	Changes []*PullInventoryResponse_Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *PullInventoryResponse) Reset() {
	*x = PullInventoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_vending_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullInventoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullInventoryResponse) ProtoMessage() {}

func (x *PullInventoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traits_vending_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullInventoryResponse.ProtoReflect.Descriptor instead.
func (*PullInventoryResponse) Descriptor() ([]byte, []int) {
	return file_traits_vending_proto_rawDescGZIP(), []int{12}
}

func (x *PullInventoryResponse) GetChanges() []*PullInventoryResponse_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

type DispenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device to invoke the action on
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The name of the consumable to dispense the stock for.
	Consumable string `protobuf:"bytes,4,opt,name=consumable,proto3" json:"consumable,omitempty"`
	// The quantity of the consumable to dispense.
	Quantity *Consumable_Quantity `protobuf:"bytes,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Fields to update relative to the quantity property.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *DispenseRequest) Reset() {
	*x = DispenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_vending_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispenseRequest) ProtoMessage() {}

func (x *DispenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_vending_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispenseRequest.ProtoReflect.Descriptor instead.
func (*DispenseRequest) Descriptor() ([]byte, []int) {
	return file_traits_vending_proto_rawDescGZIP(), []int{13}
}

func (x *DispenseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DispenseRequest) GetConsumable() string {
	if x != nil {
		return x.Consumable
	}
	return ""
}

func (x *DispenseRequest) GetQuantity() *Consumable_Quantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *DispenseRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type StopDispenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device to invoke the action on
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The consumable that should stop dispensing.
	Consumable string `protobuf:"bytes,2,opt,name=consumable,proto3" json:"consumable,omitempty"`
}

func (x *StopDispenseRequest) Reset() {
	*x = StopDispenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_vending_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopDispenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopDispenseRequest) ProtoMessage() {}

func (x *StopDispenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_vending_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopDispenseRequest.ProtoReflect.Descriptor instead.
func (*StopDispenseRequest) Descriptor() ([]byte, []int) {
	return file_traits_vending_proto_rawDescGZIP(), []int{14}
}

func (x *StopDispenseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StopDispenseRequest) GetConsumable() string {
	if x != nil {
		return x.Consumable
	}
	return ""
}

// Portion describes a possible consumption for this consumable.
// Portions are potential units to be dispensed, a device might support dispensing individual cups of water, in which
// case it would use `{unit:CUP, bounds:[1,1]}`. Alternatively a device might dispense sweets in chunks of 50g, and
// would describe this using `{unit:KILOGRAM, step:0.05}`. If the device had a safety feature to limit the sweets dispensed
// at one time it might also specify `bounds:[0.05, 5]`.
type Consumable_Portion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unit the portion is measured in.
	Unit Consumable_Unit `protobuf:"varint,1,opt,name=unit,proto3,enum=smartcore.traits.Consumable_Unit" json:"unit,omitempty"`
	// Upper and lower bounds for the portion quantity.
	Bounds *types.FloatBounds `protobuf:"bytes,2,opt,name=bounds,proto3" json:"bounds,omitempty"`
	// The minimal increment for the portion quantity.
	Step float32 `protobuf:"fixed32,3,opt,name=step,proto3" json:"step,omitempty"`
}

func (x *Consumable_Portion) Reset() {
	*x = Consumable_Portion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_vending_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consumable_Portion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consumable_Portion) ProtoMessage() {}

func (x *Consumable_Portion) ProtoReflect() protoreflect.Message {
	mi := &file_traits_vending_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consumable_Portion.ProtoReflect.Descriptor instead.
func (*Consumable_Portion) Descriptor() ([]byte, []int) {
	return file_traits_vending_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Consumable_Portion) GetUnit() Consumable_Unit {
	if x != nil {
		return x.Unit
	}
	return Consumable_UNIT_UNSPECIFIED
}

func (x *Consumable_Portion) GetBounds() *types.FloatBounds {
	if x != nil {
		return x.Bounds
	}
	return nil
}

func (x *Consumable_Portion) GetStep() float32 {
	if x != nil {
		return x.Step
	}
	return 0
}

// Quantity combines an amount and a unit.
type Consumable_Quantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount float32         `protobuf:"fixed32,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Unit   Consumable_Unit `protobuf:"varint,3,opt,name=unit,proto3,enum=smartcore.traits.Consumable_Unit" json:"unit,omitempty"`
}

func (x *Consumable_Quantity) Reset() {
	*x = Consumable_Quantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_vending_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consumable_Quantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consumable_Quantity) ProtoMessage() {}

func (x *Consumable_Quantity) ProtoReflect() protoreflect.Message {
	mi := &file_traits_vending_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consumable_Quantity.ProtoReflect.Descriptor instead.
func (*Consumable_Quantity) Descriptor() ([]byte, []int) {
	return file_traits_vending_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Consumable_Quantity) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Consumable_Quantity) GetUnit() Consumable_Unit {
	if x != nil {
		return x.Unit
	}
	return Consumable_UNIT_UNSPECIFIED
}

// Stock describes how much of a consumable is available.
type Consumable_Stock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of a consumable supported by this device.
	Consumable string `protobuf:"bytes,1,opt,name=consumable,proto3" json:"consumable,omitempty"`
	// How many/much of the consumable is remaining.
	// Optional.
	// If the consumable is currently dispensing, this should report how much is remaining after dispensing finishes.
	Remaining *Consumable_Quantity `protobuf:"bytes,2,opt,name=remaining,proto3" json:"remaining,omitempty"`
	// How many/much of the consumable has been used since the counter was last reset.
	// Optional.
	// Devices may reset the counter when the stock is filled, or may count for longer.
	// If the consumable is currently dispensing, this should report how much will be used after dispensing finishes.
	Used *Consumable_Quantity `protobuf:"bytes,3,opt,name=used,proto3" json:"used,omitempty"`
	// How many/much of the consumable was most recently dispensed.
	// If the consumable is currently dispensing, this should report the quantity it dispensed prior to the current
	// session.
	// Optional.
	LastDispensed *Consumable_Quantity `protobuf:"bytes,4,opt,name=last_dispensed,json=lastDispensed,proto3" json:"last_dispensed,omitempty"`
	// True if the consumable is currently being dispensed.
	Dispensing bool `protobuf:"varint,5,opt,name=dispensing,proto3" json:"dispensing,omitempty"`
}

func (x *Consumable_Stock) Reset() {
	*x = Consumable_Stock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_vending_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consumable_Stock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consumable_Stock) ProtoMessage() {}

func (x *Consumable_Stock) ProtoReflect() protoreflect.Message {
	mi := &file_traits_vending_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consumable_Stock.ProtoReflect.Descriptor instead.
func (*Consumable_Stock) Descriptor() ([]byte, []int) {
	return file_traits_vending_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Consumable_Stock) GetConsumable() string {
	if x != nil {
		return x.Consumable
	}
	return ""
}

func (x *Consumable_Stock) GetRemaining() *Consumable_Quantity {
	if x != nil {
		return x.Remaining
	}
	return nil
}

func (x *Consumable_Stock) GetUsed() *Consumable_Quantity {
	if x != nil {
		return x.Used
	}
	return nil
}

func (x *Consumable_Stock) GetLastDispensed() *Consumable_Quantity {
	if x != nil {
		return x.LastDispensed
	}
	return nil
}

func (x *Consumable_Stock) GetDispensing() bool {
	if x != nil {
		return x.Dispensing
	}
	return false
}

type PullConsumablesResponse_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device that emitted this change
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The type of change (e.g. ADD, UPDATE, etc...)
	Type types.ChangeType `protobuf:"varint,2,opt,name=type,proto3,enum=smartcore.types.ChangeType" json:"type,omitempty"`
	// The new value to use for ADD|UPDATE changes
	NewValue *Consumable `protobuf:"bytes,3,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	// The old value to use for UPDATE|REMOVE changes
	OldValue *Consumable `protobuf:"bytes,4,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	// When the change occurred
	ChangeTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
}

func (x *PullConsumablesResponse_Change) Reset() {
	*x = PullConsumablesResponse_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_vending_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullConsumablesResponse_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullConsumablesResponse_Change) ProtoMessage() {}

func (x *PullConsumablesResponse_Change) ProtoReflect() protoreflect.Message {
	mi := &file_traits_vending_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullConsumablesResponse_Change.ProtoReflect.Descriptor instead.
func (*PullConsumablesResponse_Change) Descriptor() ([]byte, []int) {
	return file_traits_vending_proto_rawDescGZIP(), []int{4, 0}
}

func (x *PullConsumablesResponse_Change) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullConsumablesResponse_Change) GetType() types.ChangeType {
	if x != nil {
		return x.Type
	}
	return types.ChangeType(0)
}

func (x *PullConsumablesResponse_Change) GetNewValue() *Consumable {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *PullConsumablesResponse_Change) GetOldValue() *Consumable {
	if x != nil {
		return x.OldValue
	}
	return nil
}

func (x *PullConsumablesResponse_Change) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

// A change to the state
type PullStockResponse_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name for the device that issued the change
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// when the change occurred
	ChangeTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
	// the new state for the device
	Stock *Consumable_Stock `protobuf:"bytes,3,opt,name=stock,proto3" json:"stock,omitempty"`
}

func (x *PullStockResponse_Change) Reset() {
	*x = PullStockResponse_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_vending_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullStockResponse_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullStockResponse_Change) ProtoMessage() {}

func (x *PullStockResponse_Change) ProtoReflect() protoreflect.Message {
	mi := &file_traits_vending_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullStockResponse_Change.ProtoReflect.Descriptor instead.
func (*PullStockResponse_Change) Descriptor() ([]byte, []int) {
	return file_traits_vending_proto_rawDescGZIP(), []int{8, 0}
}

func (x *PullStockResponse_Change) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullStockResponse_Change) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

func (x *PullStockResponse_Change) GetStock() *Consumable_Stock {
	if x != nil {
		return x.Stock
	}
	return nil
}

type PullInventoryResponse_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device that emitted this change
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The type of change (e.g. ADD, UPDATE, etc...)
	Type types.ChangeType `protobuf:"varint,2,opt,name=type,proto3,enum=smartcore.types.ChangeType" json:"type,omitempty"`
	// The new value to use for ADD|UPDATE changes
	NewValue *Consumable_Stock `protobuf:"bytes,3,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	// The old value to use for UPDATE|REMOVE changes
	OldValue *Consumable_Stock `protobuf:"bytes,4,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	// When the change occurred
	ChangeTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
}

func (x *PullInventoryResponse_Change) Reset() {
	*x = PullInventoryResponse_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_vending_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullInventoryResponse_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullInventoryResponse_Change) ProtoMessage() {}

func (x *PullInventoryResponse_Change) ProtoReflect() protoreflect.Message {
	mi := &file_traits_vending_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullInventoryResponse_Change.ProtoReflect.Descriptor instead.
func (*PullInventoryResponse_Change) Descriptor() ([]byte, []int) {
	return file_traits_vending_proto_rawDescGZIP(), []int{12, 0}
}

func (x *PullInventoryResponse_Change) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullInventoryResponse_Change) GetType() types.ChangeType {
	if x != nil {
		return x.Type
	}
	return types.ChangeType(0)
}

func (x *PullInventoryResponse_Change) GetNewValue() *Consumable_Stock {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *PullInventoryResponse_Change) GetOldValue() *Consumable_Stock {
	if x != nil {
		return x.OldValue
	}
	return nil
}

func (x *PullInventoryResponse_Change) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

var File_traits_vending_proto protoreflect.FileDescriptor

var file_traits_vending_proto_rawDesc = []byte{
	0x0a, 0x14, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2f, 0x76, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x11, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x12, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x09, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e,
	0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x65, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x4d, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x6f, 0x72, 0x65,
	0x1a, 0x8a, 0x01, 0x0a, 0x07, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x52, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x1a, 0x59, 0x0a,
	0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x35, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x1a, 0x36, 0x0a, 0x08, 0x49, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x95, 0x02, 0x0a, 0x05, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x09, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x65, 0x6e, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6e, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6e,
	0x67, 0x22, 0x67, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x54, 0x45, 0x52,
	0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x55, 0x42, 0x49, 0x43, 0x5f, 0x4d, 0x45, 0x54, 0x45,
	0x52, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x55, 0x50, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08,
	0x4b, 0x49, 0x4c, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x06, 0x22, 0xa1, 0x01, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa0,
	0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x88, 0x01, 0x0a, 0x16, 0x50, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xe8, 0x02, 0x0a,
	0x17, 0x50, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c,
	0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x1a, 0x80, 0x02, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x39, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x37,
	0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xbb, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x10, 0x50, 0x75, 0x6c, 0x6c, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x37,
	0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xef, 0x01, 0x0a, 0x11, 0x50,
	0x75, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x93, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x22, 0x9f, 0x01, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa0,
	0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52,
	0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x50, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37,
	0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xf0, 0x02, 0x0a, 0x15, 0x50,
	0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x8c,
	0x02, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f,
	0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x3f, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc5, 0x01,
	0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x49, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x44, 0x69, 0x73,
	0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65,
	0x32, 0xd6, 0x06, 0x0a, 0x0a, 0x56, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x69, 0x12,
	0x66, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x28, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x0f, 0x50, 0x75, 0x6c, 0x6c, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75,
	0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x51, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x21, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x12, 0x57, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x12, 0x24, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x56, 0x0a,
	0x09, 0x50, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x22, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75,
	0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x60, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0d, 0x50, 0x75, 0x6c, 0x6c, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x08, 0x44,
	0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x59,
	0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x25,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x73, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x32, 0x0d, 0x0a, 0x0b, 0x56, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x77, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,
	0x42, 0x0c, 0x56, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x2d, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0xaa, 0x02, 0x10, 0x53, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0xca, 0x02,
	0x10, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x5c, 0x54, 0x72, 0x61, 0x69, 0x74,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_traits_vending_proto_rawDescOnce sync.Once
	file_traits_vending_proto_rawDescData = file_traits_vending_proto_rawDesc
)

func file_traits_vending_proto_rawDescGZIP() []byte {
	file_traits_vending_proto_rawDescOnce.Do(func() {
		file_traits_vending_proto_rawDescData = protoimpl.X.CompressGZIP(file_traits_vending_proto_rawDescData)
	})
	return file_traits_vending_proto_rawDescData
}

var file_traits_vending_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_traits_vending_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_traits_vending_proto_goTypes = []any{
	(Consumable_Unit)(0),                   // 0: smartcore.traits.Consumable.Unit
	(*Consumable)(nil),                     // 1: smartcore.traits.Consumable
	(*ListConsumablesRequest)(nil),         // 2: smartcore.traits.ListConsumablesRequest
	(*ListConsumablesResponse)(nil),        // 3: smartcore.traits.ListConsumablesResponse
	(*PullConsumablesRequest)(nil),         // 4: smartcore.traits.PullConsumablesRequest
	(*PullConsumablesResponse)(nil),        // 5: smartcore.traits.PullConsumablesResponse
	(*GetStockRequest)(nil),                // 6: smartcore.traits.GetStockRequest
	(*UpdateStockRequest)(nil),             // 7: smartcore.traits.UpdateStockRequest
	(*PullStockRequest)(nil),               // 8: smartcore.traits.PullStockRequest
	(*PullStockResponse)(nil),              // 9: smartcore.traits.PullStockResponse
	(*ListInventoryRequest)(nil),           // 10: smartcore.traits.ListInventoryRequest
	(*ListInventoryResponse)(nil),          // 11: smartcore.traits.ListInventoryResponse
	(*PullInventoryRequest)(nil),           // 12: smartcore.traits.PullInventoryRequest
	(*PullInventoryResponse)(nil),          // 13: smartcore.traits.PullInventoryResponse
	(*DispenseRequest)(nil),                // 14: smartcore.traits.DispenseRequest
	(*StopDispenseRequest)(nil),            // 15: smartcore.traits.StopDispenseRequest
	(*Consumable_Portion)(nil),             // 16: smartcore.traits.Consumable.Portion
	(*Consumable_Quantity)(nil),            // 17: smartcore.traits.Consumable.Quantity
	nil,                                    // 18: smartcore.traits.Consumable.IdsEntry
	nil,                                    // 19: smartcore.traits.Consumable.MoreEntry
	(*Consumable_Stock)(nil),               // 20: smartcore.traits.Consumable.Stock
	(*PullConsumablesResponse_Change)(nil), // 21: smartcore.traits.PullConsumablesResponse.Change
	(*PullStockResponse_Change)(nil),       // 22: smartcore.traits.PullStockResponse.Change
	(*PullInventoryResponse_Change)(nil),   // 23: smartcore.traits.PullInventoryResponse.Change
	(*types.Image)(nil),                    // 24: smartcore.types.Image
	(*fieldmaskpb.FieldMask)(nil),          // 25: google.protobuf.FieldMask
	(*types.FloatBounds)(nil),              // 26: smartcore.types.FloatBounds
	(types.ChangeType)(0),                  // 27: smartcore.types.ChangeType
	(*timestamppb.Timestamp)(nil),          // 28: google.protobuf.Timestamp
}
var file_traits_vending_proto_depIdxs = []int32{
	16, // 0: smartcore.traits.Consumable.available_portions:type_name -> smartcore.traits.Consumable.Portion
	17, // 1: smartcore.traits.Consumable.default_portion:type_name -> smartcore.traits.Consumable.Quantity
	24, // 2: smartcore.traits.Consumable.picture:type_name -> smartcore.types.Image
	18, // 3: smartcore.traits.Consumable.ids:type_name -> smartcore.traits.Consumable.IdsEntry
	19, // 4: smartcore.traits.Consumable.more:type_name -> smartcore.traits.Consumable.MoreEntry
	25, // 5: smartcore.traits.ListConsumablesRequest.read_mask:type_name -> google.protobuf.FieldMask
	1,  // 6: smartcore.traits.ListConsumablesResponse.consumables:type_name -> smartcore.traits.Consumable
	25, // 7: smartcore.traits.PullConsumablesRequest.read_mask:type_name -> google.protobuf.FieldMask
	21, // 8: smartcore.traits.PullConsumablesResponse.changes:type_name -> smartcore.traits.PullConsumablesResponse.Change
	25, // 9: smartcore.traits.GetStockRequest.read_mask:type_name -> google.protobuf.FieldMask
	20, // 10: smartcore.traits.UpdateStockRequest.stock:type_name -> smartcore.traits.Consumable.Stock
	25, // 11: smartcore.traits.UpdateStockRequest.update_mask:type_name -> google.protobuf.FieldMask
	25, // 12: smartcore.traits.PullStockRequest.read_mask:type_name -> google.protobuf.FieldMask
	22, // 13: smartcore.traits.PullStockResponse.changes:type_name -> smartcore.traits.PullStockResponse.Change
	25, // 14: smartcore.traits.ListInventoryRequest.read_mask:type_name -> google.protobuf.FieldMask
	20, // 15: smartcore.traits.ListInventoryResponse.inventory:type_name -> smartcore.traits.Consumable.Stock
	25, // 16: smartcore.traits.PullInventoryRequest.read_mask:type_name -> google.protobuf.FieldMask
	23, // 17: smartcore.traits.PullInventoryResponse.changes:type_name -> smartcore.traits.PullInventoryResponse.Change
	17, // 18: smartcore.traits.DispenseRequest.quantity:type_name -> smartcore.traits.Consumable.Quantity
	25, // 19: smartcore.traits.DispenseRequest.update_mask:type_name -> google.protobuf.FieldMask
	0,  // 20: smartcore.traits.Consumable.Portion.unit:type_name -> smartcore.traits.Consumable.Unit
	26, // 21: smartcore.traits.Consumable.Portion.bounds:type_name -> smartcore.types.FloatBounds
	0,  // 22: smartcore.traits.Consumable.Quantity.unit:type_name -> smartcore.traits.Consumable.Unit
	17, // 23: smartcore.traits.Consumable.Stock.remaining:type_name -> smartcore.traits.Consumable.Quantity
	17, // 24: smartcore.traits.Consumable.Stock.used:type_name -> smartcore.traits.Consumable.Quantity
	17, // 25: smartcore.traits.Consumable.Stock.last_dispensed:type_name -> smartcore.traits.Consumable.Quantity
	27, // 26: smartcore.traits.PullConsumablesResponse.Change.type:type_name -> smartcore.types.ChangeType
	1,  // 27: smartcore.traits.PullConsumablesResponse.Change.new_value:type_name -> smartcore.traits.Consumable
	1,  // 28: smartcore.traits.PullConsumablesResponse.Change.old_value:type_name -> smartcore.traits.Consumable
	28, // 29: smartcore.traits.PullConsumablesResponse.Change.change_time:type_name -> google.protobuf.Timestamp
	28, // 30: smartcore.traits.PullStockResponse.Change.change_time:type_name -> google.protobuf.Timestamp
	20, // 31: smartcore.traits.PullStockResponse.Change.stock:type_name -> smartcore.traits.Consumable.Stock
	27, // 32: smartcore.traits.PullInventoryResponse.Change.type:type_name -> smartcore.types.ChangeType
	20, // 33: smartcore.traits.PullInventoryResponse.Change.new_value:type_name -> smartcore.traits.Consumable.Stock
	20, // 34: smartcore.traits.PullInventoryResponse.Change.old_value:type_name -> smartcore.traits.Consumable.Stock
	28, // 35: smartcore.traits.PullInventoryResponse.Change.change_time:type_name -> google.protobuf.Timestamp
	2,  // 36: smartcore.traits.VendingApi.ListConsumables:input_type -> smartcore.traits.ListConsumablesRequest
	4,  // 37: smartcore.traits.VendingApi.PullConsumables:input_type -> smartcore.traits.PullConsumablesRequest
	6,  // 38: smartcore.traits.VendingApi.GetStock:input_type -> smartcore.traits.GetStockRequest
	7,  // 39: smartcore.traits.VendingApi.UpdateStock:input_type -> smartcore.traits.UpdateStockRequest
	8,  // 40: smartcore.traits.VendingApi.PullStock:input_type -> smartcore.traits.PullStockRequest
	10, // 41: smartcore.traits.VendingApi.ListInventory:input_type -> smartcore.traits.ListInventoryRequest
	12, // 42: smartcore.traits.VendingApi.PullInventory:input_type -> smartcore.traits.PullInventoryRequest
	14, // 43: smartcore.traits.VendingApi.Dispense:input_type -> smartcore.traits.DispenseRequest
	15, // 44: smartcore.traits.VendingApi.StopDispense:input_type -> smartcore.traits.StopDispenseRequest
	3,  // 45: smartcore.traits.VendingApi.ListConsumables:output_type -> smartcore.traits.ListConsumablesResponse
	5,  // 46: smartcore.traits.VendingApi.PullConsumables:output_type -> smartcore.traits.PullConsumablesResponse
	20, // 47: smartcore.traits.VendingApi.GetStock:output_type -> smartcore.traits.Consumable.Stock
	20, // 48: smartcore.traits.VendingApi.UpdateStock:output_type -> smartcore.traits.Consumable.Stock
	9,  // 49: smartcore.traits.VendingApi.PullStock:output_type -> smartcore.traits.PullStockResponse
	11, // 50: smartcore.traits.VendingApi.ListInventory:output_type -> smartcore.traits.ListInventoryResponse
	13, // 51: smartcore.traits.VendingApi.PullInventory:output_type -> smartcore.traits.PullInventoryResponse
	20, // 52: smartcore.traits.VendingApi.Dispense:output_type -> smartcore.traits.Consumable.Stock
	20, // 53: smartcore.traits.VendingApi.StopDispense:output_type -> smartcore.traits.Consumable.Stock
	45, // [45:54] is the sub-list for method output_type
	36, // [36:45] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_traits_vending_proto_init() }
func file_traits_vending_proto_init() {
	if File_traits_vending_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_traits_vending_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Consumable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_vending_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListConsumablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_vending_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListConsumablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_vending_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PullConsumablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_vending_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PullConsumablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_vending_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetStockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_vending_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateStockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_vending_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PullStockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_vending_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*PullStockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_vending_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ListInventoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_vending_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ListInventoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_vending_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*PullInventoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_vending_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*PullInventoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_vending_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*DispenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_vending_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*StopDispenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_vending_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Consumable_Portion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_vending_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*Consumable_Quantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_vending_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*Consumable_Stock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_vending_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*PullConsumablesResponse_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_vending_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*PullStockResponse_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_vending_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*PullInventoryResponse_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_traits_vending_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_traits_vending_proto_goTypes,
		DependencyIndexes: file_traits_vending_proto_depIdxs,
		EnumInfos:         file_traits_vending_proto_enumTypes,
		MessageInfos:      file_traits_vending_proto_msgTypes,
	}.Build()
	File_traits_vending_proto = out.File
	file_traits_vending_proto_rawDesc = nil
	file_traits_vending_proto_goTypes = nil
	file_traits_vending_proto_depIdxs = nil
}
