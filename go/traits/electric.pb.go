// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.2
// source: traits/electric.proto

package traits

import (
	types "github.com/smart-core-os/sc-api/go/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ElectricDemand describes how much power is being used by the device.
type ElectricDemand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A measure of how much electric current is currently being used.
	// In amps.
	Current float32 `protobuf:"fixed32,1,opt,name=current,proto3" json:"current,omitempty"`
	// The voltage level of the device.
	// In volts.
	Voltage *float32 `protobuf:"fixed32,2,opt,name=voltage,proto3,oneof" json:"voltage,omitempty"`
	// The maximum current that the device can handle under normal operation.
	// In amps.
	// Zero means absent, not 0 amps.
	Rating float32 `protobuf:"fixed32,3,opt,name=rating,proto3" json:"rating,omitempty"`
	// The power factor of the device.
	// Use this to convert VA (apparent power) to W (real power).
	PowerFactor *float32 `protobuf:"fixed32,4,opt,name=power_factor,json=powerFactor,proto3,oneof" json:"power_factor,omitempty"`
	// The real power of the device.
	// In watts.
	// The product of current * voltage * power_factor, though might be different depending on measured values.
	RealPower *float32 `protobuf:"fixed32,5,opt,name=real_power,json=realPower,proto3,oneof" json:"real_power,omitempty"`
	// The apparent power of the device.
	// In volt-amps.
	// The product of current * voltage, though might be different depending on measured values.
	ApparentPower *float32 `protobuf:"fixed32,6,opt,name=apparent_power,json=apparentPower,proto3,oneof" json:"apparent_power,omitempty"`
	// The reactive power of the device.
	// In volt-amps reactive.
	ReactivePower *float32 `protobuf:"fixed32,7,opt,name=reactive_power,json=reactivePower,proto3,oneof" json:"reactive_power,omitempty"`
}

func (x *ElectricDemand) Reset() {
	*x = ElectricDemand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_electric_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectricDemand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectricDemand) ProtoMessage() {}

func (x *ElectricDemand) ProtoReflect() protoreflect.Message {
	mi := &file_traits_electric_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectricDemand.ProtoReflect.Descriptor instead.
func (*ElectricDemand) Descriptor() ([]byte, []int) {
	return file_traits_electric_proto_rawDescGZIP(), []int{0}
}

func (x *ElectricDemand) GetCurrent() float32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *ElectricDemand) GetVoltage() float32 {
	if x != nil && x.Voltage != nil {
		return *x.Voltage
	}
	return 0
}

func (x *ElectricDemand) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *ElectricDemand) GetPowerFactor() float32 {
	if x != nil && x.PowerFactor != nil {
		return *x.PowerFactor
	}
	return 0
}

func (x *ElectricDemand) GetRealPower() float32 {
	if x != nil && x.RealPower != nil {
		return *x.RealPower
	}
	return 0
}

func (x *ElectricDemand) GetApparentPower() float32 {
	if x != nil && x.ApparentPower != nil {
		return *x.ApparentPower
	}
	return 0
}

func (x *ElectricDemand) GetReactivePower() float32 {
	if x != nil && x.ReactivePower != nil {
		return *x.ReactivePower
	}
	return 0
}

// An ElectricMode represents one possible electrical mode of operation for the device.
// A device can potentially have multiple electrical modes, for example a TV might have Normal and Eco modes.
// The electric mode of the device gives details on how the device expects its electricity usage to be affected when
// in these modes.
type ElectricMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID uniquely identifies this mode in a device.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A human readable name for this mode.
	// Output only.
	// Examples might include "Eco Mode", or "Smart Standby"
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// A human readable description for this mode.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The voltage level of this mode.
	// In volts.
	// Zero means absent, not 0 volts.
	Voltage float32 `protobuf:"fixed32,4,opt,name=voltage,proto3" json:"voltage,omitempty"`
	// The time the modes information is relative to in server time.
	// When a client receives a mode with an absent start time it should use its own clock to create one, though this
	// may introduce skew depending on the difference between the server and client clocks.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// An ordered, continuous, non-empty, list of segments representing the power draw for this mode.
	// The first segment is relative to start_time, the second is relevant to the end of the first and so on.
	Segments []*ElectricMode_Segment `protobuf:"bytes,6,rep,name=segments,proto3" json:"segments,omitempty"`
	// When true this indicates that this mode is the normal / default operation mode for the device.
	// A device should have only one default mode.
	Normal bool `protobuf:"varint,7,opt,name=normal,proto3" json:"normal,omitempty"`
}

func (x *ElectricMode) Reset() {
	*x = ElectricMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_electric_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectricMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectricMode) ProtoMessage() {}

func (x *ElectricMode) ProtoReflect() protoreflect.Message {
	mi := &file_traits_electric_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectricMode.ProtoReflect.Descriptor instead.
func (*ElectricMode) Descriptor() ([]byte, []int) {
	return file_traits_electric_proto_rawDescGZIP(), []int{1}
}

func (x *ElectricMode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ElectricMode) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ElectricMode) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ElectricMode) GetVoltage() float32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *ElectricMode) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ElectricMode) GetSegments() []*ElectricMode_Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *ElectricMode) GetNormal() bool {
	if x != nil {
		return x.Normal
	}
	return false
}

type GetDemandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device to fetch the state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Fields to fetch relative to the ElectricDemand type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
}

func (x *GetDemandRequest) Reset() {
	*x = GetDemandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_electric_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDemandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDemandRequest) ProtoMessage() {}

func (x *GetDemandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_electric_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDemandRequest.ProtoReflect.Descriptor instead.
func (*GetDemandRequest) Descriptor() ([]byte, []int) {
	return file_traits_electric_proto_rawDescGZIP(), []int{2}
}

func (x *GetDemandRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDemandRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

type PullDemandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device to fetch the state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Fields to fetch relative to the ElectricDemand type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// When true the device will only send changes to the resource value.
	// The default behaviour is to send the current value immediately followed by any updates as they happen.
	UpdatesOnly bool `protobuf:"varint,3,opt,name=updates_only,json=updatesOnly,proto3" json:"updates_only,omitempty"`
}

func (x *PullDemandRequest) Reset() {
	*x = PullDemandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_electric_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullDemandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullDemandRequest) ProtoMessage() {}

func (x *PullDemandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_electric_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullDemandRequest.ProtoReflect.Descriptor instead.
func (*PullDemandRequest) Descriptor() ([]byte, []int) {
	return file_traits_electric_proto_rawDescGZIP(), []int{3}
}

func (x *PullDemandRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullDemandRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *PullDemandRequest) GetUpdatesOnly() bool {
	if x != nil {
		return x.UpdatesOnly
	}
	return false
}

type PullDemandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Changes since the last message.
	Changes []*PullDemandResponse_Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *PullDemandResponse) Reset() {
	*x = PullDemandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_electric_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullDemandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullDemandResponse) ProtoMessage() {}

func (x *PullDemandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traits_electric_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullDemandResponse.ProtoReflect.Descriptor instead.
func (*PullDemandResponse) Descriptor() ([]byte, []int) {
	return file_traits_electric_proto_rawDescGZIP(), []int{4}
}

func (x *PullDemandResponse) GetChanges() []*PullDemandResponse_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

type GetActiveModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device to fetch the state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Fields to fetch relative to the ElectricMode type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
}

func (x *GetActiveModeRequest) Reset() {
	*x = GetActiveModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_electric_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveModeRequest) ProtoMessage() {}

func (x *GetActiveModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_electric_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveModeRequest.ProtoReflect.Descriptor instead.
func (*GetActiveModeRequest) Descriptor() ([]byte, []int) {
	return file_traits_electric_proto_rawDescGZIP(), []int{5}
}

func (x *GetActiveModeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetActiveModeRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

type UpdateActiveModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The active mode to select.
	// The id field should be specified to select an existing mode.
	ActiveMode *ElectricMode `protobuf:"bytes,2,opt,name=active_mode,json=activeMode,proto3" json:"active_mode,omitempty"`
	// Fields to update relative to the ElectricMode type.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateActiveModeRequest) Reset() {
	*x = UpdateActiveModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_electric_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateActiveModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateActiveModeRequest) ProtoMessage() {}

func (x *UpdateActiveModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_electric_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateActiveModeRequest.ProtoReflect.Descriptor instead.
func (*UpdateActiveModeRequest) Descriptor() ([]byte, []int) {
	return file_traits_electric_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateActiveModeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateActiveModeRequest) GetActiveMode() *ElectricMode {
	if x != nil {
		return x.ActiveMode
	}
	return nil
}

func (x *UpdateActiveModeRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type ClearActiveModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ClearActiveModeRequest) Reset() {
	*x = ClearActiveModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_electric_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearActiveModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearActiveModeRequest) ProtoMessage() {}

func (x *ClearActiveModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_electric_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearActiveModeRequest.ProtoReflect.Descriptor instead.
func (*ClearActiveModeRequest) Descriptor() ([]byte, []int) {
	return file_traits_electric_proto_rawDescGZIP(), []int{7}
}

func (x *ClearActiveModeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PullActiveModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device to fetch the state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Fields to fetch relative to the ElectricMode type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// When true the device will only send changes to the resource value.
	// The default behaviour is to send the current value immediately followed by any updates as they happen.
	UpdatesOnly bool `protobuf:"varint,3,opt,name=updates_only,json=updatesOnly,proto3" json:"updates_only,omitempty"`
}

func (x *PullActiveModeRequest) Reset() {
	*x = PullActiveModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_electric_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullActiveModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullActiveModeRequest) ProtoMessage() {}

func (x *PullActiveModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_electric_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullActiveModeRequest.ProtoReflect.Descriptor instead.
func (*PullActiveModeRequest) Descriptor() ([]byte, []int) {
	return file_traits_electric_proto_rawDescGZIP(), []int{8}
}

func (x *PullActiveModeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullActiveModeRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *PullActiveModeRequest) GetUpdatesOnly() bool {
	if x != nil {
		return x.UpdatesOnly
	}
	return false
}

type PullActiveModeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Changes since the last message
	Changes []*PullActiveModeResponse_Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *PullActiveModeResponse) Reset() {
	*x = PullActiveModeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_electric_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullActiveModeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullActiveModeResponse) ProtoMessage() {}

func (x *PullActiveModeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traits_electric_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullActiveModeResponse.ProtoReflect.Descriptor instead.
func (*PullActiveModeResponse) Descriptor() ([]byte, []int) {
	return file_traits_electric_proto_rawDescGZIP(), []int{9}
}

func (x *PullActiveModeResponse) GetChanges() []*PullActiveModeResponse_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

type ListModesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device to fetch the state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Fields to fetch relative to the ElectricMode type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// The maximum number of modes to return.
	// The service may return fewer than this value.
	// If unspecified, at most 50 items will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListModesResponse` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListModesRequest) Reset() {
	*x = ListModesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_electric_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModesRequest) ProtoMessage() {}

func (x *ListModesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_electric_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModesRequest.ProtoReflect.Descriptor instead.
func (*ListModesRequest) Descriptor() ([]byte, []int) {
	return file_traits_electric_proto_rawDescGZIP(), []int{10}
}

func (x *ListModesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListModesRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *ListModesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListModesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListModesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modes []*ElectricMode `protobuf:"bytes,1,rep,name=modes,proto3" json:"modes,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// If non-zero this is the total number of draw notifications.
	// This may be an estimate.
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListModesResponse) Reset() {
	*x = ListModesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_electric_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModesResponse) ProtoMessage() {}

func (x *ListModesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traits_electric_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModesResponse.ProtoReflect.Descriptor instead.
func (*ListModesResponse) Descriptor() ([]byte, []int) {
	return file_traits_electric_proto_rawDescGZIP(), []int{11}
}

func (x *ListModesResponse) GetModes() []*ElectricMode {
	if x != nil {
		return x.Modes
	}
	return nil
}

func (x *ListModesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListModesResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type PullModesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device to fetch the state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Fields to fetch relative to the ElectricMode type
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// When true the device will only send changes to the resource value.
	// The default behaviour is to send the current value immediately followed by any updates as they happen.
	UpdatesOnly bool `protobuf:"varint,3,opt,name=updates_only,json=updatesOnly,proto3" json:"updates_only,omitempty"`
}

func (x *PullModesRequest) Reset() {
	*x = PullModesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_electric_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullModesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullModesRequest) ProtoMessage() {}

func (x *PullModesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_electric_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullModesRequest.ProtoReflect.Descriptor instead.
func (*PullModesRequest) Descriptor() ([]byte, []int) {
	return file_traits_electric_proto_rawDescGZIP(), []int{12}
}

func (x *PullModesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullModesRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *PullModesRequest) GetUpdatesOnly() bool {
	if x != nil {
		return x.UpdatesOnly
	}
	return false
}

type PullModesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of changes which have occurred
	Changes []*PullModesResponse_Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *PullModesResponse) Reset() {
	*x = PullModesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_electric_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullModesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullModesResponse) ProtoMessage() {}

func (x *PullModesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traits_electric_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullModesResponse.ProtoReflect.Descriptor instead.
func (*PullModesResponse) Descriptor() ([]byte, []int) {
	return file_traits_electric_proto_rawDescGZIP(), []int{13}
}

func (x *PullModesResponse) GetChanges() []*PullModesResponse_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

// A Segment describes electrical properties for a slice of time.
type ElectricMode_Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The length of this mode segment.
	// An absent length means this segment lasts forever.
	// Only the last segment of a mode can have an absent length.
	Length *durationpb.Duration `protobuf:"bytes,1,opt,name=length,proto3" json:"length,omitempty"`
	// The maximum current that will be drawn by the device in this segment.
	// In amps. Required.
	// See the shape properties to determine a more accurate shape for the electrical demand.
	Magnitude float32 `protobuf:"fixed32,2,opt,name=magnitude,proto3" json:"magnitude,omitempty"`
	// The shape of the segment, useful as a more accurate data representation.
	// If none set assume fixed = magnitude.
	//
	// Types that are assignable to Shape:
	//
	//	*ElectricMode_Segment_Fixed
	Shape isElectricMode_Segment_Shape `protobuf_oneof:"shape"`
}

func (x *ElectricMode_Segment) Reset() {
	*x = ElectricMode_Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_electric_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectricMode_Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectricMode_Segment) ProtoMessage() {}

func (x *ElectricMode_Segment) ProtoReflect() protoreflect.Message {
	mi := &file_traits_electric_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectricMode_Segment.ProtoReflect.Descriptor instead.
func (*ElectricMode_Segment) Descriptor() ([]byte, []int) {
	return file_traits_electric_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ElectricMode_Segment) GetLength() *durationpb.Duration {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *ElectricMode_Segment) GetMagnitude() float32 {
	if x != nil {
		return x.Magnitude
	}
	return 0
}

func (m *ElectricMode_Segment) GetShape() isElectricMode_Segment_Shape {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (x *ElectricMode_Segment) GetFixed() float32 {
	if x, ok := x.GetShape().(*ElectricMode_Segment_Fixed); ok {
		return x.Fixed
	}
	return 0
}

type isElectricMode_Segment_Shape interface {
	isElectricMode_Segment_Shape()
}

type ElectricMode_Segment_Fixed struct {
	// Fixed represents a constant consumption for the length of this segment.
	// In amps.
	Fixed float32 `protobuf:"fixed32,3,opt,name=fixed,proto3,oneof"`
}

func (*ElectricMode_Segment_Fixed) isElectricMode_Segment_Shape() {}

type PullDemandResponse_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the device that issued the change.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// When the change occurred
	ChangeTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
	// The new value for the current demand.
	Demand *ElectricDemand `protobuf:"bytes,3,opt,name=demand,proto3" json:"demand,omitempty"`
}

func (x *PullDemandResponse_Change) Reset() {
	*x = PullDemandResponse_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_electric_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullDemandResponse_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullDemandResponse_Change) ProtoMessage() {}

func (x *PullDemandResponse_Change) ProtoReflect() protoreflect.Message {
	mi := &file_traits_electric_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullDemandResponse_Change.ProtoReflect.Descriptor instead.
func (*PullDemandResponse_Change) Descriptor() ([]byte, []int) {
	return file_traits_electric_proto_rawDescGZIP(), []int{4, 0}
}

func (x *PullDemandResponse_Change) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullDemandResponse_Change) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

func (x *PullDemandResponse_Change) GetDemand() *ElectricDemand {
	if x != nil {
		return x.Demand
	}
	return nil
}

type PullActiveModeResponse_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name for the device that issued the change
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// When the change occurred
	ChangeTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
	// The new value for the active mode
	ActiveMode *ElectricMode `protobuf:"bytes,3,opt,name=active_mode,json=activeMode,proto3" json:"active_mode,omitempty"`
}

func (x *PullActiveModeResponse_Change) Reset() {
	*x = PullActiveModeResponse_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_electric_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullActiveModeResponse_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullActiveModeResponse_Change) ProtoMessage() {}

func (x *PullActiveModeResponse_Change) ProtoReflect() protoreflect.Message {
	mi := &file_traits_electric_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullActiveModeResponse_Change.ProtoReflect.Descriptor instead.
func (*PullActiveModeResponse_Change) Descriptor() ([]byte, []int) {
	return file_traits_electric_proto_rawDescGZIP(), []int{9, 0}
}

func (x *PullActiveModeResponse_Change) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullActiveModeResponse_Change) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

func (x *PullActiveModeResponse_Change) GetActiveMode() *ElectricMode {
	if x != nil {
		return x.ActiveMode
	}
	return nil
}

type PullModesResponse_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device that emitted this change
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The type of change (e.g. ADD, UPDATE, etc...)
	Type types.ChangeType `protobuf:"varint,2,opt,name=type,proto3,enum=smartcore.types.ChangeType" json:"type,omitempty"`
	// The new value to use for ADD|UPDATE changes
	NewValue *ElectricMode `protobuf:"bytes,3,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	// The old value to use for UPDATE|REMOVE changes
	OldValue *ElectricMode `protobuf:"bytes,4,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	// When the change occurred
	ChangeTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
}

func (x *PullModesResponse_Change) Reset() {
	*x = PullModesResponse_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_electric_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullModesResponse_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullModesResponse_Change) ProtoMessage() {}

func (x *PullModesResponse_Change) ProtoReflect() protoreflect.Message {
	mi := &file_traits_electric_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullModesResponse_Change.ProtoReflect.Descriptor instead.
func (*PullModesResponse_Change) Descriptor() ([]byte, []int) {
	return file_traits_electric_proto_rawDescGZIP(), []int{13, 0}
}

func (x *PullModesResponse_Change) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullModesResponse_Change) GetType() types.ChangeType {
	if x != nil {
		return x.Type
	}
	return types.ChangeType(0)
}

func (x *PullModesResponse_Change) GetNewValue() *ElectricMode {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *PullModesResponse_Change) GetOldValue() *ElectricMode {
	if x != nil {
		return x.OldValue
	}
	return nil
}

func (x *PullModesResponse_Change) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

var File_traits_electric_proto protoreflect.FileDescriptor

var file_traits_electric_proto_rawDesc = []byte{
	0x0a, 0x15, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd7, 0x02, 0x0a, 0x0e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00,
	0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x72, 0x65, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x02, 0x52, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x84, 0x03, 0x0a, 0x0c, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x1a, 0x7b, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x31, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x00, 0x52, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70,
	0x65, 0x22, 0x5f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xf1, 0x01, 0x0a, 0x12, 0x50, 0x75, 0x6c,
	0x6c, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x93, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x06, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x63, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x22, 0xab, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72,
	0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22,
	0x2c, 0x0a, 0x16, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x87, 0x01,
	0x0a, 0x15, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x80, 0x02, 0x0a, 0x16, 0x50, 0x75, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x9a, 0x01,
	0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x73, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,
	0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x10,
	0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x79,
	0x22, 0xe0, 0x02, 0x0a, 0x11, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x84, 0x02, 0x0a,
	0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x09,
	0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x6f, 0x6c, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6f, 0x6c,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x32, 0xe5, 0x05, 0x0a, 0x0b, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63,
	0x41, 0x70, 0x69, 0x12, 0x51, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x22, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63,
	0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x59, 0x0a, 0x0a, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x23, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c,
	0x6c, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x57, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x26, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x29,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x5b, 0x0a, 0x0f, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72,
	0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x65, 0x0a, 0x0e, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x54, 0x0a,
	0x09, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x09, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x22, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0x0e, 0x0a, 0x0c, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x78, 0x0a, 0x14, 0x64,
	0x65, 0x76, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x73, 0x42, 0x0d, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2d, 0x6f, 0x73, 0x2f, 0x73,
	0x63, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0xaa,
	0x02, 0x10, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x69,
	0x74, 0x73, 0xca, 0x02, 0x10, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x5c, 0x54,
	0x72, 0x61, 0x69, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_traits_electric_proto_rawDescOnce sync.Once
	file_traits_electric_proto_rawDescData = file_traits_electric_proto_rawDesc
)

func file_traits_electric_proto_rawDescGZIP() []byte {
	file_traits_electric_proto_rawDescOnce.Do(func() {
		file_traits_electric_proto_rawDescData = protoimpl.X.CompressGZIP(file_traits_electric_proto_rawDescData)
	})
	return file_traits_electric_proto_rawDescData
}

var file_traits_electric_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_traits_electric_proto_goTypes = []any{
	(*ElectricDemand)(nil),                // 0: smartcore.traits.ElectricDemand
	(*ElectricMode)(nil),                  // 1: smartcore.traits.ElectricMode
	(*GetDemandRequest)(nil),              // 2: smartcore.traits.GetDemandRequest
	(*PullDemandRequest)(nil),             // 3: smartcore.traits.PullDemandRequest
	(*PullDemandResponse)(nil),            // 4: smartcore.traits.PullDemandResponse
	(*GetActiveModeRequest)(nil),          // 5: smartcore.traits.GetActiveModeRequest
	(*UpdateActiveModeRequest)(nil),       // 6: smartcore.traits.UpdateActiveModeRequest
	(*ClearActiveModeRequest)(nil),        // 7: smartcore.traits.ClearActiveModeRequest
	(*PullActiveModeRequest)(nil),         // 8: smartcore.traits.PullActiveModeRequest
	(*PullActiveModeResponse)(nil),        // 9: smartcore.traits.PullActiveModeResponse
	(*ListModesRequest)(nil),              // 10: smartcore.traits.ListModesRequest
	(*ListModesResponse)(nil),             // 11: smartcore.traits.ListModesResponse
	(*PullModesRequest)(nil),              // 12: smartcore.traits.PullModesRequest
	(*PullModesResponse)(nil),             // 13: smartcore.traits.PullModesResponse
	(*ElectricMode_Segment)(nil),          // 14: smartcore.traits.ElectricMode.Segment
	(*PullDemandResponse_Change)(nil),     // 15: smartcore.traits.PullDemandResponse.Change
	(*PullActiveModeResponse_Change)(nil), // 16: smartcore.traits.PullActiveModeResponse.Change
	(*PullModesResponse_Change)(nil),      // 17: smartcore.traits.PullModesResponse.Change
	(*timestamppb.Timestamp)(nil),         // 18: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),         // 19: google.protobuf.FieldMask
	(*durationpb.Duration)(nil),           // 20: google.protobuf.Duration
	(types.ChangeType)(0),                 // 21: smartcore.types.ChangeType
}
var file_traits_electric_proto_depIdxs = []int32{
	18, // 0: smartcore.traits.ElectricMode.start_time:type_name -> google.protobuf.Timestamp
	14, // 1: smartcore.traits.ElectricMode.segments:type_name -> smartcore.traits.ElectricMode.Segment
	19, // 2: smartcore.traits.GetDemandRequest.read_mask:type_name -> google.protobuf.FieldMask
	19, // 3: smartcore.traits.PullDemandRequest.read_mask:type_name -> google.protobuf.FieldMask
	15, // 4: smartcore.traits.PullDemandResponse.changes:type_name -> smartcore.traits.PullDemandResponse.Change
	19, // 5: smartcore.traits.GetActiveModeRequest.read_mask:type_name -> google.protobuf.FieldMask
	1,  // 6: smartcore.traits.UpdateActiveModeRequest.active_mode:type_name -> smartcore.traits.ElectricMode
	19, // 7: smartcore.traits.UpdateActiveModeRequest.update_mask:type_name -> google.protobuf.FieldMask
	19, // 8: smartcore.traits.PullActiveModeRequest.read_mask:type_name -> google.protobuf.FieldMask
	16, // 9: smartcore.traits.PullActiveModeResponse.changes:type_name -> smartcore.traits.PullActiveModeResponse.Change
	19, // 10: smartcore.traits.ListModesRequest.read_mask:type_name -> google.protobuf.FieldMask
	1,  // 11: smartcore.traits.ListModesResponse.modes:type_name -> smartcore.traits.ElectricMode
	19, // 12: smartcore.traits.PullModesRequest.read_mask:type_name -> google.protobuf.FieldMask
	17, // 13: smartcore.traits.PullModesResponse.changes:type_name -> smartcore.traits.PullModesResponse.Change
	20, // 14: smartcore.traits.ElectricMode.Segment.length:type_name -> google.protobuf.Duration
	18, // 15: smartcore.traits.PullDemandResponse.Change.change_time:type_name -> google.protobuf.Timestamp
	0,  // 16: smartcore.traits.PullDemandResponse.Change.demand:type_name -> smartcore.traits.ElectricDemand
	18, // 17: smartcore.traits.PullActiveModeResponse.Change.change_time:type_name -> google.protobuf.Timestamp
	1,  // 18: smartcore.traits.PullActiveModeResponse.Change.active_mode:type_name -> smartcore.traits.ElectricMode
	21, // 19: smartcore.traits.PullModesResponse.Change.type:type_name -> smartcore.types.ChangeType
	1,  // 20: smartcore.traits.PullModesResponse.Change.new_value:type_name -> smartcore.traits.ElectricMode
	1,  // 21: smartcore.traits.PullModesResponse.Change.old_value:type_name -> smartcore.traits.ElectricMode
	18, // 22: smartcore.traits.PullModesResponse.Change.change_time:type_name -> google.protobuf.Timestamp
	2,  // 23: smartcore.traits.ElectricApi.GetDemand:input_type -> smartcore.traits.GetDemandRequest
	3,  // 24: smartcore.traits.ElectricApi.PullDemand:input_type -> smartcore.traits.PullDemandRequest
	5,  // 25: smartcore.traits.ElectricApi.GetActiveMode:input_type -> smartcore.traits.GetActiveModeRequest
	6,  // 26: smartcore.traits.ElectricApi.UpdateActiveMode:input_type -> smartcore.traits.UpdateActiveModeRequest
	7,  // 27: smartcore.traits.ElectricApi.ClearActiveMode:input_type -> smartcore.traits.ClearActiveModeRequest
	8,  // 28: smartcore.traits.ElectricApi.PullActiveMode:input_type -> smartcore.traits.PullActiveModeRequest
	10, // 29: smartcore.traits.ElectricApi.ListModes:input_type -> smartcore.traits.ListModesRequest
	12, // 30: smartcore.traits.ElectricApi.PullModes:input_type -> smartcore.traits.PullModesRequest
	0,  // 31: smartcore.traits.ElectricApi.GetDemand:output_type -> smartcore.traits.ElectricDemand
	4,  // 32: smartcore.traits.ElectricApi.PullDemand:output_type -> smartcore.traits.PullDemandResponse
	1,  // 33: smartcore.traits.ElectricApi.GetActiveMode:output_type -> smartcore.traits.ElectricMode
	1,  // 34: smartcore.traits.ElectricApi.UpdateActiveMode:output_type -> smartcore.traits.ElectricMode
	1,  // 35: smartcore.traits.ElectricApi.ClearActiveMode:output_type -> smartcore.traits.ElectricMode
	9,  // 36: smartcore.traits.ElectricApi.PullActiveMode:output_type -> smartcore.traits.PullActiveModeResponse
	11, // 37: smartcore.traits.ElectricApi.ListModes:output_type -> smartcore.traits.ListModesResponse
	13, // 38: smartcore.traits.ElectricApi.PullModes:output_type -> smartcore.traits.PullModesResponse
	31, // [31:39] is the sub-list for method output_type
	23, // [23:31] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_traits_electric_proto_init() }
func file_traits_electric_proto_init() {
	if File_traits_electric_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_traits_electric_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ElectricDemand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_electric_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ElectricMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_electric_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetDemandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_electric_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PullDemandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_electric_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PullDemandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_electric_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetActiveModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_electric_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateActiveModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_electric_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ClearActiveModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_electric_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*PullActiveModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_electric_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*PullActiveModeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_electric_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ListModesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_electric_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ListModesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_electric_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*PullModesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_electric_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*PullModesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_electric_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ElectricMode_Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_electric_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*PullDemandResponse_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_electric_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*PullActiveModeResponse_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_electric_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*PullModesResponse_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_traits_electric_proto_msgTypes[0].OneofWrappers = []any{}
	file_traits_electric_proto_msgTypes[14].OneofWrappers = []any{
		(*ElectricMode_Segment_Fixed)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_traits_electric_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_traits_electric_proto_goTypes,
		DependencyIndexes: file_traits_electric_proto_depIdxs,
		MessageInfos:      file_traits_electric_proto_msgTypes,
	}.Build()
	File_traits_electric_proto = out.File
	file_traits_electric_proto_rawDesc = nil
	file_traits_electric_proto_goTypes = nil
	file_traits_electric_proto_depIdxs = nil
}
