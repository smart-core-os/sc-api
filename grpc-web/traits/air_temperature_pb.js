// source: traits/air_temperature.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_field_mask_pb = require('google-protobuf/google/protobuf/field_mask_pb.js');
goog.object.extend(proto, google_protobuf_field_mask_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var types_info_pb = require('../types/info_pb.js');
goog.object.extend(proto, types_info_pb);
var types_unit_pb = require('../types/unit_pb.js');
goog.object.extend(proto, types_unit_pb);
goog.exportSymbol('proto.smartcore.traits.AirTemperature', null, global);
goog.exportSymbol('proto.smartcore.traits.AirTemperature.Mode', null, global);
goog.exportSymbol('proto.smartcore.traits.AirTemperature.TemperatureGoalCase', null, global);
goog.exportSymbol('proto.smartcore.traits.AirTemperatureSupport', null, global);
goog.exportSymbol('proto.smartcore.traits.DescribeAirTemperatureRequest', null, global);
goog.exportSymbol('proto.smartcore.traits.GetAirTemperatureRequest', null, global);
goog.exportSymbol('proto.smartcore.traits.PullAirTemperatureRequest', null, global);
goog.exportSymbol('proto.smartcore.traits.PullAirTemperatureResponse', null, global);
goog.exportSymbol('proto.smartcore.traits.PullAirTemperatureResponse.Change', null, global);
goog.exportSymbol('proto.smartcore.traits.TemperatureRange', null, global);
goog.exportSymbol('proto.smartcore.traits.UpdateAirTemperatureRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.AirTemperature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.smartcore.traits.AirTemperature.oneofGroups_);
};
goog.inherits(proto.smartcore.traits.AirTemperature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.AirTemperature.displayName = 'proto.smartcore.traits.AirTemperature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.TemperatureRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smartcore.traits.TemperatureRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.TemperatureRange.displayName = 'proto.smartcore.traits.TemperatureRange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.AirTemperatureSupport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.smartcore.traits.AirTemperatureSupport.repeatedFields_, null);
};
goog.inherits(proto.smartcore.traits.AirTemperatureSupport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.AirTemperatureSupport.displayName = 'proto.smartcore.traits.AirTemperatureSupport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.GetAirTemperatureRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smartcore.traits.GetAirTemperatureRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.GetAirTemperatureRequest.displayName = 'proto.smartcore.traits.GetAirTemperatureRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.UpdateAirTemperatureRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smartcore.traits.UpdateAirTemperatureRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.UpdateAirTemperatureRequest.displayName = 'proto.smartcore.traits.UpdateAirTemperatureRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.PullAirTemperatureRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smartcore.traits.PullAirTemperatureRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.PullAirTemperatureRequest.displayName = 'proto.smartcore.traits.PullAirTemperatureRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.PullAirTemperatureResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.smartcore.traits.PullAirTemperatureResponse.repeatedFields_, null);
};
goog.inherits(proto.smartcore.traits.PullAirTemperatureResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.PullAirTemperatureResponse.displayName = 'proto.smartcore.traits.PullAirTemperatureResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.PullAirTemperatureResponse.Change = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smartcore.traits.PullAirTemperatureResponse.Change, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.PullAirTemperatureResponse.Change.displayName = 'proto.smartcore.traits.PullAirTemperatureResponse.Change';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.DescribeAirTemperatureRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smartcore.traits.DescribeAirTemperatureRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.DescribeAirTemperatureRequest.displayName = 'proto.smartcore.traits.DescribeAirTemperatureRequest';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.smartcore.traits.AirTemperature.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.smartcore.traits.AirTemperature.TemperatureGoalCase = {
  TEMPERATURE_GOAL_NOT_SET: 0,
  TEMPERATURE_SET_POINT: 2,
  TEMPERATURE_SET_POINT_DELTA: 3,
  TEMPERATURE_RANGE: 4
};

/**
 * @return {proto.smartcore.traits.AirTemperature.TemperatureGoalCase}
 */
proto.smartcore.traits.AirTemperature.prototype.getTemperatureGoalCase = function() {
  return /** @type {proto.smartcore.traits.AirTemperature.TemperatureGoalCase} */(jspb.Message.computeOneofCase(this, proto.smartcore.traits.AirTemperature.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.AirTemperature.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.AirTemperature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.AirTemperature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.AirTemperature.toObject = function(includeInstance, msg) {
  var f, obj = {
mode: jspb.Message.getFieldWithDefault(msg, 1, 0),
temperatureSetPoint: (f = msg.getTemperatureSetPoint()) && types_unit_pb.Temperature.toObject(includeInstance, f),
temperatureSetPointDelta: (f = msg.getTemperatureSetPointDelta()) && types_unit_pb.Temperature.toObject(includeInstance, f),
temperatureRange: (f = msg.getTemperatureRange()) && proto.smartcore.traits.TemperatureRange.toObject(includeInstance, f),
ambientTemperature: (f = msg.getAmbientTemperature()) && types_unit_pb.Temperature.toObject(includeInstance, f),
ambientHumidity: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
dewPoint: (f = msg.getDewPoint()) && types_unit_pb.Temperature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.AirTemperature}
 */
proto.smartcore.traits.AirTemperature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.AirTemperature;
  return proto.smartcore.traits.AirTemperature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.AirTemperature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.AirTemperature}
 */
proto.smartcore.traits.AirTemperature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.smartcore.traits.AirTemperature.Mode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 2:
      var value = new types_unit_pb.Temperature;
      reader.readMessage(value,types_unit_pb.Temperature.deserializeBinaryFromReader);
      msg.setTemperatureSetPoint(value);
      break;
    case 3:
      var value = new types_unit_pb.Temperature;
      reader.readMessage(value,types_unit_pb.Temperature.deserializeBinaryFromReader);
      msg.setTemperatureSetPointDelta(value);
      break;
    case 4:
      var value = new proto.smartcore.traits.TemperatureRange;
      reader.readMessage(value,proto.smartcore.traits.TemperatureRange.deserializeBinaryFromReader);
      msg.setTemperatureRange(value);
      break;
    case 5:
      var value = new types_unit_pb.Temperature;
      reader.readMessage(value,types_unit_pb.Temperature.deserializeBinaryFromReader);
      msg.setAmbientTemperature(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAmbientHumidity(value);
      break;
    case 7:
      var value = new types_unit_pb.Temperature;
      reader.readMessage(value,types_unit_pb.Temperature.deserializeBinaryFromReader);
      msg.setDewPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.AirTemperature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.AirTemperature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.AirTemperature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.AirTemperature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTemperatureSetPoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      types_unit_pb.Temperature.serializeBinaryToWriter
    );
  }
  f = message.getTemperatureSetPointDelta();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      types_unit_pb.Temperature.serializeBinaryToWriter
    );
  }
  f = message.getTemperatureRange();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.smartcore.traits.TemperatureRange.serializeBinaryToWriter
    );
  }
  f = message.getAmbientTemperature();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      types_unit_pb.Temperature.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getDewPoint();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      types_unit_pb.Temperature.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.smartcore.traits.AirTemperature.Mode = {
  MODE_UNSPECIFIED: 0,
  ON: 1,
  OFF: 2,
  HEAT: 3,
  COOL: 4,
  HEAT_COOL: 5,
  AUTO: 6,
  FAN_ONLY: 7,
  ECO: 8,
  PURIFIER: 9,
  DRY: 10,
  LOCKED: 11
};

/**
 * optional Mode mode = 1;
 * @return {!proto.smartcore.traits.AirTemperature.Mode}
 */
proto.smartcore.traits.AirTemperature.prototype.getMode = function() {
  return /** @type {!proto.smartcore.traits.AirTemperature.Mode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.smartcore.traits.AirTemperature.Mode} value
 * @return {!proto.smartcore.traits.AirTemperature} returns this
 */
proto.smartcore.traits.AirTemperature.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional smartcore.types.Temperature temperature_set_point = 2;
 * @return {?proto.smartcore.types.Temperature}
 */
proto.smartcore.traits.AirTemperature.prototype.getTemperatureSetPoint = function() {
  return /** @type{?proto.smartcore.types.Temperature} */ (
    jspb.Message.getWrapperField(this, types_unit_pb.Temperature, 2));
};


/**
 * @param {?proto.smartcore.types.Temperature|undefined} value
 * @return {!proto.smartcore.traits.AirTemperature} returns this
*/
proto.smartcore.traits.AirTemperature.prototype.setTemperatureSetPoint = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.smartcore.traits.AirTemperature.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.AirTemperature} returns this
 */
proto.smartcore.traits.AirTemperature.prototype.clearTemperatureSetPoint = function() {
  return this.setTemperatureSetPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.AirTemperature.prototype.hasTemperatureSetPoint = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional smartcore.types.Temperature temperature_set_point_delta = 3;
 * @return {?proto.smartcore.types.Temperature}
 */
proto.smartcore.traits.AirTemperature.prototype.getTemperatureSetPointDelta = function() {
  return /** @type{?proto.smartcore.types.Temperature} */ (
    jspb.Message.getWrapperField(this, types_unit_pb.Temperature, 3));
};


/**
 * @param {?proto.smartcore.types.Temperature|undefined} value
 * @return {!proto.smartcore.traits.AirTemperature} returns this
*/
proto.smartcore.traits.AirTemperature.prototype.setTemperatureSetPointDelta = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.smartcore.traits.AirTemperature.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.AirTemperature} returns this
 */
proto.smartcore.traits.AirTemperature.prototype.clearTemperatureSetPointDelta = function() {
  return this.setTemperatureSetPointDelta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.AirTemperature.prototype.hasTemperatureSetPointDelta = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TemperatureRange temperature_range = 4;
 * @return {?proto.smartcore.traits.TemperatureRange}
 */
proto.smartcore.traits.AirTemperature.prototype.getTemperatureRange = function() {
  return /** @type{?proto.smartcore.traits.TemperatureRange} */ (
    jspb.Message.getWrapperField(this, proto.smartcore.traits.TemperatureRange, 4));
};


/**
 * @param {?proto.smartcore.traits.TemperatureRange|undefined} value
 * @return {!proto.smartcore.traits.AirTemperature} returns this
*/
proto.smartcore.traits.AirTemperature.prototype.setTemperatureRange = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.smartcore.traits.AirTemperature.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.AirTemperature} returns this
 */
proto.smartcore.traits.AirTemperature.prototype.clearTemperatureRange = function() {
  return this.setTemperatureRange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.AirTemperature.prototype.hasTemperatureRange = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional smartcore.types.Temperature ambient_temperature = 5;
 * @return {?proto.smartcore.types.Temperature}
 */
proto.smartcore.traits.AirTemperature.prototype.getAmbientTemperature = function() {
  return /** @type{?proto.smartcore.types.Temperature} */ (
    jspb.Message.getWrapperField(this, types_unit_pb.Temperature, 5));
};


/**
 * @param {?proto.smartcore.types.Temperature|undefined} value
 * @return {!proto.smartcore.traits.AirTemperature} returns this
*/
proto.smartcore.traits.AirTemperature.prototype.setAmbientTemperature = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.AirTemperature} returns this
 */
proto.smartcore.traits.AirTemperature.prototype.clearAmbientTemperature = function() {
  return this.setAmbientTemperature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.AirTemperature.prototype.hasAmbientTemperature = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float ambient_humidity = 6;
 * @return {number}
 */
proto.smartcore.traits.AirTemperature.prototype.getAmbientHumidity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.smartcore.traits.AirTemperature} returns this
 */
proto.smartcore.traits.AirTemperature.prototype.setAmbientHumidity = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.smartcore.traits.AirTemperature} returns this
 */
proto.smartcore.traits.AirTemperature.prototype.clearAmbientHumidity = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.AirTemperature.prototype.hasAmbientHumidity = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional smartcore.types.Temperature dew_point = 7;
 * @return {?proto.smartcore.types.Temperature}
 */
proto.smartcore.traits.AirTemperature.prototype.getDewPoint = function() {
  return /** @type{?proto.smartcore.types.Temperature} */ (
    jspb.Message.getWrapperField(this, types_unit_pb.Temperature, 7));
};


/**
 * @param {?proto.smartcore.types.Temperature|undefined} value
 * @return {!proto.smartcore.traits.AirTemperature} returns this
*/
proto.smartcore.traits.AirTemperature.prototype.setDewPoint = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.AirTemperature} returns this
 */
proto.smartcore.traits.AirTemperature.prototype.clearDewPoint = function() {
  return this.setDewPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.AirTemperature.prototype.hasDewPoint = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.TemperatureRange.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.TemperatureRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.TemperatureRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.TemperatureRange.toObject = function(includeInstance, msg) {
  var f, obj = {
low: (f = msg.getLow()) && types_unit_pb.Temperature.toObject(includeInstance, f),
high: (f = msg.getHigh()) && types_unit_pb.Temperature.toObject(includeInstance, f),
ideal: (f = msg.getIdeal()) && types_unit_pb.Temperature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.TemperatureRange}
 */
proto.smartcore.traits.TemperatureRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.TemperatureRange;
  return proto.smartcore.traits.TemperatureRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.TemperatureRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.TemperatureRange}
 */
proto.smartcore.traits.TemperatureRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_unit_pb.Temperature;
      reader.readMessage(value,types_unit_pb.Temperature.deserializeBinaryFromReader);
      msg.setLow(value);
      break;
    case 2:
      var value = new types_unit_pb.Temperature;
      reader.readMessage(value,types_unit_pb.Temperature.deserializeBinaryFromReader);
      msg.setHigh(value);
      break;
    case 3:
      var value = new types_unit_pb.Temperature;
      reader.readMessage(value,types_unit_pb.Temperature.deserializeBinaryFromReader);
      msg.setIdeal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.TemperatureRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.TemperatureRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.TemperatureRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.TemperatureRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLow();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_unit_pb.Temperature.serializeBinaryToWriter
    );
  }
  f = message.getHigh();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      types_unit_pb.Temperature.serializeBinaryToWriter
    );
  }
  f = message.getIdeal();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      types_unit_pb.Temperature.serializeBinaryToWriter
    );
  }
};


/**
 * optional smartcore.types.Temperature low = 1;
 * @return {?proto.smartcore.types.Temperature}
 */
proto.smartcore.traits.TemperatureRange.prototype.getLow = function() {
  return /** @type{?proto.smartcore.types.Temperature} */ (
    jspb.Message.getWrapperField(this, types_unit_pb.Temperature, 1));
};


/**
 * @param {?proto.smartcore.types.Temperature|undefined} value
 * @return {!proto.smartcore.traits.TemperatureRange} returns this
*/
proto.smartcore.traits.TemperatureRange.prototype.setLow = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.TemperatureRange} returns this
 */
proto.smartcore.traits.TemperatureRange.prototype.clearLow = function() {
  return this.setLow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.TemperatureRange.prototype.hasLow = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional smartcore.types.Temperature high = 2;
 * @return {?proto.smartcore.types.Temperature}
 */
proto.smartcore.traits.TemperatureRange.prototype.getHigh = function() {
  return /** @type{?proto.smartcore.types.Temperature} */ (
    jspb.Message.getWrapperField(this, types_unit_pb.Temperature, 2));
};


/**
 * @param {?proto.smartcore.types.Temperature|undefined} value
 * @return {!proto.smartcore.traits.TemperatureRange} returns this
*/
proto.smartcore.traits.TemperatureRange.prototype.setHigh = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.TemperatureRange} returns this
 */
proto.smartcore.traits.TemperatureRange.prototype.clearHigh = function() {
  return this.setHigh(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.TemperatureRange.prototype.hasHigh = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional smartcore.types.Temperature ideal = 3;
 * @return {?proto.smartcore.types.Temperature}
 */
proto.smartcore.traits.TemperatureRange.prototype.getIdeal = function() {
  return /** @type{?proto.smartcore.types.Temperature} */ (
    jspb.Message.getWrapperField(this, types_unit_pb.Temperature, 3));
};


/**
 * @param {?proto.smartcore.types.Temperature|undefined} value
 * @return {!proto.smartcore.traits.TemperatureRange} returns this
*/
proto.smartcore.traits.TemperatureRange.prototype.setIdeal = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.TemperatureRange} returns this
 */
proto.smartcore.traits.TemperatureRange.prototype.clearIdeal = function() {
  return this.setIdeal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.TemperatureRange.prototype.hasIdeal = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.smartcore.traits.AirTemperatureSupport.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.AirTemperatureSupport.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.AirTemperatureSupport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.AirTemperatureSupport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.AirTemperatureSupport.toObject = function(includeInstance, msg) {
  var f, obj = {
resourceSupport: (f = msg.getResourceSupport()) && types_info_pb.ResourceSupport.toObject(includeInstance, f),
nativeUnit: jspb.Message.getFieldWithDefault(msg, 2, 0),
supportedModesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
minRangeCelsius: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.AirTemperatureSupport}
 */
proto.smartcore.traits.AirTemperatureSupport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.AirTemperatureSupport;
  return proto.smartcore.traits.AirTemperatureSupport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.AirTemperatureSupport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.AirTemperatureSupport}
 */
proto.smartcore.traits.AirTemperatureSupport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_info_pb.ResourceSupport;
      reader.readMessage(value,types_info_pb.ResourceSupport.deserializeBinaryFromReader);
      msg.setResourceSupport(value);
      break;
    case 2:
      var value = /** @type {!proto.smartcore.types.TemperatureUnit} */ (reader.readEnum());
      msg.setNativeUnit(value);
      break;
    case 3:
      var values = /** @type {!Array<!proto.smartcore.traits.AirTemperature.Mode>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSupportedModes(values[i]);
      }
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinRangeCelsius(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.AirTemperatureSupport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.AirTemperatureSupport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.AirTemperatureSupport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.AirTemperatureSupport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourceSupport();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_info_pb.ResourceSupport.serializeBinaryToWriter
    );
  }
  f = message.getNativeUnit();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSupportedModesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
  f = message.getMinRangeCelsius();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional smartcore.types.ResourceSupport resource_support = 1;
 * @return {?proto.smartcore.types.ResourceSupport}
 */
proto.smartcore.traits.AirTemperatureSupport.prototype.getResourceSupport = function() {
  return /** @type{?proto.smartcore.types.ResourceSupport} */ (
    jspb.Message.getWrapperField(this, types_info_pb.ResourceSupport, 1));
};


/**
 * @param {?proto.smartcore.types.ResourceSupport|undefined} value
 * @return {!proto.smartcore.traits.AirTemperatureSupport} returns this
*/
proto.smartcore.traits.AirTemperatureSupport.prototype.setResourceSupport = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.AirTemperatureSupport} returns this
 */
proto.smartcore.traits.AirTemperatureSupport.prototype.clearResourceSupport = function() {
  return this.setResourceSupport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.AirTemperatureSupport.prototype.hasResourceSupport = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional smartcore.types.TemperatureUnit native_unit = 2;
 * @return {!proto.smartcore.types.TemperatureUnit}
 */
proto.smartcore.traits.AirTemperatureSupport.prototype.getNativeUnit = function() {
  return /** @type {!proto.smartcore.types.TemperatureUnit} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.smartcore.types.TemperatureUnit} value
 * @return {!proto.smartcore.traits.AirTemperatureSupport} returns this
 */
proto.smartcore.traits.AirTemperatureSupport.prototype.setNativeUnit = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated AirTemperature.Mode supported_modes = 3;
 * @return {!Array<!proto.smartcore.traits.AirTemperature.Mode>}
 */
proto.smartcore.traits.AirTemperatureSupport.prototype.getSupportedModesList = function() {
  return /** @type {!Array<!proto.smartcore.traits.AirTemperature.Mode>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<!proto.smartcore.traits.AirTemperature.Mode>} value
 * @return {!proto.smartcore.traits.AirTemperatureSupport} returns this
 */
proto.smartcore.traits.AirTemperatureSupport.prototype.setSupportedModesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.smartcore.traits.AirTemperature.Mode} value
 * @param {number=} opt_index
 * @return {!proto.smartcore.traits.AirTemperatureSupport} returns this
 */
proto.smartcore.traits.AirTemperatureSupport.prototype.addSupportedModes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.smartcore.traits.AirTemperatureSupport} returns this
 */
proto.smartcore.traits.AirTemperatureSupport.prototype.clearSupportedModesList = function() {
  return this.setSupportedModesList([]);
};


/**
 * optional double min_range_celsius = 4;
 * @return {number}
 */
proto.smartcore.traits.AirTemperatureSupport.prototype.getMinRangeCelsius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.smartcore.traits.AirTemperatureSupport} returns this
 */
proto.smartcore.traits.AirTemperatureSupport.prototype.setMinRangeCelsius = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.GetAirTemperatureRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.GetAirTemperatureRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.GetAirTemperatureRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.GetAirTemperatureRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
readMask: (f = msg.getReadMask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.GetAirTemperatureRequest}
 */
proto.smartcore.traits.GetAirTemperatureRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.GetAirTemperatureRequest;
  return proto.smartcore.traits.GetAirTemperatureRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.GetAirTemperatureRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.GetAirTemperatureRequest}
 */
proto.smartcore.traits.GetAirTemperatureRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setReadMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.GetAirTemperatureRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.GetAirTemperatureRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.GetAirTemperatureRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.GetAirTemperatureRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReadMask();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.smartcore.traits.GetAirTemperatureRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.smartcore.traits.GetAirTemperatureRequest} returns this
 */
proto.smartcore.traits.GetAirTemperatureRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.FieldMask read_mask = 2;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.smartcore.traits.GetAirTemperatureRequest.prototype.getReadMask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 2));
};


/**
 * @param {?proto.google.protobuf.FieldMask|undefined} value
 * @return {!proto.smartcore.traits.GetAirTemperatureRequest} returns this
*/
proto.smartcore.traits.GetAirTemperatureRequest.prototype.setReadMask = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.GetAirTemperatureRequest} returns this
 */
proto.smartcore.traits.GetAirTemperatureRequest.prototype.clearReadMask = function() {
  return this.setReadMask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.GetAirTemperatureRequest.prototype.hasReadMask = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.UpdateAirTemperatureRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.UpdateAirTemperatureRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.UpdateAirTemperatureRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.UpdateAirTemperatureRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
state: (f = msg.getState()) && proto.smartcore.traits.AirTemperature.toObject(includeInstance, f),
updateMask: (f = msg.getUpdateMask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.UpdateAirTemperatureRequest}
 */
proto.smartcore.traits.UpdateAirTemperatureRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.UpdateAirTemperatureRequest;
  return proto.smartcore.traits.UpdateAirTemperatureRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.UpdateAirTemperatureRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.UpdateAirTemperatureRequest}
 */
proto.smartcore.traits.UpdateAirTemperatureRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.smartcore.traits.AirTemperature;
      reader.readMessage(value,proto.smartcore.traits.AirTemperature.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 3:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setUpdateMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.UpdateAirTemperatureRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.UpdateAirTemperatureRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.UpdateAirTemperatureRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.UpdateAirTemperatureRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.smartcore.traits.AirTemperature.serializeBinaryToWriter
    );
  }
  f = message.getUpdateMask();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.smartcore.traits.UpdateAirTemperatureRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.smartcore.traits.UpdateAirTemperatureRequest} returns this
 */
proto.smartcore.traits.UpdateAirTemperatureRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AirTemperature state = 2;
 * @return {?proto.smartcore.traits.AirTemperature}
 */
proto.smartcore.traits.UpdateAirTemperatureRequest.prototype.getState = function() {
  return /** @type{?proto.smartcore.traits.AirTemperature} */ (
    jspb.Message.getWrapperField(this, proto.smartcore.traits.AirTemperature, 2));
};


/**
 * @param {?proto.smartcore.traits.AirTemperature|undefined} value
 * @return {!proto.smartcore.traits.UpdateAirTemperatureRequest} returns this
*/
proto.smartcore.traits.UpdateAirTemperatureRequest.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.UpdateAirTemperatureRequest} returns this
 */
proto.smartcore.traits.UpdateAirTemperatureRequest.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.UpdateAirTemperatureRequest.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.FieldMask update_mask = 3;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.smartcore.traits.UpdateAirTemperatureRequest.prototype.getUpdateMask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 3));
};


/**
 * @param {?proto.google.protobuf.FieldMask|undefined} value
 * @return {!proto.smartcore.traits.UpdateAirTemperatureRequest} returns this
*/
proto.smartcore.traits.UpdateAirTemperatureRequest.prototype.setUpdateMask = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.UpdateAirTemperatureRequest} returns this
 */
proto.smartcore.traits.UpdateAirTemperatureRequest.prototype.clearUpdateMask = function() {
  return this.setUpdateMask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.UpdateAirTemperatureRequest.prototype.hasUpdateMask = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.PullAirTemperatureRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.PullAirTemperatureRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.PullAirTemperatureRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.PullAirTemperatureRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
readMask: (f = msg.getReadMask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f),
updatesOnly: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.PullAirTemperatureRequest}
 */
proto.smartcore.traits.PullAirTemperatureRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.PullAirTemperatureRequest;
  return proto.smartcore.traits.PullAirTemperatureRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.PullAirTemperatureRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.PullAirTemperatureRequest}
 */
proto.smartcore.traits.PullAirTemperatureRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setReadMask(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpdatesOnly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.PullAirTemperatureRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.PullAirTemperatureRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.PullAirTemperatureRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.PullAirTemperatureRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReadMask();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
  f = message.getUpdatesOnly();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.smartcore.traits.PullAirTemperatureRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.smartcore.traits.PullAirTemperatureRequest} returns this
 */
proto.smartcore.traits.PullAirTemperatureRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.FieldMask read_mask = 2;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.smartcore.traits.PullAirTemperatureRequest.prototype.getReadMask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 2));
};


/**
 * @param {?proto.google.protobuf.FieldMask|undefined} value
 * @return {!proto.smartcore.traits.PullAirTemperatureRequest} returns this
*/
proto.smartcore.traits.PullAirTemperatureRequest.prototype.setReadMask = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.PullAirTemperatureRequest} returns this
 */
proto.smartcore.traits.PullAirTemperatureRequest.prototype.clearReadMask = function() {
  return this.setReadMask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.PullAirTemperatureRequest.prototype.hasReadMask = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool updates_only = 3;
 * @return {boolean}
 */
proto.smartcore.traits.PullAirTemperatureRequest.prototype.getUpdatesOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.smartcore.traits.PullAirTemperatureRequest} returns this
 */
proto.smartcore.traits.PullAirTemperatureRequest.prototype.setUpdatesOnly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.smartcore.traits.PullAirTemperatureResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.PullAirTemperatureResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.PullAirTemperatureResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.PullAirTemperatureResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.PullAirTemperatureResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
changesList: jspb.Message.toObjectList(msg.getChangesList(),
    proto.smartcore.traits.PullAirTemperatureResponse.Change.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.PullAirTemperatureResponse}
 */
proto.smartcore.traits.PullAirTemperatureResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.PullAirTemperatureResponse;
  return proto.smartcore.traits.PullAirTemperatureResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.PullAirTemperatureResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.PullAirTemperatureResponse}
 */
proto.smartcore.traits.PullAirTemperatureResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.smartcore.traits.PullAirTemperatureResponse.Change;
      reader.readMessage(value,proto.smartcore.traits.PullAirTemperatureResponse.Change.deserializeBinaryFromReader);
      msg.addChanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.PullAirTemperatureResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.PullAirTemperatureResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.PullAirTemperatureResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.PullAirTemperatureResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.smartcore.traits.PullAirTemperatureResponse.Change.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.PullAirTemperatureResponse.Change.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.PullAirTemperatureResponse.Change.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.PullAirTemperatureResponse.Change} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.PullAirTemperatureResponse.Change.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
changeTime: (f = msg.getChangeTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
airTemperature: (f = msg.getAirTemperature()) && proto.smartcore.traits.AirTemperature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.PullAirTemperatureResponse.Change}
 */
proto.smartcore.traits.PullAirTemperatureResponse.Change.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.PullAirTemperatureResponse.Change;
  return proto.smartcore.traits.PullAirTemperatureResponse.Change.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.PullAirTemperatureResponse.Change} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.PullAirTemperatureResponse.Change}
 */
proto.smartcore.traits.PullAirTemperatureResponse.Change.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setChangeTime(value);
      break;
    case 3:
      var value = new proto.smartcore.traits.AirTemperature;
      reader.readMessage(value,proto.smartcore.traits.AirTemperature.deserializeBinaryFromReader);
      msg.setAirTemperature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.PullAirTemperatureResponse.Change.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.PullAirTemperatureResponse.Change.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.PullAirTemperatureResponse.Change} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.PullAirTemperatureResponse.Change.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChangeTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAirTemperature();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.smartcore.traits.AirTemperature.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.smartcore.traits.PullAirTemperatureResponse.Change.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.smartcore.traits.PullAirTemperatureResponse.Change} returns this
 */
proto.smartcore.traits.PullAirTemperatureResponse.Change.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp change_time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.smartcore.traits.PullAirTemperatureResponse.Change.prototype.getChangeTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.smartcore.traits.PullAirTemperatureResponse.Change} returns this
*/
proto.smartcore.traits.PullAirTemperatureResponse.Change.prototype.setChangeTime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.PullAirTemperatureResponse.Change} returns this
 */
proto.smartcore.traits.PullAirTemperatureResponse.Change.prototype.clearChangeTime = function() {
  return this.setChangeTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.PullAirTemperatureResponse.Change.prototype.hasChangeTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AirTemperature air_temperature = 3;
 * @return {?proto.smartcore.traits.AirTemperature}
 */
proto.smartcore.traits.PullAirTemperatureResponse.Change.prototype.getAirTemperature = function() {
  return /** @type{?proto.smartcore.traits.AirTemperature} */ (
    jspb.Message.getWrapperField(this, proto.smartcore.traits.AirTemperature, 3));
};


/**
 * @param {?proto.smartcore.traits.AirTemperature|undefined} value
 * @return {!proto.smartcore.traits.PullAirTemperatureResponse.Change} returns this
*/
proto.smartcore.traits.PullAirTemperatureResponse.Change.prototype.setAirTemperature = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.PullAirTemperatureResponse.Change} returns this
 */
proto.smartcore.traits.PullAirTemperatureResponse.Change.prototype.clearAirTemperature = function() {
  return this.setAirTemperature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.PullAirTemperatureResponse.Change.prototype.hasAirTemperature = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Change changes = 1;
 * @return {!Array<!proto.smartcore.traits.PullAirTemperatureResponse.Change>}
 */
proto.smartcore.traits.PullAirTemperatureResponse.prototype.getChangesList = function() {
  return /** @type{!Array<!proto.smartcore.traits.PullAirTemperatureResponse.Change>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.smartcore.traits.PullAirTemperatureResponse.Change, 1));
};


/**
 * @param {!Array<!proto.smartcore.traits.PullAirTemperatureResponse.Change>} value
 * @return {!proto.smartcore.traits.PullAirTemperatureResponse} returns this
*/
proto.smartcore.traits.PullAirTemperatureResponse.prototype.setChangesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.smartcore.traits.PullAirTemperatureResponse.Change=} opt_value
 * @param {number=} opt_index
 * @return {!proto.smartcore.traits.PullAirTemperatureResponse.Change}
 */
proto.smartcore.traits.PullAirTemperatureResponse.prototype.addChanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.smartcore.traits.PullAirTemperatureResponse.Change, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.smartcore.traits.PullAirTemperatureResponse} returns this
 */
proto.smartcore.traits.PullAirTemperatureResponse.prototype.clearChangesList = function() {
  return this.setChangesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.DescribeAirTemperatureRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.DescribeAirTemperatureRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.DescribeAirTemperatureRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.DescribeAirTemperatureRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.DescribeAirTemperatureRequest}
 */
proto.smartcore.traits.DescribeAirTemperatureRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.DescribeAirTemperatureRequest;
  return proto.smartcore.traits.DescribeAirTemperatureRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.DescribeAirTemperatureRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.DescribeAirTemperatureRequest}
 */
proto.smartcore.traits.DescribeAirTemperatureRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.DescribeAirTemperatureRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.DescribeAirTemperatureRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.DescribeAirTemperatureRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.DescribeAirTemperatureRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.smartcore.traits.DescribeAirTemperatureRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.smartcore.traits.DescribeAirTemperatureRequest} returns this
 */
proto.smartcore.traits.DescribeAirTemperatureRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.smartcore.traits);
