// source: traits/air_quality_sensor.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_field_mask_pb = require('google-protobuf/google/protobuf/field_mask_pb.js');
goog.object.extend(proto, google_protobuf_field_mask_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var types_info_pb = require('../types/info_pb.js');
goog.object.extend(proto, types_info_pb);
var types_number_pb = require('../types/number_pb.js');
goog.object.extend(proto, types_number_pb);
goog.exportSymbol('proto.smartcore.traits.AirQuality', null, global);
goog.exportSymbol('proto.smartcore.traits.AirQuality.Comfort', null, global);
goog.exportSymbol('proto.smartcore.traits.AirQualitySupport', null, global);
goog.exportSymbol('proto.smartcore.traits.DescribeAirQualityRequest', null, global);
goog.exportSymbol('proto.smartcore.traits.GetAirQualityRequest', null, global);
goog.exportSymbol('proto.smartcore.traits.PullAirQualityRequest', null, global);
goog.exportSymbol('proto.smartcore.traits.PullAirQualityResponse', null, global);
goog.exportSymbol('proto.smartcore.traits.PullAirQualityResponse.Change', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.AirQuality = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smartcore.traits.AirQuality, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.AirQuality.displayName = 'proto.smartcore.traits.AirQuality';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.AirQualitySupport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.smartcore.traits.AirQualitySupport.repeatedFields_, null);
};
goog.inherits(proto.smartcore.traits.AirQualitySupport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.AirQualitySupport.displayName = 'proto.smartcore.traits.AirQualitySupport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.GetAirQualityRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smartcore.traits.GetAirQualityRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.GetAirQualityRequest.displayName = 'proto.smartcore.traits.GetAirQualityRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.PullAirQualityRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smartcore.traits.PullAirQualityRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.PullAirQualityRequest.displayName = 'proto.smartcore.traits.PullAirQualityRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.PullAirQualityResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.smartcore.traits.PullAirQualityResponse.repeatedFields_, null);
};
goog.inherits(proto.smartcore.traits.PullAirQualityResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.PullAirQualityResponse.displayName = 'proto.smartcore.traits.PullAirQualityResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.PullAirQualityResponse.Change = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smartcore.traits.PullAirQualityResponse.Change, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.PullAirQualityResponse.Change.displayName = 'proto.smartcore.traits.PullAirQualityResponse.Change';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.DescribeAirQualityRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smartcore.traits.DescribeAirQualityRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.DescribeAirQualityRequest.displayName = 'proto.smartcore.traits.DescribeAirQualityRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.AirQuality.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.AirQuality.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.AirQuality} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.AirQuality.toObject = function(includeInstance, msg) {
  var f, obj = {
    carbonDioxideLevel: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    volatileOrganicCompounds: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    airPressure: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    comfort: jspb.Message.getFieldWithDefault(msg, 4, 0),
    infectionRisk: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    score: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.AirQuality}
 */
proto.smartcore.traits.AirQuality.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.AirQuality;
  return proto.smartcore.traits.AirQuality.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.AirQuality} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.AirQuality}
 */
proto.smartcore.traits.AirQuality.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCarbonDioxideLevel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVolatileOrganicCompounds(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAirPressure(value);
      break;
    case 4:
      var value = /** @type {!proto.smartcore.traits.AirQuality.Comfort} */ (reader.readEnum());
      msg.setComfort(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setInfectionRisk(value);
      break;
      case 6:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.AirQuality.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.AirQuality.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.AirQuality} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.AirQuality.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getComfort();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
        f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
        6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.smartcore.traits.AirQuality.Comfort = {
  COMFORT_UNSPECIFIED: 0,
  COMFORTABLE: 1,
  UNCOMFORTABLE: 2
};

/**
 * optional float carbon_dioxide_level = 1;
 * @return {number}
 */
proto.smartcore.traits.AirQuality.prototype.getCarbonDioxideLevel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.smartcore.traits.AirQuality} returns this
 */
proto.smartcore.traits.AirQuality.prototype.setCarbonDioxideLevel = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.smartcore.traits.AirQuality} returns this
 */
proto.smartcore.traits.AirQuality.prototype.clearCarbonDioxideLevel = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.AirQuality.prototype.hasCarbonDioxideLevel = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float volatile_organic_compounds = 2;
 * @return {number}
 */
proto.smartcore.traits.AirQuality.prototype.getVolatileOrganicCompounds = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.smartcore.traits.AirQuality} returns this
 */
proto.smartcore.traits.AirQuality.prototype.setVolatileOrganicCompounds = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.smartcore.traits.AirQuality} returns this
 */
proto.smartcore.traits.AirQuality.prototype.clearVolatileOrganicCompounds = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.AirQuality.prototype.hasVolatileOrganicCompounds = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float air_pressure = 3;
 * @return {number}
 */
proto.smartcore.traits.AirQuality.prototype.getAirPressure = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.smartcore.traits.AirQuality} returns this
 */
proto.smartcore.traits.AirQuality.prototype.setAirPressure = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.smartcore.traits.AirQuality} returns this
 */
proto.smartcore.traits.AirQuality.prototype.clearAirPressure = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.AirQuality.prototype.hasAirPressure = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Comfort comfort = 4;
 * @return {!proto.smartcore.traits.AirQuality.Comfort}
 */
proto.smartcore.traits.AirQuality.prototype.getComfort = function() {
  return /** @type {!proto.smartcore.traits.AirQuality.Comfort} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.smartcore.traits.AirQuality.Comfort} value
 * @return {!proto.smartcore.traits.AirQuality} returns this
 */
proto.smartcore.traits.AirQuality.prototype.setComfort = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional float infection_risk = 5;
 * @return {number}
 */
proto.smartcore.traits.AirQuality.prototype.getInfectionRisk = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.smartcore.traits.AirQuality} returns this
 */
proto.smartcore.traits.AirQuality.prototype.setInfectionRisk = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.smartcore.traits.AirQuality} returns this
 */
proto.smartcore.traits.AirQuality.prototype.clearInfectionRisk = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.AirQuality.prototype.hasInfectionRisk = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float score = 6;
 * @return {number}
 */
proto.smartcore.traits.AirQuality.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.smartcore.traits.AirQuality} returns this
 */
proto.smartcore.traits.AirQuality.prototype.setScore = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.smartcore.traits.AirQuality} returns this
 */
proto.smartcore.traits.AirQuality.prototype.clearScore = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.AirQuality.prototype.hasScore = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.smartcore.traits.AirQualitySupport.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.AirQualitySupport.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.AirQualitySupport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.AirQualitySupport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.AirQualitySupport.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourceSupport: (f = msg.getResourceSupport()) && types_info_pb.ResourceSupport.toObject(includeInstance, f),
    carbonDioxideLevel: (f = msg.getCarbonDioxideLevel()) && types_number_pb.FloatBounds.toObject(includeInstance, f),
    volatileOrganicCompounds: (f = msg.getVolatileOrganicCompounds()) && types_number_pb.FloatBounds.toObject(includeInstance, f),
    airPressure: (f = msg.getAirPressure()) && types_number_pb.FloatBounds.toObject(includeInstance, f),
    comfortList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.AirQualitySupport}
 */
proto.smartcore.traits.AirQualitySupport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.AirQualitySupport;
  return proto.smartcore.traits.AirQualitySupport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.AirQualitySupport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.AirQualitySupport}
 */
proto.smartcore.traits.AirQualitySupport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_info_pb.ResourceSupport;
      reader.readMessage(value,types_info_pb.ResourceSupport.deserializeBinaryFromReader);
      msg.setResourceSupport(value);
      break;
    case 2:
      var value = new types_number_pb.FloatBounds;
      reader.readMessage(value,types_number_pb.FloatBounds.deserializeBinaryFromReader);
      msg.setCarbonDioxideLevel(value);
      break;
    case 3:
      var value = new types_number_pb.FloatBounds;
      reader.readMessage(value,types_number_pb.FloatBounds.deserializeBinaryFromReader);
      msg.setVolatileOrganicCompounds(value);
      break;
    case 4:
      var value = new types_number_pb.FloatBounds;
      reader.readMessage(value,types_number_pb.FloatBounds.deserializeBinaryFromReader);
      msg.setAirPressure(value);
      break;
    case 5:
      var values = /** @type {!Array<!proto.smartcore.traits.AirQuality.Comfort>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addComfort(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.AirQualitySupport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.AirQualitySupport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.AirQualitySupport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.AirQualitySupport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourceSupport();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_info_pb.ResourceSupport.serializeBinaryToWriter
    );
  }
  f = message.getCarbonDioxideLevel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      types_number_pb.FloatBounds.serializeBinaryToWriter
    );
  }
  f = message.getVolatileOrganicCompounds();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      types_number_pb.FloatBounds.serializeBinaryToWriter
    );
  }
  f = message.getAirPressure();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      types_number_pb.FloatBounds.serializeBinaryToWriter
    );
  }
  f = message.getComfortList();
  if (f.length > 0) {
    writer.writePackedEnum(
      5,
      f
    );
  }
};


/**
 * optional smartcore.types.ResourceSupport resource_support = 1;
 * @return {?proto.smartcore.types.ResourceSupport}
 */
proto.smartcore.traits.AirQualitySupport.prototype.getResourceSupport = function() {
  return /** @type{?proto.smartcore.types.ResourceSupport} */ (
    jspb.Message.getWrapperField(this, types_info_pb.ResourceSupport, 1));
};


/**
 * @param {?proto.smartcore.types.ResourceSupport|undefined} value
 * @return {!proto.smartcore.traits.AirQualitySupport} returns this
*/
proto.smartcore.traits.AirQualitySupport.prototype.setResourceSupport = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.AirQualitySupport} returns this
 */
proto.smartcore.traits.AirQualitySupport.prototype.clearResourceSupport = function() {
  return this.setResourceSupport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.AirQualitySupport.prototype.hasResourceSupport = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional smartcore.types.FloatBounds carbon_dioxide_level = 2;
 * @return {?proto.smartcore.types.FloatBounds}
 */
proto.smartcore.traits.AirQualitySupport.prototype.getCarbonDioxideLevel = function() {
  return /** @type{?proto.smartcore.types.FloatBounds} */ (
    jspb.Message.getWrapperField(this, types_number_pb.FloatBounds, 2));
};


/**
 * @param {?proto.smartcore.types.FloatBounds|undefined} value
 * @return {!proto.smartcore.traits.AirQualitySupport} returns this
*/
proto.smartcore.traits.AirQualitySupport.prototype.setCarbonDioxideLevel = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.AirQualitySupport} returns this
 */
proto.smartcore.traits.AirQualitySupport.prototype.clearCarbonDioxideLevel = function() {
  return this.setCarbonDioxideLevel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.AirQualitySupport.prototype.hasCarbonDioxideLevel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional smartcore.types.FloatBounds volatile_organic_compounds = 3;
 * @return {?proto.smartcore.types.FloatBounds}
 */
proto.smartcore.traits.AirQualitySupport.prototype.getVolatileOrganicCompounds = function() {
  return /** @type{?proto.smartcore.types.FloatBounds} */ (
    jspb.Message.getWrapperField(this, types_number_pb.FloatBounds, 3));
};


/**
 * @param {?proto.smartcore.types.FloatBounds|undefined} value
 * @return {!proto.smartcore.traits.AirQualitySupport} returns this
*/
proto.smartcore.traits.AirQualitySupport.prototype.setVolatileOrganicCompounds = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.AirQualitySupport} returns this
 */
proto.smartcore.traits.AirQualitySupport.prototype.clearVolatileOrganicCompounds = function() {
  return this.setVolatileOrganicCompounds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.AirQualitySupport.prototype.hasVolatileOrganicCompounds = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional smartcore.types.FloatBounds air_pressure = 4;
 * @return {?proto.smartcore.types.FloatBounds}
 */
proto.smartcore.traits.AirQualitySupport.prototype.getAirPressure = function() {
  return /** @type{?proto.smartcore.types.FloatBounds} */ (
    jspb.Message.getWrapperField(this, types_number_pb.FloatBounds, 4));
};


/**
 * @param {?proto.smartcore.types.FloatBounds|undefined} value
 * @return {!proto.smartcore.traits.AirQualitySupport} returns this
*/
proto.smartcore.traits.AirQualitySupport.prototype.setAirPressure = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.AirQualitySupport} returns this
 */
proto.smartcore.traits.AirQualitySupport.prototype.clearAirPressure = function() {
  return this.setAirPressure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.AirQualitySupport.prototype.hasAirPressure = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated AirQuality.Comfort comfort = 5;
 * @return {!Array<!proto.smartcore.traits.AirQuality.Comfort>}
 */
proto.smartcore.traits.AirQualitySupport.prototype.getComfortList = function() {
  return /** @type {!Array<!proto.smartcore.traits.AirQuality.Comfort>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<!proto.smartcore.traits.AirQuality.Comfort>} value
 * @return {!proto.smartcore.traits.AirQualitySupport} returns this
 */
proto.smartcore.traits.AirQualitySupport.prototype.setComfortList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!proto.smartcore.traits.AirQuality.Comfort} value
 * @param {number=} opt_index
 * @return {!proto.smartcore.traits.AirQualitySupport} returns this
 */
proto.smartcore.traits.AirQualitySupport.prototype.addComfort = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.smartcore.traits.AirQualitySupport} returns this
 */
proto.smartcore.traits.AirQualitySupport.prototype.clearComfortList = function() {
  return this.setComfortList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.GetAirQualityRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.GetAirQualityRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.GetAirQualityRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.GetAirQualityRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    readMask: (f = msg.getReadMask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.GetAirQualityRequest}
 */
proto.smartcore.traits.GetAirQualityRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.GetAirQualityRequest;
  return proto.smartcore.traits.GetAirQualityRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.GetAirQualityRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.GetAirQualityRequest}
 */
proto.smartcore.traits.GetAirQualityRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setReadMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.GetAirQualityRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.GetAirQualityRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.GetAirQualityRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.GetAirQualityRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReadMask();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.smartcore.traits.GetAirQualityRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.smartcore.traits.GetAirQualityRequest} returns this
 */
proto.smartcore.traits.GetAirQualityRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.FieldMask read_mask = 2;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.smartcore.traits.GetAirQualityRequest.prototype.getReadMask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 2));
};


/**
 * @param {?proto.google.protobuf.FieldMask|undefined} value
 * @return {!proto.smartcore.traits.GetAirQualityRequest} returns this
*/
proto.smartcore.traits.GetAirQualityRequest.prototype.setReadMask = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.GetAirQualityRequest} returns this
 */
proto.smartcore.traits.GetAirQualityRequest.prototype.clearReadMask = function() {
  return this.setReadMask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.GetAirQualityRequest.prototype.hasReadMask = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.PullAirQualityRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.PullAirQualityRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.PullAirQualityRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.PullAirQualityRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    readMask: (f = msg.getReadMask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f),
    updatesOnly: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.PullAirQualityRequest}
 */
proto.smartcore.traits.PullAirQualityRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.PullAirQualityRequest;
  return proto.smartcore.traits.PullAirQualityRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.PullAirQualityRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.PullAirQualityRequest}
 */
proto.smartcore.traits.PullAirQualityRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setReadMask(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUpdatesOnly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.PullAirQualityRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.PullAirQualityRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.PullAirQualityRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.PullAirQualityRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReadMask();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
  f = message.getUpdatesOnly();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.smartcore.traits.PullAirQualityRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.smartcore.traits.PullAirQualityRequest} returns this
 */
proto.smartcore.traits.PullAirQualityRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.FieldMask read_mask = 2;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.smartcore.traits.PullAirQualityRequest.prototype.getReadMask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 2));
};


/**
 * @param {?proto.google.protobuf.FieldMask|undefined} value
 * @return {!proto.smartcore.traits.PullAirQualityRequest} returns this
*/
proto.smartcore.traits.PullAirQualityRequest.prototype.setReadMask = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.PullAirQualityRequest} returns this
 */
proto.smartcore.traits.PullAirQualityRequest.prototype.clearReadMask = function() {
  return this.setReadMask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.PullAirQualityRequest.prototype.hasReadMask = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool updates_only = 3;
 * @return {boolean}
 */
proto.smartcore.traits.PullAirQualityRequest.prototype.getUpdatesOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.smartcore.traits.PullAirQualityRequest} returns this
 */
proto.smartcore.traits.PullAirQualityRequest.prototype.setUpdatesOnly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.smartcore.traits.PullAirQualityResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.PullAirQualityResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.PullAirQualityResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.PullAirQualityResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.PullAirQualityResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    changesList: jspb.Message.toObjectList(msg.getChangesList(),
    proto.smartcore.traits.PullAirQualityResponse.Change.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.PullAirQualityResponse}
 */
proto.smartcore.traits.PullAirQualityResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.PullAirQualityResponse;
  return proto.smartcore.traits.PullAirQualityResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.PullAirQualityResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.PullAirQualityResponse}
 */
proto.smartcore.traits.PullAirQualityResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.smartcore.traits.PullAirQualityResponse.Change;
      reader.readMessage(value,proto.smartcore.traits.PullAirQualityResponse.Change.deserializeBinaryFromReader);
      msg.addChanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.PullAirQualityResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.PullAirQualityResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.PullAirQualityResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.PullAirQualityResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.smartcore.traits.PullAirQualityResponse.Change.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.PullAirQualityResponse.Change.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.PullAirQualityResponse.Change.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.PullAirQualityResponse.Change} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.PullAirQualityResponse.Change.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    changeTime: (f = msg.getChangeTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    airQuality: (f = msg.getAirQuality()) && proto.smartcore.traits.AirQuality.toObject(includeInstance, f),
    updateMask: (f = msg.getUpdateMask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.PullAirQualityResponse.Change}
 */
proto.smartcore.traits.PullAirQualityResponse.Change.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.PullAirQualityResponse.Change;
  return proto.smartcore.traits.PullAirQualityResponse.Change.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.PullAirQualityResponse.Change} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.PullAirQualityResponse.Change}
 */
proto.smartcore.traits.PullAirQualityResponse.Change.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setChangeTime(value);
      break;
    case 3:
      var value = new proto.smartcore.traits.AirQuality;
      reader.readMessage(value,proto.smartcore.traits.AirQuality.deserializeBinaryFromReader);
      msg.setAirQuality(value);
      break;
    case 4:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setUpdateMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.PullAirQualityResponse.Change.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.PullAirQualityResponse.Change.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.PullAirQualityResponse.Change} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.PullAirQualityResponse.Change.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChangeTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAirQuality();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.smartcore.traits.AirQuality.serializeBinaryToWriter
    );
  }
  f = message.getUpdateMask();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.smartcore.traits.PullAirQualityResponse.Change.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.smartcore.traits.PullAirQualityResponse.Change} returns this
 */
proto.smartcore.traits.PullAirQualityResponse.Change.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp change_time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.smartcore.traits.PullAirQualityResponse.Change.prototype.getChangeTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.smartcore.traits.PullAirQualityResponse.Change} returns this
*/
proto.smartcore.traits.PullAirQualityResponse.Change.prototype.setChangeTime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.PullAirQualityResponse.Change} returns this
 */
proto.smartcore.traits.PullAirQualityResponse.Change.prototype.clearChangeTime = function() {
  return this.setChangeTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.PullAirQualityResponse.Change.prototype.hasChangeTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AirQuality air_quality = 3;
 * @return {?proto.smartcore.traits.AirQuality}
 */
proto.smartcore.traits.PullAirQualityResponse.Change.prototype.getAirQuality = function() {
  return /** @type{?proto.smartcore.traits.AirQuality} */ (
    jspb.Message.getWrapperField(this, proto.smartcore.traits.AirQuality, 3));
};


/**
 * @param {?proto.smartcore.traits.AirQuality|undefined} value
 * @return {!proto.smartcore.traits.PullAirQualityResponse.Change} returns this
*/
proto.smartcore.traits.PullAirQualityResponse.Change.prototype.setAirQuality = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.PullAirQualityResponse.Change} returns this
 */
proto.smartcore.traits.PullAirQualityResponse.Change.prototype.clearAirQuality = function() {
  return this.setAirQuality(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.PullAirQualityResponse.Change.prototype.hasAirQuality = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.FieldMask update_mask = 4;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.smartcore.traits.PullAirQualityResponse.Change.prototype.getUpdateMask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 4));
};


/**
 * @param {?proto.google.protobuf.FieldMask|undefined} value
 * @return {!proto.smartcore.traits.PullAirQualityResponse.Change} returns this
*/
proto.smartcore.traits.PullAirQualityResponse.Change.prototype.setUpdateMask = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.PullAirQualityResponse.Change} returns this
 */
proto.smartcore.traits.PullAirQualityResponse.Change.prototype.clearUpdateMask = function() {
  return this.setUpdateMask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.PullAirQualityResponse.Change.prototype.hasUpdateMask = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Change changes = 1;
 * @return {!Array<!proto.smartcore.traits.PullAirQualityResponse.Change>}
 */
proto.smartcore.traits.PullAirQualityResponse.prototype.getChangesList = function() {
  return /** @type{!Array<!proto.smartcore.traits.PullAirQualityResponse.Change>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.smartcore.traits.PullAirQualityResponse.Change, 1));
};


/**
 * @param {!Array<!proto.smartcore.traits.PullAirQualityResponse.Change>} value
 * @return {!proto.smartcore.traits.PullAirQualityResponse} returns this
*/
proto.smartcore.traits.PullAirQualityResponse.prototype.setChangesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.smartcore.traits.PullAirQualityResponse.Change=} opt_value
 * @param {number=} opt_index
 * @return {!proto.smartcore.traits.PullAirQualityResponse.Change}
 */
proto.smartcore.traits.PullAirQualityResponse.prototype.addChanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.smartcore.traits.PullAirQualityResponse.Change, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.smartcore.traits.PullAirQualityResponse} returns this
 */
proto.smartcore.traits.PullAirQualityResponse.prototype.clearChangesList = function() {
  return this.setChangesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.DescribeAirQualityRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.DescribeAirQualityRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.DescribeAirQualityRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.DescribeAirQualityRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.DescribeAirQualityRequest}
 */
proto.smartcore.traits.DescribeAirQualityRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.DescribeAirQualityRequest;
  return proto.smartcore.traits.DescribeAirQualityRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.DescribeAirQualityRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.DescribeAirQualityRequest}
 */
proto.smartcore.traits.DescribeAirQualityRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.DescribeAirQualityRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.DescribeAirQualityRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.DescribeAirQualityRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.DescribeAirQualityRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.smartcore.traits.DescribeAirQualityRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.smartcore.traits.DescribeAirQualityRequest} returns this
 */
proto.smartcore.traits.DescribeAirQualityRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.smartcore.traits);
